#define SIMPLE 1
void OUT__1__7816__(void **__out_argv);

struct ::N_A 
{
}
;
typedef struct N_A *pointerToA;

int p_ZNK1N1A3fooEv(const struct N_A *this_)
{
  return 7;
}

int p_ZNK1N1A3bizEv(const struct N_A *this_)
{
// A declaration for this pointer
  const struct N_A *this__ptr__ = this_;
// Build a reference to test the AST copy mechanism.
  p_ZNK1N1A3fooEv(this_);
  int result = 0;
  ;
{
    void *__out_argv1__1527__[2];
    __out_argv1__1527__[0] = ((void *)(&this__ptr__));
    __out_argv1__1527__[1] = ((void *)(&result));
    OUT__1__7816__(__out_argv1__1527__);
  }
  return result;
}
namespace N
{
static void __merlin_dummy_SgClassDeclaration_struct_A_();
}
// I don't think the use of extern "C" is an issue.
// extern "C" void OUT__1__7816__(void **__out_argv)
#pragma ACCEL kernel name="OUT__1__7816__"

void OUT__1__7816__(void **__out_argv)
{
int &result =  *((int *)__out_argv[1]);
const struct N_A *&this__ptr__ =  *((const struct N_A **)__out_argv[0]);
for (int i = 1; i <= p_ZNK1N1A3fooEv(this__ptr__); i++) {
result += i;
}
}
