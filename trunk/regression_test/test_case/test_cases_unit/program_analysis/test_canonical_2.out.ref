// Testing multiple loop initial/testing/increment
#pragma ACCEL kernel

void func_loop()
{
  int a[10];
  int b[10];
  int c[10];
  int i = 0;
  int j = 0;
  int jjj;
  int x;
  int y;
  int z;
  int N = 100;
{
    for (int i = 0, jj, j1 = 0, j2 = 0, j3 = 0, x0 = 0, y1, a1; i < N; i -= b[i]) {
/* block 1*/
      c[i] = a[i] + b[i];
    }
  }
{
/* block 2*/
    for (int i = 0, jj, j1 = 0, j2 = 0, j3 = 0, x0 = 0, y1, a1; i < N; i -= b[i]) 
      c[i] = a[i] + b[i];
  }
{
    int _l_i = 0;
    int _l_jjj;
// Canonicalized from: for(int i = 0, jjj;i >= 0;i += - 1) {...}
// Standardize from: for(_l_i = 0;_l_i >= 0;--_l_i) {...}
    for (_l_i = 0; _l_i <= 0; _l_i++) {
      int _in_l_i = 0 + -1 * _l_i;
/* block 2.1*/
      c[_in_l_i] = a[_in_l_i] + b[_in_l_i];
    }
    _l_i = 0 + -1;
  }
{
    int _l_i_0 = 0;
    int _l_jjj_0 = 0;
// Canonicalized from: for(int i = 0, jjj = 0;i >= 0;i += - 1) {...}
// Standardize from: for(_l_i_0 = 0;_l_i_0 >= 0;--_l_i_0) {...}
    for (_l_i_0 = 0; _l_i_0 <= 0; _l_i_0++) {
      int _in_l_i_0 = 0 + -1 * _l_i_0;
/* block 2.2*/
      c[_in_l_i_0] = a[_in_l_i_0] + b[_in_l_i_0 + _l_jjj_0];
    }
    _l_i_0 = 0 + -1;
  }
  for ((i = 0 , jjj); i >= 0; i++) {
/* block 2.3*/
    c[i] = a[i] + b[i];
  }
  for ((i = 0 , jjj = 0); i >= 0; i++) {
/* block 2.4*/
    c[i] = a[i] + b[i + jjj];
  }
  for ((i = 0 , j = 1); (i < N , i > 0); i += 2) {
/* block 4*/
    c[i] = a[i] + b[i];
  }
  for ((i = 0 , j = 1); i > N && i > 0; i++) {
/* block 5*/
    c[i] = a[i] + b[i];
  }
  for ((i = 0 , j * 3); i <= N; i--) {
/* block 6*/
    c[i] = a[i] + b[i];
  }
  for ((i = 0 , j = 3); i <= N && j >= 0; (i-- , j--)) {
/* block 7*/
    c[i] = a[i] + b[i];
  }
  for ((i = 0 , j = 3); i <= N && j >= 0; ) {
/* block 8*/
  }
  j = 3;
// Canonicalized from: for((i = 0 , j = 3);i <= N;i++) {...}
  for (i = 0; i <= 100; ++i) {
/* block 9*/
  }
  (((a[0] , j = 3) , x = 1) , y);
// Canonicalized from: for(((((a[0] , i = 0) , j = 3) , x = 1) , y);i <= N;i++) {...}
  for (i = 0; i <= 100; ++i) {
/* block 10*/
  }
  j = 3;
// Canonicalized from: for((i = 0 , j = 3);i >= N;(i -= 2 , j--)) {...}
  for (i = 0; i >= 100; i -= 2) {
/* block 11*/
    c[i] = a[i] + b[i];
    j--;
  }
  for ((i = 0 , j = 3); i >= N && j >= N; (i *= 2 , j *= 2)) {
/* block 12*/
    c[i] = a[i] + b[i];
  }
  for (i = a[0]; i < a[1]; i++) {
/* block 13*/
    i + 1;
  }
  j = 0;
  for (i = 0; i < 100; i++) {
/* block 14*/
    j = j + 1;
    j;
  }
  j = 23;
// Canonicalized from: for((i = 0 , j = 23);i <= N;i++) {...}
  for (i = 0; i <= 100; ++i) {
    for (j = - 50; j < 1; j++) {
/* block 15*/
      if ((bool )(j % 2)) 
        a[i] = i;
    }
  }
}
