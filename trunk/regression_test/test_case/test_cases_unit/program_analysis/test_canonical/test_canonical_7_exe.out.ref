// Testing multi-level loops
#include <stdio.h>
#pragma ACCEL kernel

void func_loop()
{
  int a[100];
{
    int _i0;
    for (_i0 = 0; _i0 <= 99UL; ++_i0) {
      int a_tmp = 0;
      a[_i0] = a_tmp;
    }
  }
  int b[100];
  int c[100];
  for (int pp = 0; pp < 100; pp++) {
    a[pp] = 1;
    b[pp] = 5;
    c[pp] = 2;
  }
  int i = 0;
  int j = 0;
  int k = 0;
  int N = 10;
  int i0;
  int i1;
  int i2;
  int i3;
  int i4;
  j = 0;
// Canonicalized from: for((i0 = N , j = 0);i0 >= 0;i0--) {...}
// Standardize from: for(i0 = N;i0 >= 0;--i0) {...}
  for (i0 = 0; i0 <= 10; i0++) {
    int _in_i0 = 10 + -1 * i0;
    j = 1;
// Canonicalized from: for((i1 = N , j = 1);i1 >= 0;i1--) {...}
// Standardize from: for(i1 = N;i1 >= 0;--i1) {...}
    for (i1 = 0; i1 <= 10; i1++) {
      int _in_i1 = 10 + -1 * i1;
      j = 2;
// Canonicalized from: for((i2 = N , j = 2);i2 >= 0;i2--) {...}
// Standardize from: for(i2 = N;i2 >= 0;--i2) {...}
      for (i2 = 0; i2 <= 10; i2++) {
        int _in_i2 = 10 + -1 * i2;
        j = 3;
// Canonicalized from: for((i3 = N , j = 3);i3 >= 0;i3--) {...}
// Standardize from: for(i3 = N;i3 >= 0;--i3) {...}
        for (i3 = 0; i3 <= 10; i3++) {
          int _in_i3 = 10 + -1 * i3;
          j = 4;
// Canonicalized from: for((i4 = N , j = 4);i4 >= 0;i4--) {...}
// Standardize from: for(i4 = N;i4 >= 0;--i4) {...}
          for (i4 = 0; i4 <= 10; i4++) {
            int _in_i4 = 10 + -1 * i4;
/* block 2*/
            c[_in_i0 + _in_i1 + _in_i2 + _in_i3 + _in_i4] = a[_in_i0 + _in_i1 + _in_i2 + _in_i3 + _in_i4] + b[_in_i0 + _in_i1 + _in_i2 + _in_i3 + _in_i4];
            printf("index = %d\n",_in_i0 + _in_i1 + _in_i2 + _in_i3 + _in_i4);
          }
          i4 = 0 + -1;
        }
        i3 = 0 + -1;
      }
      i2 = 0 + -1;
    }
    i1 = 0 + -1;
  }
  i0 = 0 + -1;
  int _l_i0 = 10;
  int _l_j_3 = 0;
// Canonicalized from: for(int i0 = N, j = 0;i0 >= 0;i0--) {...}
// Standardize from: for(_l_i0 = N;_l_i0 >= 0;--_l_i0) {...}
  for (_l_i0 = 0; _l_i0 <= 10; _l_i0++) {
    int _in_l_i0 = 10 + -1 * _l_i0;
    int _l_i1 = 10;
    int _l_j_2 = 1;
// Canonicalized from: for(int i1 = N, j = 1;i1 >= 0;i1--) {...}
// Standardize from: for(_l_i1 = N;_l_i1 >= 0;--_l_i1) {...}
    for (_l_i1 = 0; _l_i1 <= 10; _l_i1++) {
      int _in_l_i1 = 10 + -1 * _l_i1;
      int _l_i2 = 10;
      int _l_j_1 = 2;
// Canonicalized from: for(int i2 = N, j = 2;i2 >= 0;i2--) {...}
// Standardize from: for(_l_i2 = N;_l_i2 >= 0;--_l_i2) {...}
      for (_l_i2 = 0; _l_i2 <= 10; _l_i2++) {
        int _in_l_i2 = 10 + -1 * _l_i2;
        int _l_i3 = 10;
        int _l_j_0 = 3;
// Canonicalized from: for(int i3 = N, j = 3;i3 >= 0;i3--) {...}
// Standardize from: for(_l_i3 = N;_l_i3 >= 0;--_l_i3) {...}
        for (_l_i3 = 0; _l_i3 <= 10; _l_i3++) {
          int _in_l_i3 = 10 + -1 * _l_i3;
          int _l_i4 = 10;
          int _l_j = 4;
// Canonicalized from: for(int i4 = N, j = 4;i4 >= 0;i4--) {...}
// Standardize from: for(_l_i4 = N;_l_i4 >= 0;--_l_i4) {...}
          for (_l_i4 = 0; _l_i4 <= 10; _l_i4++) {
            int _in_l_i4 = 10 + -1 * _l_i4;
/* block 2.1*/
            c[_l_j + _in_l_i0 + _in_l_i1 + _in_l_i2 + _in_l_i3 + _in_l_i4] = a[_in_l_i0 + _in_l_i1 + _in_l_i2 + _in_l_i3 + _in_l_i4] + b[_in_l_i0 + _in_l_i1 + _in_l_i2 + _in_l_i3 + _in_l_i4];
            printf("index = %d\n",_l_j + _in_l_i0 + _in_l_i1 + _in_l_i2 + _in_l_i3 + _in_l_i4);
          }
          _l_i4 = 0 + -1;
        }
        _l_i3 = 0 + -1;
      }
      _l_i2 = 0 + -1;
    }
    _l_i1 = 0 + -1;
  }
  _l_i0 = 0 + -1;
  int _l_i0_0 = 10;
  int _l_j0 = 0;
// Canonicalized from: for(int i0 = N, j0 = 0;i0 >= 0;i0--) {...}
// Standardize from: for(_l_i0_0 = N;_l_i0_0 >= 0;--_l_i0_0) {...}
  for (_l_i0_0 = 0; _l_i0_0 <= 10; _l_i0_0++) {
    int _in_l_i0_0 = 10 + -1 * _l_i0_0;
    int _l_i1_0 = 10;
    int _l_j1 = 1;
// Canonicalized from: for(int i1 = N, j1 = 1;i1 >= 0;i1--) {...}
// Standardize from: for(_l_i1_0 = N;_l_i1_0 >= 0;--_l_i1_0) {...}
    for (_l_i1_0 = 0; _l_i1_0 <= 10; _l_i1_0++) {
      int _in_l_i1_0 = 10 + -1 * _l_i1_0;
      int _l_i2_0 = 10;
      int _l_j2 = 2;
// Canonicalized from: for(int i2 = N, j2 = 2;i2 >= 0;i2--) {...}
// Standardize from: for(_l_i2_0 = N;_l_i2_0 >= 0;--_l_i2_0) {...}
      for (_l_i2_0 = 0; _l_i2_0 <= 10; _l_i2_0++) {
        int _in_l_i2_0 = 10 + -1 * _l_i2_0;
        int _l_i3_0 = 10;
        int _l_j3 = 3;
// Canonicalized from: for(int i3 = N, j3 = 3;i3 >= 0;i3--) {...}
// Standardize from: for(_l_i3_0 = N;_l_i3_0 >= 0;--_l_i3_0) {...}
        for (_l_i3_0 = 0; _l_i3_0 <= 10; _l_i3_0++) {
          int _in_l_i3_0 = 10 + -1 * _l_i3_0;
          int _l_i4_0 = 10;
          int _l_j4 = 4;
// Canonicalized from: for(int i4 = N, j4 = 4;i4 >= 0;i4--) {...}
// Standardize from: for(_l_i4_0 = N;_l_i4_0 >= 0;--_l_i4_0) {...}
          for (_l_i4_0 = 0; _l_i4_0 <= 10; _l_i4_0++) {
            int _in_l_i4_0 = 10 + -1 * _l_i4_0;
/* block 2.2*/
            c[_l_j0 + _in_l_i0_0 + _in_l_i1_0 + _in_l_i2_0 + _in_l_i3_0 + _in_l_i4_0] = a[_l_j3 + _in_l_i0_0 + _in_l_i1_0 + _in_l_i2_0 + _in_l_i3_0 + _in_l_i4_0] + b[_in_l_i0_0 + _in_l_i1_0 + _in_l_i2_0 + _in_l_i3_0 + _in_l_i4_0];
            printf("index = %d\n",_l_j0 + _in_l_i0_0 + _in_l_i1_0 + _in_l_i2_0 + _in_l_i3_0 + _in_l_i4_0);
          }
          _l_i4_0 = 0 + -1;
        }
        _l_i3_0 = 0 + -1;
      }
      _l_i2_0 = 0 + -1;
    }
    _l_i1_0 = 0 + -1;
  }
  _l_i0_0 = 0 + -1;
// Standardize from: for(i = N;i >= 0;i--) {...}
  for (i = 0; i <= 10; i++) {
    int _in_i = 10 + -1 * i;
    j = _in_i;
// Canonicalized from: for(;j < 10;j++) {...}
    for (j = _in_i; j <= 9; ++j) {
/* block 3*/
      c[_in_i] = a[j] + b[j];
      printf("index = %d\n",_in_i);
    }
  }
  i = 0 + -1;
// Standardize from: for(i = N;i >= 0;i--) {...}
  for (i = 0; i <= 10; i++) {
    int _in_i_0 = 10 + -1 * i;
    for (j = _in_i_0; j < 100; j += 2) 
      if (j < 10) {
        for (k = 3; k < 10; k++) {
/* block 4*/
          c[_in_i_0] = a[k] + b[j];
          printf("index = %d\n",_in_i_0);
        }
      }
  }
  i = 0 + -1;
  for (i = N; i >= 0; i--) {
    for (j = i0; j < 100; j += 2) 
      if (j < 10) {
        for (k = 3; k < 10; k++) {
/* block 5*/
          c[i] = a[k] + b[j];
          printf("index = %d\n",i);
        }
      }
    break; 
  }
// Standardize from: for(i = N;i >= 0;i--) {...}
  for (i = 0; i <= 10; i++) {
    int _in_i_1 = 10 + -1 * i;
    k = 3;
// Canonicalized from: for((j = i , k = 3);j < 100;j += 2) if(j < 10) {...}
    for (j = _in_i_1; j <= 99; j += 2) {
      if (j < 10) {
        for (; k < 10; k++) {
/* block 6*/
          c[_in_i_1] = a[k] + b[j];
          printf("index = %d\n",_in_i_1);
        }
      }
    }
  }
  i = 0 + -1;
  for (int pp = 0; pp < 100; pp++) 
    printf("result = %d\n",c[pp]);
}

int main()
{
  func_loop();
  return 0;
}
