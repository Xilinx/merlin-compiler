// Testing different loop initial
#pragma ACCEL kernel

void func_loop()
{
  int a[10];
  int b[10];
  int c[10];
  int i = 0;
  int j = 0;
  int k = 0;
  int x;
  int y;
  int z;
  int N = 100;
  j = 3;
// Canonicalized from: for((i = a[i] , j = 3);i < N;i++) {...}
  for (i = a[i]; i <= 99; ++i) {
/* block 1*/
    c[i] = a[i] + b[j];
  }
  int TC = N / 10;
  for (i = a[0]; i >= 0; i--) {
    
#pragma HLS loop_tripcount max=TC
/* block 2*/
    c[i] = a[i] + b[i];
  }
  for (i = a[1]; i >= 0; i--) {
    
#pragma HLS loop_tripcount max=11
/* block 2.1*/
    c[i] = a[i] + b[i];
  }
  j = 3;
// Canonicalized from: for((i = N * 3 , j = 3);i >= 0;i--) {...}
// Standardize from: for(i = N * 3;i >= 0;--i) {...}
  for (i = 0; i <= 300; i++) {
    int _in_i = 300 + -1 * i;
/* block 3*/
    c[_in_i] = a[_in_i] + b[_in_i];
  }
  i = 0 + -1;
  for ((i = N * x , j = 3); i >= 0; i++) {
/* block 4*/
    c[i] = a[i] + b[i];
  }
// Standardize from: for(i = N;i >= 0;i--) {...}
  for (i = 0; i <= 100; i++) {
    int _in_i_0 = 100 + -1 * i;
    k = 3;
// Canonicalized from: for((j = i , k = 3);j < 10;j++) {...}
    for (j = _in_i_0; j <= 9; ++j) {
/* block 5*/
      c[_in_i_0] = a[k] + b[j];
    }
  }
  i = 0 + -1;
// Standardize from: for(i = N;i >= 0;i--) {...}
  for (i = 0; i <= 100; i++) {
    int _in_i_1 = 100 + -1 * i;
    for (j = _in_i_1; j < - 1; j += 1) {
/* block 6*/
      c[_in_i_1] = a[k] + b[j];
    }
  }
  i = 0 + -1;
  for (i = N; i >= 0; i--) {
    for (j = i; j < - 1; j += 1) {
/* block 6.1*/
      c[i] = a[k] + b[j];
    }
    i--;
  }
  for (i = N; i >= 0; i--) {
    for (j = i; j < - 1; j += 1) {
/* block 6.2*/
      c[i] = a[k] + b[j];
    }
    i = 2 * i;
  }
  for (i != 0; i < N; i++) {
/* block 7*/
    c[i] = a[i] + b[i];
  }
  for (i = i / 2; i < N; i++) {
/* block 8*/
    c[i] = a[i] + b[i];
  }
  for (i << 2; i < N; i--) {
/* block 9*/
    c[i] = a[i] + b[i];
  }
  for (i = - 32767; i > N; i--) {
    c[i] = a[i] + b[i];
  }
}

int main()
{
  int aa[100][100];
  int bb[100][100];
  int cc[100][100];
  int *a;
  int *b;
  int *c;
  int a_s;
  int b_s;
  int c_s;
  int d_s;
  float aa_f[100][100];
  float bb_f[100][100];
  float cc_f[100][100];
  float *a_f;
  float *b_f;
  float *c_f;
  float a_s_f;
  float b_s_f;
  float c_s_f;
  float d_s_f;
  func_loop();
  return 0;
}
