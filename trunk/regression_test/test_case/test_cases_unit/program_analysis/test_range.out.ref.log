Hello Program Analysis ... 
**** Test Loop Canonicalization **** 

====== Loop Canonicalize ====> 
[isCanonical] for(j = - 50;j < 1;j++) {...}

====== Loop Canonicalize ====> 

[Canonicalize] for((i = 0 , j = 23);i <= N;i++) {...}
  -- Rewrite the for loop into canonical form
[canonicalize] Move and rename multiple init declaration.

====== Loop Canonicalize ====> 
[isCanonical] for(j = 100;j <= 200;j++) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(i = 100;i <= 200;i++) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(i = a[0];i < a[1];i++) {...}

====== Loop Canonicalize ====> 

====== Loop Canonicalize ====> 
[isCanonical] for(int i = 0;i < 50;++i) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(int j = 0;j < 100;++j) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(int i = 0;i < 100;++i) {...}
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 

**** Test Expression Range ****
[Exp SgVarRefExp:i] {i:SgForStatement i->1,0} : 0..100, constant bound: {i:SgForStatement i->1,0} : 0..100
[Exp SgAddOp:i + j] {i + j:SgForStatement i->1,SgForStatement j->1,0} : -50..100, constant bound: {i + j:SgForStatement i->1,SgForStatement j->1,0} : -50..100
[Exp SgMultiplyOp:i * j] {i * j:SgMultiplyOp i * j->1,0} : i * j..i * j, constant bound: {i * j:SgMultiplyOp i * j->1,0} : neg_inf..pos_inf
[Exp SgSubtractOp:2 * i - 2 * j] {i * 2 + j * -2:SgForStatement i->2,SgForStatement j->-2,0} : 0..300, constant bound: {i * 2 + j * -2:SgForStatement i->2,SgForStatement j->-2,0} : 0..300
[Exp SgAddOp:-i + j] {-i + j:SgForStatement i->-1,SgForStatement j->1,0} : -150..0, constant bound: {-i + j:SgForStatement i->-1,SgForStatement j->1,0} : -150..0
[Exp SgPointerDerefExp:*(p++)] {*(p++):SgPointerDerefExp *(p++)->1,0} : *(p++)..*(p++), constant bound: {*(p++):SgPointerDerefExp *(p++)->1,0} : neg_inf..pos_inf
[Exp SgIntVal:0] 0, constant bound: 0
[Exp SgIntVal:0] 0, constant bound: 0
[Exp SgVarRefExp:i] {i:SgForStatement i->1,0} : 100..200, constant bound: {i:SgForStatement i->1,0} : 100..200
[Exp SgAddOp:i + j] {i + j:SgForStatement i->1,SgForStatement j->1,0} : 200..400, constant bound: {i + j:SgForStatement i->1,SgForStatement j->1,0} : 200..400
[Exp SgMultiplyOp:i * j] {i * j:SgMultiplyOp i * j->1,0} : i * j..i * j, constant bound: {i * j:SgMultiplyOp i * j->1,0} : neg_inf..pos_inf
[Exp SgSubtractOp:2 * i - 2 * j] {i * 2 + j * -2:SgForStatement i->2,SgForStatement j->-2,0} : -200..200, constant bound: {i * 2 + j * -2:SgForStatement i->2,SgForStatement j->-2,0} : -200..200
[Exp SgAddOp:-i + j] {-i + j:SgForStatement i->-1,SgForStatement j->1,0} : -100..100, constant bound: {-i + j:SgForStatement i->-1,SgForStatement j->1,0} : -100..100
[Exp SgDivideOp:j / 3] {j / 3:SgDivideOp j / 3->1,0} : 33..66, constant bound: {j / 3:SgDivideOp j / 3->1,0} : 33..66
[Exp SgAddOp:i + 1] {1 + i:SgForStatement i->1,1} : 1L + a[0]..a[1], constant bound: {1 + i:SgForStatement i->1,1} : neg_inf..pos_inf
[Exp SgPlusAssignOp:x += a[i]] {x += a[i]:SgPlusAssignOp x += a[i]->1,0} : x += a[i]..x += a[i], constant bound: {x += a[i]:SgPlusAssignOp x += a[i]->1,0} : neg_inf..pos_inf
[Exp SgLessThanOp:i + j < 100] {i + j < 100:SgLessThanOp i + j < 100->1,0} : i + j < 100..i + j < 100, constant bound: {i + j < 100:SgLessThanOp i + j < 100->1,0} : neg_inf..pos_inf

**** Test Scope Range ****

Scopes: 
  SgFunctionDeclaration void func(int M) {...}
  SgFunctionDeclaration void f() {...}
  SgFunctionDeclaration void f2() {...}
  SgFunctionDeclaration void f3() {...}
  SgBasicBlock {for(j = - 50;j < 1;j++) {a[i] = i;i;i + j;i * j;2 * i - 2 * j;-i + j;*(p++);*(p2--) = 0;}}
  SgForStatement for(i = 0;i <= 100;++i) {...}
  SgBasicBlock {a[i] = i;i;i + j;i * j;2 * i - 2 * j;-i + j;*(p++);*(p2--) = 0;}
  SgForStatement for(j = - 50;j < 1;j++) {...}
  SgBasicBlock {for(j = 100;j <= 200;j++) {a[i] = i;i;i + j;i * j;2 * i - 2 * j;-i + j;j / 3;}}
  SgForStatement for(i = 100;i <= 200;i++) {...}
  SgBasicBlock {a[i] = i;i;i + j;i * j;2 * i - 2 * j;-i + j;j / 3;}
  SgForStatement for(j = 100;j <= 200;j++) {...}
  SgBasicBlock {i + 1;}
  SgForStatement for(i = a[0];i < a[1];i++) {...}
  SgBasicBlock {A:x += a[i];}
  SgForStatement for(i = 0;i < 100;++i) {...}
  SgBasicBlock {a[i] = a[i + 50];}
  SgForStatement for(int i = 0;i < 50;++i) {...}
  SgBasicBlock {for(int j = 0;j < 100;++j) {if(i + j < 100) {a[i + j] = i * j;}}}
  SgForStatement for(int i = 0;i < 100;++i) {...}
  SgBasicBlock {if(i + j < 100) {a[i + j] = i * j;}}
  SgForStatement for(int j = 0;j < 100;++j) {...}

Arrays: 
  int [100] a
  int [100] b
  int * p
  int * p2
  int [1000] a
  int [100] a
  int [100] a

Ranges: 
  SgFunctionDeclaration void func(int M) {...}
    int [100] a :  R[0..1 exact] W[0..200 exact]
    intersect: 0..1 exact
    union: 0..200 exact
    int [100] b :  R[0..99 inexact] W[0..99 inexact]
    intersect: 0..99 inexact
    union: 0..99 inexact
    int * p :  R[na..na inexact]
    int * p2 :  W[na..na inexact]
  SgFunctionDeclaration void f() {...}
    int [1000] a :  R[0..999 inexact]
  SgFunctionDeclaration void f2() {...}
    int [100] a :  R[50..99 exact] W[0..49 exact]
    intersect: empty
    union: 0..99 exact
  SgFunctionDeclaration void f3() {...}
    int [100] a :  W[0..99 inexact]
  SgBasicBlock {for(j = - 50;j < 1;j++) {a[i] = i;i;i + j;i * j;2 * i - 2 * j;-i + j;*(p++);*(p2--) = 0;}}
    int [100] a :  W[i..i exact]
    int * p :  R[na..na inexact]
    int * p2 :  W[na..na inexact]
  SgForStatement for(i = 0;i <= 100;++i) {...}
    int [100] a :  W[0..100 exact]
    int * p :  R[na..na inexact]
    int * p2 :  W[na..na inexact]
  SgBasicBlock {a[i] = i;i;i + j;i * j;2 * i - 2 * j;-i + j;*(p++);*(p2--) = 0;}
    int [100] a :  W[i..i exact]
    int * p :  R[na..na inexact]
    int * p2 :  W[na..na inexact]
  SgForStatement for(j = - 50;j < 1;j++) {...}
    int [100] a :  W[i..i exact]
    int * p :  R[na..na inexact]
    int * p2 :  W[na..na inexact]
  SgBasicBlock {for(j = 100;j <= 200;j++) {a[i] = i;i;i + j;i * j;2 * i - 2 * j;-i + j;j / 3;}}
    int [100] a :  W[i..i exact]
  SgForStatement for(i = 100;i <= 200;i++) {...}
    int [100] a :  W[100..200 exact]
  SgBasicBlock {a[i] = i;i;i + j;i * j;2 * i - 2 * j;-i + j;j / 3;}
    int [100] a :  W[i..i exact]
  SgForStatement for(j = 100;j <= 200;j++) {...}
    int [100] a :  W[i..i exact]
  SgBasicBlock {i + 1;}
  SgForStatement for(i = a[0];i < a[1];i++) {...}
    int [100] a :  R[0..1 exact]
  SgBasicBlock {A:x += a[i];}
    int [1000] a :  R[i..i exact]
  SgForStatement for(i = 0;i < 100;++i) {...}
    int [1000] a :  R[0..999 inexact]
  SgBasicBlock {a[i] = a[i + 50];}
    int [100] a :  R[50 + i..50 + i exact] W[i..i exact]
    intersect: empty
    union: i..50 + i inexact
  SgForStatement for(int i = 0;i < 50;++i) {...}
    int [100] a :  R[50..99 exact] W[0..49 exact]
    intersect: empty
    union: 0..99 exact
  SgBasicBlock {for(int j = 0;j < 100;++j) {if(i + j < 100) {a[i + j] = i * j;}}}
    int [100] a :  W[i..99 inexact]
  SgForStatement for(int i = 0;i < 100;++i) {...}
    int [100] a :  W[0..99 inexact]
  SgBasicBlock {if(i + j < 100) {a[i + j] = i * j;}}
    int [100] a :  W[i + j..max(i + j,99) inexact]
  SgForStatement for(int j = 0;j < 100;++j) {...}
    int [100] a :  W[i..99 inexact]

