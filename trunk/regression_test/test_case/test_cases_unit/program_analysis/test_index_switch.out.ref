#include <string.h>

int main(int *argv,int n)
{
  double a[1024][1024][1024];
  int i;
  int j;
  int k;
  int l;
  int m;
  m = argv[1];
{
    a;
  }
  for (j = 0; j < 1024; j++) 
    for (i = 0; i < 1024; i++) 
      for (k = 0; k < 1024; k++) {
        double _a_r0;
        double _a_r1;
        double _a_r2;
        double _a_r3;
        double _a_r4;
        double _a_r5;
        m + n;
{
          int _a_addr0 = (argv[1] + i) / 4;
          int _a_bank0 = (argv[1] + i) % 4;
          int _a_addr2 = (j + n) / 2;
          int _a_bank2 = (j + n) % 2;
          if (_a_bank0 == 0 && _a_bank2 == 0) {
            _a_r0 = a[_a_addr0 * 4 + 0][k][_a_addr2 * 2 + 0];
            _a_r1 = a[_a_addr0 * 4 + 1][l][_a_addr2 * 2 + 0];
            _a_r2 = a[_a_addr0 * 4 + 6][argv[1]][_a_addr2 * 2 + 0];
            _a_r3 = a[_a_addr0 * 4 + 0][k][_a_addr2 * 2 + 1];
            _a_r4 = a[_a_addr0 * 4 + 1][l][_a_addr2 * 2 + 1];
            _a_r5 = a[_a_addr0 * 4 + 6][n][_a_addr2 * 2 + 1];
          }
           else if (_a_bank0 == 0 && _a_bank2 == 1) {
            _a_r0 = a[_a_addr0 * 4 + 0][k][_a_addr2 * 2 + 1];
            _a_r1 = a[_a_addr0 * 4 + 1][l][_a_addr2 * 2 + 1];
            _a_r2 = a[_a_addr0 * 4 + 6][argv[1]][_a_addr2 * 2 + 1];
            _a_r3 = a[_a_addr0 * 4 + 0][k][_a_addr2 * 2 + 2];
            _a_r4 = a[_a_addr0 * 4 + 1][l][_a_addr2 * 2 + 2];
            _a_r5 = a[_a_addr0 * 4 + 6][n][_a_addr2 * 2 + 2];
          }
           else if (_a_bank0 == 1 && _a_bank2 == 0) {
            _a_r0 = a[_a_addr0 * 4 + 1][k][_a_addr2 * 2 + 0];
            _a_r1 = a[_a_addr0 * 4 + 2][l][_a_addr2 * 2 + 0];
            _a_r2 = a[_a_addr0 * 4 + 7][argv[1]][_a_addr2 * 2 + 0];
            _a_r3 = a[_a_addr0 * 4 + 1][k][_a_addr2 * 2 + 1];
            _a_r4 = a[_a_addr0 * 4 + 2][l][_a_addr2 * 2 + 1];
            _a_r5 = a[_a_addr0 * 4 + 7][n][_a_addr2 * 2 + 1];
          }
           else if (_a_bank0 == 1 && _a_bank2 == 1) {
            _a_r0 = a[_a_addr0 * 4 + 1][k][_a_addr2 * 2 + 1];
            _a_r1 = a[_a_addr0 * 4 + 2][l][_a_addr2 * 2 + 1];
            _a_r2 = a[_a_addr0 * 4 + 7][argv[1]][_a_addr2 * 2 + 1];
            _a_r3 = a[_a_addr0 * 4 + 1][k][_a_addr2 * 2 + 2];
            _a_r4 = a[_a_addr0 * 4 + 2][l][_a_addr2 * 2 + 2];
            _a_r5 = a[_a_addr0 * 4 + 7][n][_a_addr2 * 2 + 2];
          }
           else if (_a_bank0 == 2 && _a_bank2 == 0) {
            _a_r0 = a[_a_addr0 * 4 + 2][k][_a_addr2 * 2 + 0];
            _a_r1 = a[_a_addr0 * 4 + 3][l][_a_addr2 * 2 + 0];
            _a_r2 = a[_a_addr0 * 4 + 8][argv[1]][_a_addr2 * 2 + 0];
            _a_r3 = a[_a_addr0 * 4 + 2][k][_a_addr2 * 2 + 1];
            _a_r4 = a[_a_addr0 * 4 + 3][l][_a_addr2 * 2 + 1];
            _a_r5 = a[_a_addr0 * 4 + 8][n][_a_addr2 * 2 + 1];
          }
           else if (_a_bank0 == 2 && _a_bank2 == 1) {
            _a_r0 = a[_a_addr0 * 4 + 2][k][_a_addr2 * 2 + 1];
            _a_r1 = a[_a_addr0 * 4 + 3][l][_a_addr2 * 2 + 1];
            _a_r2 = a[_a_addr0 * 4 + 8][argv[1]][_a_addr2 * 2 + 1];
            _a_r3 = a[_a_addr0 * 4 + 2][k][_a_addr2 * 2 + 2];
            _a_r4 = a[_a_addr0 * 4 + 3][l][_a_addr2 * 2 + 2];
            _a_r5 = a[_a_addr0 * 4 + 8][n][_a_addr2 * 2 + 2];
          }
           else if (_a_bank0 == 3 && _a_bank2 == 0) {
            _a_r0 = a[_a_addr0 * 4 + 3][k][_a_addr2 * 2 + 0];
            _a_r1 = a[_a_addr0 * 4 + 4][l][_a_addr2 * 2 + 0];
            _a_r2 = a[_a_addr0 * 4 + 9][argv[1]][_a_addr2 * 2 + 0];
            _a_r3 = a[_a_addr0 * 4 + 3][k][_a_addr2 * 2 + 1];
            _a_r4 = a[_a_addr0 * 4 + 4][l][_a_addr2 * 2 + 1];
            _a_r5 = a[_a_addr0 * 4 + 9][n][_a_addr2 * 2 + 1];
          }
           else {
            _a_r0 = a[_a_addr0 * 4 + 3][k][_a_addr2 * 2 + 1];
            _a_r1 = a[_a_addr0 * 4 + 4][l][_a_addr2 * 2 + 1];
            _a_r2 = a[_a_addr0 * 4 + 9][argv[1]][_a_addr2 * 2 + 1];
            _a_r3 = a[_a_addr0 * 4 + 3][k][_a_addr2 * 2 + 2];
            _a_r4 = a[_a_addr0 * 4 + 4][l][_a_addr2 * 2 + 2];
            _a_r5 = a[_a_addr0 * 4 + 9][n][_a_addr2 * 2 + 2];
          }
        }
        _a_r0;
        _a_r1;
        _a_r2;
        _a_r3;
        _a_r4;
        _a_r5;
      }
  return 1;
}
