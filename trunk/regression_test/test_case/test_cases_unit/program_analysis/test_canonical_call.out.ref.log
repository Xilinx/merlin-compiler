Hello Program Analysis ... 
**** Test Loop Canonicalization **** 

====== Loop Canonicalize ====> 
[isCanonical] for(int i1 = 0;i1 < 10;i1++) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(int i2 = 0;i2 < 10;i2++) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(int i3 = 0;i3 < 10;i3++) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(int i4 = 0;i4 < 10;i4++) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(int i5 = 0;i5 < 10;i5++) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(int i6 = 0;i6 < 10;i6++) {...}

====== Loop Canonicalize ====> 

[Canonicalize] for(int i7 = 0;i7 < 10;i7++) {...}
Cannot be canonicalized: iterator variable is updated in loop body
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 
====== Loop Standardize ====> 

**** Test Expression Range ****
[Exp SgFunctionCallExp:printf("value: %d",idx)] Warning: TransformationSupport::getFile(str_val) == NULL 
Warning: TransformationSupport::getFile(str_val) == NULL 
Warning: TransformationSupport::getFile(str_val) == NULL 
{printf("value: %d",idx):SgFunctionCallExp printf("value: %d",idx)->1,0} : printf("value: %d",idx)..printf("value: %d",idx), constant bound: Warning: TransformationSupport::getFile(str_val) == NULL 
{printf("value: %d",idx):SgFunctionCallExp printf("value: %d",idx)->1,0} : neg_inf..pos_inf
[Exp SgFunctionCallExp:printf("value: %d, %d",a[0],idx)] Warning: TransformationSupport::getFile(str_val) == NULL 
Warning: TransformationSupport::getFile(str_val) == NULL 
Warning: TransformationSupport::getFile(str_val) == NULL 
{printf("value: %d, %d",a[0],idx):SgFunctionCallExp printf("value: %d, %d",a[0],idx)->1,0} : printf("value: %d, %d",a[0],idx)..printf("value: %d, %d",a[0],idx), constant bound: Warning: TransformationSupport::getFile(str_val) == NULL 
{printf("value: %d, %d",a[0],idx):SgFunctionCallExp printf("value: %d, %d",a[0],idx)->1,0} : neg_inf..pos_inf
[Exp SgFunctionCallExp:printf("value: %d, %d",a[idx],++idx)] Warning: TransformationSupport::getFile(str_val) == NULL 
Warning: TransformationSupport::getFile(str_val) == NULL 
Warning: TransformationSupport::getFile(str_val) == NULL 
{printf("value: %d, %d",a[idx],++idx):SgFunctionCallExp printf("value: %d, %d",a[idx],++idx)->1,0} : printf("value: %d, %d",a[idx],++idx)..printf("value: %d, %d",a[idx],++idx), constant bound: Warning: TransformationSupport::getFile(str_val) == NULL 
{printf("value: %d, %d",a[idx],++idx):SgFunctionCallExp printf("value: %d, %d",a[idx],++idx)->1,0} : neg_inf..pos_inf
[Exp SgFunctionCallExp:printf("value: %d, %d",a[idx],++idx)] Warning: TransformationSupport::getFile(str_val) == NULL 
Warning: TransformationSupport::getFile(str_val) == NULL 
Warning: TransformationSupport::getFile(str_val) == NULL 
{printf("value: %d, %d",a[idx],++idx):SgFunctionCallExp printf("value: %d, %d",a[idx],++idx)->1,0} : printf("value: %d, %d",a[idx],++idx)..printf("value: %d, %d",a[idx],++idx), constant bound: Warning: TransformationSupport::getFile(str_val) == NULL 
{printf("value: %d, %d",a[idx],++idx):SgFunctionCallExp printf("value: %d, %d",a[idx],++idx)->1,0} : neg_inf..pos_inf

**** Test Scope Range ****

Scopes: 
  SgFunctionDeclaration void test_1(int idx,int [10] a) {...}
  SgFunctionDeclaration void test_2(int & idx,int [10] a) {...}
  SgFunctionDeclaration void test_3(int * idx,int [10] a) {...}
  SgFunctionDeclaration void test_4(int idx,int [10] a) {...}
  SgFunctionDeclaration void test_5(int idx,int [10] a) {...}
  SgFunctionDeclaration void test_6(int idx,int [10] a) {...}
  SgFunctionDeclaration void test_7(int & idx,int [10] a) {...}
  SgFunctionDeclaration void func_loop() {...}
  SgBasicBlock {test_1(i1,a);}
  SgForStatement for(int i1 = 0;i1 < 10;i1++) {...}
  SgBasicBlock {test_2(i2,a);}
  SgForStatement for(int i2 = 0;i2 < 10;i2++) {...}
  SgBasicBlock {test_3(&i3,a);}
  SgForStatement for(int i3 = 0;i3 < 10;i3++) {...}
  SgBasicBlock {test_4(i4,a);}
  SgForStatement for(int i4 = 0;i4 < 10;i4++) {...}
  SgBasicBlock {test_5(i5,a);}
  SgForStatement for(int i5 = 0;i5 < 10;i5++) {...}
  SgBasicBlock {test_6(i6,a);}
  SgForStatement for(int i6 = 0;i6 < 10;i6++) {...}
  SgBasicBlock {test_7(i7,a);}
  SgForStatement for(int i7 = 0;i7 < 10;i7++) {...}

Arrays: 
  int [10] a
  int [10] a
  int * idx
  int [10] a
  int [10] a
  int [10] a
  int [10] a
  int [10] a
  int [10] a
  int [10] b
  int [10] c

Ranges: 
  SgFunctionDeclaration void test_1(int idx,int [10] a) {...}
    int [10] a :  W[idx..idx exact]
  SgFunctionDeclaration void test_2(int & idx,int [10] a) {...}
    int [10] a :  W[idx..idx exact]
  SgFunctionDeclaration void test_3(int * idx,int [10] a) {...}
    int * idx :  R[0..0 exact]
    int [10] a :  W[*idx..*idx exact]
  SgFunctionDeclaration void test_4(int idx,int [10] a) {...}
  SgFunctionDeclaration void test_5(int idx,int [10] a) {...}
    int [10] a :  R[0..0 exact]
  SgFunctionDeclaration void test_6(int idx,int [10] a) {...}
    int [10] a :  R[idx..idx exact]
  SgFunctionDeclaration void test_7(int & idx,int [10] a) {...}
    int [10] a :  R[idx..idx exact]
  SgFunctionDeclaration void func_loop() {...}
    int [10] a :  R[0..9 inexact] W[0..9 inexact]
    intersect: 0..9 inexact
    union: 0..9 inexact
  SgBasicBlock {test_1(i1,a);}
    int [10] a :  W[i1..i1 exact]
  SgForStatement for(int i1 = 0;i1 < 10;i1++) {...}
    int [10] a :  W[0..9 exact]
  SgBasicBlock {test_2(i2,a);}
    int [10] a :  W[0..9 inexact]
  SgForStatement for(int i2 = 0;i2 < 10;i2++) {...}
    int [10] a :  W[0..9 exact]
  SgBasicBlock {test_3(&i3,a);}
    int [10] a :  W[0..9 inexact]
  SgForStatement for(int i3 = 0;i3 < 10;i3++) {...}
    int [10] a :  W[0..9 inexact]
  SgBasicBlock {test_4(i4,a);}
  SgForStatement for(int i4 = 0;i4 < 10;i4++) {...}
  SgBasicBlock {test_5(i5,a);}
    int [10] a :  R[0..0 exact]
  SgForStatement for(int i5 = 0;i5 < 10;i5++) {...}
    int [10] a :  R[0..0 exact]
  SgBasicBlock {test_6(i6,a);}
    int [10] a :  R[i6..i6 exact]
  SgForStatement for(int i6 = 0;i6 < 10;i6++) {...}
    int [10] a :  R[0..9 exact]
  SgBasicBlock {test_7(i7,a);}
    int [10] a :  R[0..9 inexact]
  SgForStatement for(int i7 = 0;i7 < 10;i7++) {...}
    int [10] a :  R[0..9 inexact]

