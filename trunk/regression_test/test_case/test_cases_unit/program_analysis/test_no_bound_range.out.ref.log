Hello Program Analysis ... 
**** Test Loop Canonicalization **** 

====== Loop Canonicalize ====> 
[isCanonical] for(i = 0;i < 1000;++i) {...}

====== Loop Canonicalize ====> 
[isCanonical] for(t = 0;t < 4 *((25 - 6 + 1) / 4 +(25 - 6 + 1) % 4) / 4;t++) {...}
====== Loop Standardize ====> 
====== Loop Standardize ====> 

**** Test Expression Range ****
[Exp SgLessThanOp:i < 100] {i < 100:SgLessThanOp i < 100->1,0} : i < 100..i < 100, constant bound: {i < 100:SgLessThanOp i < 100->1,0} : neg_inf..pos_inf
[Exp SgPlusPlusOp:i++] {i++:SgPlusPlusOp i++->1,0} : i++..i++, constant bound: {i++:SgPlusPlusOp i++->1,0} : neg_inf..pos_inf
[Exp SgLessThanOp:i * i < 100] {i * i < 100:SgLessThanOp i * i < 100->1,0} : i * i < 100..i * i < 100, constant bound: {i * i < 100:SgLessThanOp i * i < 100->1,0} : neg_inf..pos_inf

**** Test Scope Range ****

Scopes: 
  SgFunctionDeclaration void top(int * a,int * b) {...}
  SgBasicBlock {if(i * i < 100) {a[i] = b[i];}}
  SgForStatement for(i = 0;i < 1000;++i) {...}
  SgBasicBlock {a[t] = b[t];}
  SgForStatement for(t = 0;t < 4 *((25 - 6 + 1) / 4 +(25 - 6 + 1) % 4) / 4;t++) {...}

Arrays: 
  int * a
  int * b

Ranges: 
  SgFunctionDeclaration void top(int * a,int * b) {...}
    int * a :  W[0..100 inexact]
    int * b :  R[0..2000 inexact]
  SgBasicBlock {if(i * i < 100) {a[i] = b[i];}}
    int * a :  W[i..max(i,100) inexact]
    int * b :  R[i..i inexact]
  SgForStatement for(i = 0;i < 1000;++i) {...}
    int * a :  W[0..100 inexact]
    int * b :  R[0..999 inexact]
  SgBasicBlock {a[t] = b[t];}
    int * a :  W[t..t exact]
    int * b :  R[t..t exact]
  SgForStatement for(t = 0;t < 4 *((25 - 6 + 1) / 4 +(25 - 6 + 1) % 4) / 4;t++) {...}
    int * a :  W[0..4 exact]
    int * b :  R[0..4 exact]

