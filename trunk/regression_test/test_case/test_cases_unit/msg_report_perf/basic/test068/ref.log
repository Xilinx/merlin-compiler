cmd = mars_opt __merlinkernel_test.cpp  -e c -p performance_estimation  -I\/curr\/hanhu\/unit_test\/test_case\/test0  -I\/curr\/hanhu\/unit_test\/test_case\/test0\/src\/  -I\/curr\/hanhu\/WORK\/Merlin_Compiler\/trunk\/build\/..\/\/mars-gen\/lib\/merlin -a STATIC -a kernel_list.json -a gen_token.json -a config.json -a step1.json -a aocl

====== Typedef replace ========>
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
[INFO] Beginning static performance estimation



[INFO] ========================================================
[INFO] 1. Create blocks..
[INFO] ========================================================
[INFO] Reading annotated report : gen_token.json
[INFO] Reading annotated report : gen_token.json
[EST ALGO][MakeNewBlocks, 659] Create TOP TASK.
[EST ALGO][MakeNewBlocks, 648] Create top kernel: F_0_0_0_4
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 402] Create a kernel block: SgFunctionDeclaration:void test(char * a,int * b,lon...
[EST ALGO][MakeNewBlocks, 655] Create sub kernel: F_0_0_0_4
[EST ALGO][MakeNewBlocks, 678] ExtPortList: 
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:a
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:b
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:c
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void test(char * a,int * b,lon...
Function body = {#pragma HLS INTERFACE m_axi port=a offset=slave depth=262144#pragma HLS INTERFACE m_axi port=b offset=slave depth=262144#pragma HLS INTERFACE m_axi port=c offset=slave depth=262144#pragma HLS INTERFACE s_axilite port=a bundle=control#pragma HLS INTERFACE s_axilite port=b bundle=control#pragma HLS INTERFACE s_axilite port=c bundle=control#pragma HLS INTERFACE s_axilite port=return bundle=control#pragma ACCEL interface variable=a max_depth=262144 depth=262144#pragma ACCEL interface variable=b max_depth=262144 depth=262144#pragma ACCEL interface variable=c max_depth=262144 depth=262144for(int k = 0;k < 32;k++) {#pragma HLS loop_flatten offfunc(a,b,c,k);}return ;}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int k = 0;k < 32;k++) {......
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int k = 0;k < 32;k++) {......
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 469] Create a function call block: SgExprStatement:func(a,b,c,k);
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void func(char * a,int * b,lon...
[EST ALGO][MakeNewBlocks, 653] Create func decl: F_0_0_0_1
Insert one ext port : a
Insert one ext port : b
Insert one ext port : c
[EST ALGO][MakeNewBlocks, 678] ExtPortList: 
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:a
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:b
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:c
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void func(char * a,int * b,lon...
Function body = {for(int j = 0;j < 64;j++) {#pragma HLS loop_flatten offfor(int i = 0;i < 128;i++) {#pragma HLS pipelinec[k * 128 * 64 + j * 128 + i] =((long )(((int )a[k * 128 * 64 + j * 128 + i]) + b[k * 128 * 64 + j * 128 + i]));}}return ;}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j = 0;j < 64;j++) {......
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j = 0;j < 64;j++) {......
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int i = 0;i < 128;i++) {.....
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int i = 0;i < 128;i++) {.....
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
Find a external reference = c
[EST ALGO][AddChildBlock_AOCL, 533]Read data size = 0, r_ub = 0, r_lb = 0, for : c
[EST ALGO][AddChildBlock_AOCL, 538]Write data size = 128, w_ub = 127, w_lb = 0, for : c
[EST ALGO][AddChildBlock_AOCL, 565]One ref data size = 8192 for : c
[EST ALGO][AddChildBlock_AOCL, 568]One ref type size = 64 for : c
Find a external reference = a
[EST ALGO][AddChildBlock_AOCL, 533]Read data size = 128, r_ub = 127, r_lb = 0, for : a
[EST ALGO][AddChildBlock_AOCL, 538]Write data size = 0, w_ub = 0, w_lb = 0, for : a
[EST ALGO][AddChildBlock_AOCL, 565]One ref data size = 1024 for : a
[EST ALGO][AddChildBlock_AOCL, 568]One ref type size = 8 for : a
Find a external reference = b
[EST ALGO][AddChildBlock_AOCL, 533]Read data size = 128, r_ub = 127, r_lb = 0, for : b
[EST ALGO][AddChildBlock_AOCL, 538]Write data size = 0, w_ub = 0, w_lb = 0, for : b
[EST ALGO][AddChildBlock_AOCL, 565]One ref data size = 4096 for : b
[EST ALGO][AddChildBlock_AOCL, 568]One ref type size = 32 for : b
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.



[INFO] ========================================================
[INFO] 2. Reading annotated report : gen_token.json
[INFO] ========================================================
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 8, ID = F_0_0_0_4, void test(char * a,int * b,long * c) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 1
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 559200
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
Key:Value=state2:func
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_4_2_0_10, for(int k = 0;k < 32;k++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 1
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 2
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 559200
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 17473
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 32
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 17475
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 17475
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_4_2_0_10_3_1_0, func(a,b,c,k)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 1
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 17473
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = F_0_0_0_1, void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 1
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 17472
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_1_2_0_0, for(int j = 0;j < 64;j++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 1
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 3
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 17472
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 270
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 64
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 465]----Setting parent for(int k = 0;k < 32;k++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 273
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 273
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_1_2_0_0_3_1, for(int i = 0;i < 128;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 1
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 270
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 17
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 128
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 488]----Setting parent for(int j = 0;j < 64;j++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 2
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 17
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 17
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[INFO] ========================================================
[INFO] 3. Compute cycles.
[INFO] ========================================================
[INFO] Reading external memory parameter file: config.json
[WARNING] RBW_GBs not found.
[WARNING] WBW_GBs not found.
[WARNING] RLat_ns not found.
[WARNING] WLat_ns not found.
[WARNING] RandLat_ns not found.
RBW_GBs=10.300000
WBW_GBs=9.600000
RLat_ns=434.000000
WLat_ns=325.000000
RandLat_ns=62.000000
FPGACLK_GHz=0.250000
MAX_BITWIDTH=512.000000
LATENCY=240.000000
Find Top Block = F_0_0_0_4
**********************************************************
3.1 Update cycles by compute all data
**********************************************************
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1574] Start compute cycles for TASK. 
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1586] Start compute cycles for top kernel: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_4 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_4 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][ComputeStaticCycleHelper, 1606]RescheduleByADB void test(char * a,int * b,long * c) {...}
Vector size = 1
[EST ALGO][ReScheduleByADB, 1015] - schedule sequntial size: 1
[EST ALGO][ReScheduleByADB, 1017] - schedule parallel size: 1
block size = 1
Find one block for(int k = 0;k < 32;k++) {...} which not in StateVector
[EST ALGO][ReScheduleByADB, 1074] reschedule sequntial size: 2
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 0
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_4 - schedule sequntial size: 2
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_4 - schedule parallel size: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_4 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=1 ,k=0 ,Block=SgForStatement:for(int k = 0;k < 32;k++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_4_2_0_10 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_4_2_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionCallExp:func(a,b,c,k)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:func(a,b,c,k)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_1 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(int j = 0;j < 64;j++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_1_2_0_0 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_1_2_0_0 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(int i = 0;i < 128;i++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}
111 Final IL = 17, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=128, UnrollFactor=1, II=2, IL=1, LogicLatencyIteration=17, GlueLatencyIteration=0, CycleUnitStatic=255
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}, Cycles: 255, LogicLatency: 270, GlueLatency: 0, LogicLatencyIteration: 17, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}, Cycles: 255, LogicLatency: 270, GlueLatency: 0, LogicLatencyIteration: 17, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 255, LogicTemp: 270, GlueTemp: 0, TotalCycles: 255, LogicLatency: 270, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_1_2_0_0 - schedule spawn size: 0
111 Final IL = 255, vendor latency = 1
Final IL = 255, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=64, UnrollFactor=1, II=0, IL=255, LogicLatencyIteration=270, GlueLatencyIteration=3, CycleUnitStatic=16512
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j = 0;j < 64;j++) {...}, Cycles: 16512, LogicLatency: 17472, GlueLatency: 0, LogicLatencyIteration: 270, GlueLatencyIteration: 3
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j = 0;j < 64;j++) {...}, Cycles: 16512, LogicLatency: 17472, GlueLatency: 0, LogicLatencyIteration: 270, GlueLatencyIteration: 3
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 16512, LogicTemp: 17472, GlueTemp: 0, TotalCycles: 16512, LogicLatency: 17472, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_1 - schedule spawn size: 0
Logic latency = 17472, Unit cycles = 16512, AccCycles = 16512
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}, Cycles: 16512, LogicLatency: 17472, GlueLatency: 0
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:func(a,b,c,k), Cycles: 16512, LogicLatency: 16512, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 16512, LogicTemp: 16512, GlueTemp: 0, TotalCycles: 16512, LogicLatency: 16512, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_4_2_0_10 - schedule spawn size: 0
111 Final IL = 16512, vendor latency = 1
Final IL = 16512, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=32, UnrollFactor=1, II=0, IL=16512, LogicLatencyIteration=17473, GlueLatencyIteration=2, CycleUnitStatic=528448
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int k = 0;k < 32;k++) {...}, Cycles: 528448, LogicLatency: 559200, GlueLatency: 0, LogicLatencyIteration: 17473, GlueLatencyIteration: 2
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int k = 0;k < 32;k++) {...}, Cycles: 528448, LogicLatency: 559200, GlueLatency: 0, LogicLatencyIteration: 17473, GlueLatencyIteration: 2
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 528448, LogicTemp: 559200, GlueTemp: 0, TotalCycles: 528448, LogicLatency: 559200, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_4 - schedule spawn size: 0
Logic latency = 559200, Unit cycles = 528448, AccCycles = 528448
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}, Cycles: 528448, LogicLatency: 559200, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 528448, LogicTemp: 559200, GlueTemp: 0, TotalCycles: 528448, LogicLatency: 559200, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_4 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1599] Finish compute cycles for top kernel: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}, Cycles: 528448
[EST ALGO][ComputeStaticCycleHelper, 1579] Unit cycle of top kernel:528448
[EST ALGO][ComputeStaticCycleHelper, 1580] FIRST_CYCLES=528448
[EST ALGO][ComputeStaticCycles, 38] Print schedule for initial framework.

FuncDecl(0):void func(char * a,int * b,long * c,int k) {...} TopoID:F_0_0_0_1
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_1 Unit Cycles:16512 LogicLatency:17472 GlueLatency:0
  (0,0) for(int j = 0;;,j < 64;,j++) TopoID:L_0_0_0_1_2_0_0 II:0 IL:255 UF:1 Flat:0 TCStatic:64 Unit Cycles:16512 Total Cycles:0
            LogicLatency: 17472, GlueLatency: 0, LogicLatencyIteration: 270, GlueLatencyIteration: 3
  (0,0) for(int i = 0;;,i < 128;,i++) TopoID:L_0_0_0_1_2_0_0_3_1 II:2 IL:1 UF:1 Flat:0 TCStatic:128 Unit Cycles:255 Total Cycles:0
            LogicLatency: 270, GlueLatency: 0, LogicLatencyIteration: 17, GlueLatencyIteration: 0

FuncDecl(1):void test(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_4 Unit Cycles:528448 LogicLatency:559200 GlueLatency:0
  (1,0) for(int k = 0;;,k < 32;,k++) TopoID:L_0_0_0_4_2_0_10 II:0 IL:16512 UF:1 Flat:0 TCStatic:32 Unit Cycles:528448 Total Cycles:0
            LogicLatency: 559200, GlueLatency: 0, LogicLatencyIteration: 17473, GlueLatencyIteration: 2
  (0,0) func(a,b,c,k) TopoID:X_0_0_0_4_2_0_10_3_1_0 Unit Cycles=16512 Total Cycles:0
            LogicLatency: 16512, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
**********************************************************
3.2 Update cycles by memory burst
**********************************************************
**********************************************************
3.2.1 Update burst data size
**********************************************************
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 2
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:func(a,b,c,k)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:func(a,b,c,k)
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2093] Start compute for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}
one ref = c bitwidth = 64 OneDataSize 1 = 8192 Cycles = 128
one ref = a bitwidth = 8 OneDataSize 1 = 1024 Cycles = 128
one ref = b bitwidth = 32 OneDataSize 1 = 4096 Cycles = 128
[EST ALGO][UpdateBurstCyclesBySelf, 2157] Finish compute for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 13312, VarRefBitWidth = 104, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 13312, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 104, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
Sub block bitwidth = 104
parallel bitwidth = 104
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 104, SubBlocksDataSize = 851968, for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 851968, for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 104, for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
Sub block bitwidth = 104
parallel bitwidth = 104
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 104, SubBlocksDataSize = 851968, for block: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 851968, for block: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 104, for block: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:func(a,b,c,k)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:func(a,b,c,k)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 851968, for block: SgFunctionCallExp:func(a,b,c,k)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 104, for block: SgFunctionCallExp:func(a,b,c,k)
Sub block bitwidth = 104
parallel bitwidth = 104
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 104, SubBlocksDataSize = 27262976, for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 27262976, for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 104, for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
Sub block bitwidth = 104
parallel bitwidth = 104
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 104, SubBlocksDataSize = 27262976, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 27262976, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 104, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
Sub block bitwidth = 104
parallel bitwidth = 104
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 104, SubBlocksDataSize = 27262976, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 27262976, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 104, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
**********************************************************
3.2.2 Update burst cycles factor
**********************************************************
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 9, block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 27262976, Parent Data Size = 27262976, for block = void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 27262976, Parent Data Size = 27262976, for block = void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 8, block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 2
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
**********************************************************
3.2.3 Update burst cycles
**********************************************************
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 2
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:func(a,b,c,k)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 128;i++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 128;i++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 255, CycleUnitStaticOrg = 255, BurstCycles = 128, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
ChildBurstCyclesMax = 128, ChildUnitCyclesMax = 255
Finish calculate for one parallel scope: Child burst cycles max = 128, Child unit cycles max = 255
Prefinish block Cycles calculation: ChildBurstCyclesSum=128, ChildUnitCyclesSum=255, for block: for(int j = 0;j < 64;j++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=8192, ChildUnitCyclesSum=255, for block: for(int j = 0;j < 64;j++) {...}
Child unit cycles sum = 255, Child burst cycles sum = 8192, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 16512, CycleUnitStaticOrg = 16512, BurstCycles = 8192, SubBlocksCycles = 8192, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j = 0;j < 64;j++) {...}
ChildBurstCyclesMax = 8192, ChildUnitCyclesMax = 16512
Finish calculate for one parallel scope: Child burst cycles max = 8192, Child unit cycles max = 16512
Prefinish block Cycles calculation: ChildBurstCyclesSum=8192, ChildUnitCyclesSum=16512, for block: void func(char * a,int * b,long * c,int k) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=8192, ChildUnitCyclesSum=16512, for block: void func(char * a,int * b,long * c,int k) {...}
Child unit cycles sum = 16512, Child burst cycles sum = 8192, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 16512, CycleUnitStaticOrg = 16512, BurstCycles = 8192, SubBlocksCycles = 8192, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:func(a,b,c,k)
ChildBurstCyclesMax = 8192, ChildUnitCyclesMax = 16512
Finish calculate for one parallel scope: Child burst cycles max = 8192, Child unit cycles max = 16512
Prefinish block Cycles calculation: ChildBurstCyclesSum=8192, ChildUnitCyclesSum=16512, for block: for(int k = 0;k < 32;k++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=262144, ChildUnitCyclesSum=16512, for block: for(int k = 0;k < 32;k++) {...}
Child unit cycles sum = 16512, Child burst cycles sum = 262144, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 528448, CycleUnitStaticOrg = 528448, BurstCycles = 262144, SubBlocksCycles = 262144, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int k = 0;k < 32;k++) {...}
ChildBurstCyclesMax = 262144, ChildUnitCyclesMax = 528448
Finish calculate for one parallel scope: Child burst cycles max = 262144, Child unit cycles max = 528448
Prefinish block Cycles calculation: ChildBurstCyclesSum=262144, ChildUnitCyclesSum=528448, for block: void test(char * a,int * b,long * c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=262144, ChildUnitCyclesSum=528448, for block: void test(char * a,int * b,long * c) {...}
Child unit cycles sum = 528448, Child burst cycles sum = 262144, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 528448, CycleUnitStaticOrg = 528448, BurstCycles = 262144, SubBlocksCycles = 262144, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
ChildBurstCyclesMax = 262144, ChildUnitCyclesMax = 528448
Finish calculate for one parallel scope: Child burst cycles max = 262144, Child unit cycles max = 528448
Prefinish block Cycles calculation: ChildBurstCyclesSum=262144, ChildUnitCyclesSum=528448, for block: void test(char * a,int * b,long * c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=262144, ChildUnitCyclesSum=528448, for block: void test(char * a,int * b,long * c) {...}
Child unit cycles sum = 528448, Child burst cycles sum = 262144, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 528448, CycleUnitStaticOrg = 528448, BurstCycles = 262144, SubBlocksCycles = 262144, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}
[EST ALGO][UpdateCycleByMemoryBurstTop, 92] Total cycle of top kernel:0
SECOND_CYCLES=528448
[EST ALGO][ComputeStaticCycles, 48] Print schedule for after memory burst updating.

FuncDecl(0):void func(char * a,int * b,long * c,int k) {...} TopoID:F_0_0_0_1
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_1 Unit Cycles:16512 LogicLatency:17472 GlueLatency:0
  (0,0) for(int j = 0;;,j < 64;,j++) TopoID:L_0_0_0_1_2_0_0 II:0 IL:255 UF:1 Flat:0 TCStatic:64 Unit Cycles:16512 Total Cycles:0
            LogicLatency: 17472, GlueLatency: 0, LogicLatencyIteration: 270, GlueLatencyIteration: 3
  (0,0) for(int i = 0;;,i < 128;,i++) TopoID:L_0_0_0_1_2_0_0_3_1 II:2 IL:1 UF:1 Flat:0 TCStatic:128 Unit Cycles:255 Total Cycles:0
            LogicLatency: 270, GlueLatency: 0, LogicLatencyIteration: 17, GlueLatencyIteration: 0

FuncDecl(1):void test(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_4 Unit Cycles:528448 LogicLatency:559200 GlueLatency:0
  (1,0) for(int k = 0;;,k < 32;,k++) TopoID:L_0_0_0_4_2_0_10 II:0 IL:16512 UF:1 Flat:0 TCStatic:32 Unit Cycles:528448 Total Cycles:0
            LogicLatency: 559200, GlueLatency: 0, LogicLatencyIteration: 17473, GlueLatencyIteration: 2
  (0,0) func(a,b,c,k) TopoID:X_0_0_0_4_2_0_10_3_1_0 Unit Cycles=16512 Total Cycles:0
            LogicLatency: 16512, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
**********************************************************
3.3 Update total cycles.
**********************************************************
[EST ALGO][ComputeTotalStaticCycle, 2585] Start compute cycles for TASK. 
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void test(char * a,int * b,long * c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_4 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_4 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void test(char * a,int * b,long * c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_4 - schedule sequntial size: 2
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_4 - schedule parallel size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_4 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int k = 0;k < 32;k++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 32, TmpTCStatic = 32, NewFactor = 32
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_4_2_0_10 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_4_2_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call func(a,b,c,k)
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 32
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void func(char * a,int * b,long * c,int k) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 32
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_1 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j = 0;j < 64;j++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 64, TmpTCStatic = 64, NewFactor = 64
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_1_2_0_0 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_1_2_0_0 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int i = 0;i < 128;i++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 64
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 128, TmpTCStatic = 128, NewFactor = 64
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_1_2_0_0_3_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_1_2_0_0_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}, IsPipeline=1, TotalCycles 16320
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_1_2_0_0 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j = 0;j < 64;j++) {...}, IsPipeline=0, TotalCycles 16512
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 16512
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void func(char * a,int * b,long * c,int k) {...}, TotalCycles 16512. TmpCycles 528384
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:func(a,b,c,k), TotalCycles 528384
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_4_2_0_10 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int k = 0;k < 32;k++) {...}, IsPipeline=0, TotalCycles 528448
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_4 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 528448
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}, TotalCycles 528448. TmpCycles 528448
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_4 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 528448
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void test(char * a,int * b,long * c) {...}, TotalCycles 528448. TmpCycles 528448
[EST ALGO][ComputeTotalStaticCycle, 2590] Unit cycle of top kernel:528448
[EST ALGO][ComputeTotalStaticCycle, 2591] THIRD_CYCLES=528448
[EST ALGO][ComputeStaticCycles, 59] Print schedule for after compute total cycle.

FuncDecl(0):void func(char * a,int * b,long * c,int k) {...} TopoID:F_0_0_0_1
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_1 Unit Cycles:16512 LogicLatency:17472 GlueLatency:0
  (0,0) for(int j = 0;;,j < 64;,j++) TopoID:L_0_0_0_1_2_0_0 II:0 IL:255 UF:1 Flat:0 TCStatic:64 Unit Cycles:16512 Total Cycles:16512
            LogicLatency: 17472, GlueLatency: 0, LogicLatencyIteration: 270, GlueLatencyIteration: 3
  (0,0) for(int i = 0;;,i < 128;,i++) TopoID:L_0_0_0_1_2_0_0_3_1 II:2 IL:1 UF:1 Flat:0 TCStatic:128 Unit Cycles:255 Total Cycles:16320
            LogicLatency: 270, GlueLatency: 0, LogicLatencyIteration: 17, GlueLatencyIteration: 0

FuncDecl(1):void func(char * a,int * b,long * c,int k) {...} TopoID:F_0_0_0_1
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_1 Unit Cycles:16512 LogicLatency:17472 GlueLatency:0
  (0,0) for(int j = 0;;,j < 64;,j++) TopoID:L_0_0_0_1_2_0_0 II:0 IL:255 UF:1 Flat:0 TCStatic:64 Unit Cycles:16512 Total Cycles:16512
            LogicLatency: 17472, GlueLatency: 0, LogicLatencyIteration: 270, GlueLatencyIteration: 3
  (0,0) for(int i = 0;;,i < 128;,i++) TopoID:L_0_0_0_1_2_0_0_3_1 II:2 IL:1 UF:1 Flat:0 TCStatic:128 Unit Cycles:255 Total Cycles:16320
            LogicLatency: 270, GlueLatency: 0, LogicLatencyIteration: 17, GlueLatencyIteration: 0

FuncDecl(2):void test(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_4 Unit Cycles:528448 LogicLatency:559200 GlueLatency:0
  (1,0) for(int k = 0;;,k < 32;,k++) TopoID:L_0_0_0_4_2_0_10 II:0 IL:16512 UF:1 Flat:0 TCStatic:32 Unit Cycles:528448 Total Cycles:528448
            LogicLatency: 559200, GlueLatency: 0, LogicLatencyIteration: 17473, GlueLatencyIteration: 2
  (0,0) func(a,b,c,k) TopoID:X_0_0_0_4_2_0_10_3_1_0 Unit Cycles=16512 Total Cycles:528384
            LogicLatency: 16512, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(3):void test(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4
-Schedule:
Function: TopoID:F_0_0_0_4 Unit Cycles:528448 LogicLatency:559200 GlueLatency:0
  (0,0) void test(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4 Unit Cycles=528448 Total Cycles:528448
            LogicLatency: 559200, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
Function: TopoID:F_0_0_0_4 Unit Cycles:528448 LogicLatency:559200 GlueLatency:0
  (1,0) for(int k = 0;;,k < 32;,k++) TopoID:L_0_0_0_4_2_0_10 II:0 IL:16512 UF:1 Flat:0 TCStatic:32 Unit Cycles:528448 Total Cycles:528448
            LogicLatency: 559200, GlueLatency: 0, LogicLatencyIteration: 17473, GlueLatencyIteration: 2
  (0,0) func(a,b,c,k) TopoID:X_0_0_0_4_2_0_10_3_1_0 Unit Cycles=16512 Total Cycles:528384
            LogicLatency: 16512, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[INFO] ========================================================
[INFO] 4. Merge Json file.
[INFO] ========================================================
[INFO] Writing performance report : step1.json
ID = F_0_0_0_4
Report unit number = 0
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 528448
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
{
    "F_0_0_0_4": {
        "serially_execution":"0",
        "CYCLE_BURST":"262144",
        "CYCLE_COMPUTE":"528448",
    "CYCLE_UNIT":"528448",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_4_2_0_10
Report unit number = 1
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 528448
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_4_2_0_10": {
        "serially_execution":"0",
        "CYCLE_BURST":"262144",
        "CYCLE_COMPUTE":"528448",
    "CYCLE_UNIT":"528448",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"32",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_4_2_0_10_3_1_0
Report unit number = 2
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 528384
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_4_2_0_10_3_1_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"528384",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = F_0_0_0_1
Report unit number = 3
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 16512
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"8192",
        "CYCLE_COMPUTE":"16512",
    "CYCLE_UNIT":"16512",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_1_2_0_0
Report unit number = 4
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 16512
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_1_2_0_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"8192",
        "CYCLE_COMPUTE":"16512",
    "CYCLE_UNIT":"16512",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"64",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_1_2_0_0_3_1
Report unit number = 5
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 16320
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_1_2_0_0_3_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"128",
        "CYCLE_COMPUTE":"255",
    "CYCLE_UNIT":"16320",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"128",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = F_0_0_0_4
Report unit number = 6
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 528448
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "TOP_test": {
        "CYCLE_UNIT":"528448",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0",
        "func_name": "test",
             "topo_id": "TOP_test",
             "type":"top_kernel"
     },
ID = F_0_0_0_4
Report unit number = 7
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 528448
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_4": {
        "serially_execution":"0",
        "CYCLE_BURST":"262144",
        "CYCLE_COMPUTE":"528448",
    "CYCLE_UNIT":"528448",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_4_2_0_10
Report unit number = 8
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 528448
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_4_2_0_10": {
        "serially_execution":"0",
        "CYCLE_BURST":"262144",
        "CYCLE_COMPUTE":"528448",
    "CYCLE_UNIT":"528448",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"32",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_4_2_0_10_3_1_0
Report unit number = 9
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 528384
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_4_2_0_10_3_1_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"528384",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    }
}
Finish write file step1.json
#################################################
Delete some attribtues from json step1.json.
#################################################
Write output.json file.


#################################################
Delete some attribtues from json gen_token.json.
#################################################
Write output.json file.


[INFO] Performance estimation complete

====== Typedef replace ========>
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
[INFO] Beginning merging simulation output step1.json and annotated report gen_token.json into performance report perf_est.json
[INFO] Reading simulation output : step1.json
[INFO] Reading annotated report : gen_token.json
[INFO] Generating output file : perf_est.json
[INFO] Merge complete
cd .//lc_sim; merlin_safe_exec mars_opt __merlinkernel_test.cpp  -e c -p performance_estimation  -I\/curr\/hanhu\/unit_test\/test_case\/test0  -I\/curr\/hanhu\/unit_test\/test_case\/test0\/src\/  -I\/curr\/hanhu\/WORK\/Merlin_Compiler\/trunk\/build\/..\/\/mars-gen\/lib\/merlin -a MERGE -a step1.json -a gen_token.json -a perf_est.json :: __merlinkernel_test.cpp  :: 0
