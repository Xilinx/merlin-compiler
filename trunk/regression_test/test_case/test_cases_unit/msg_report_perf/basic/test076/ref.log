cmd = mars_opt __merlinkernel_vec_add_kernel.cpp  -e c -p performance_estimation  -I\/curr\/hanhu\/unit_test\/test_case\/test0  -I\/curr\/hanhu\/unit_test\/test_case\/test0\/src\/  -I\/curr\/hanhu\/WORK\/Merlin_Compiler\/trunk\/build\/..\/\/mars-gen\/lib\/merlin -a STATIC -a kernel_list.json -a gen_token.json -a config.json -a step1.json -a aocl

====== Typedef replace ========>
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
[INFO] Beginning static performance estimation



[INFO] ========================================================
[INFO] 1. Create blocks..
[INFO] ========================================================
[INFO] Reading annotated report : gen_token.json
[INFO] Reading annotated report : gen_token.json
[EST ALGO][MakeNewBlocks, 659] Create TOP TASK.
[EST ALGO][MakeNewBlocks, 648] Create top kernel: F_0_0_0_6
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 402] Create a kernel block: SgFunctionDeclaration:void vec_add_kernel(::merlin_u...
[EST ALGO][MakeNewBlocks, 655] Create sub kernel: F_0_0_0_6
[EST ALGO][MakeNewBlocks, 678] ExtPortList: 
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:a
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:b
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:c
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void vec_add_kernel(::merlin_u...
Function body = {#pragma HLS INTERFACE m_axi port=a offset=slave depth=63#pragma HLS INTERFACE m_axi port=b offset=slave depth=63#pragma HLS INTERFACE m_axi port=c offset=slave depth=63#pragma HLS INTERFACE s_axilite port=a bundle=control#pragma HLS INTERFACE s_axilite port=b bundle=control#pragma HLS INTERFACE s_axilite port=c bundle=control#pragma HLS INTERFACE s_axilite port=inc bundle=control#pragma HLS INTERFACE s_axilite port=inc_comp bundle=control#pragma HLS INTERFACE s_axilite port=return bundle=control#pragma HLS DATA_PACK VARIABLE=c#pragma HLS DATA_PACK VARIABLE=b#pragma HLS DATA_PACK VARIABLE=aint b_buf_2[1000];#pragma HLS array_partition variable=b_buf_2 cyclic factor=8 dim=1int a_buf_2[1000];#pragma HLS array_partition variable=a_buf_2 cyclic factor=8 dim=1int c_buf_2[1000];#pragma HLS array_partition variable=c_buf_2 cyclic factor=8 dim=1int b_buf_1[1000];#pragma HLS array_partition variable=b_buf_1 cyclic factor=8 dim=1int a_buf_1[1000];#pragma HLS array_partition variable=a_buf_1 cyclic factor=8 dim=1int c_buf_1[1000];#pragma HLS array_partition variable=c_buf_1 cyclic factor=8 dim=1int b_buf_0[250][4];#pragma HLS array_partition variable=b_buf_0 complete dim=2#pragma HLS array_partition variable=b_buf_0 cyclic factor=4 dim=1int a_buf_0[250][4];#pragma HLS array_partition variable=a_buf_0 complete dim=2#pragma HLS array_partition variable=a_buf_0 cyclic factor=4 dim=1int c_buf_0[250][4];#pragma HLS array_partition variable=c_buf_0 complete dim=2#pragma HLS array_partition variable=c_buf_0 cyclic factor=4 dim=1memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);#pragma ACCEL interface variable=a max_depth=1000 depth=1000#pragma ACCEL interface variable=b max_depth=1000 depth=1000#pragma ACCEL interface variable=c max_depth=1000 depth=1000for(int j = 0;j < 250;j++) {#pragma HLS pipelinefor(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {#pragma HLS unrollif(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}}}memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL);for(int j = 0;j < 250 + -inc / 4;j++) {#pragma HLS pipelinefor(int j_sub = 0;j_sub < 4;++j_sub) {#pragma HLS unrollif(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}}}{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);for(int j = 0;j < 1000;j++) {#pragma HLS pipelineif(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}}memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL);memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL);for(int j = 0;j < 1000;j++) {#pragma HLS pipelineif(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}}memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL);for(int j = 0;j < 1000 - inc;j++) {#pragma HLS pipelineint tmp_8;int tmp_5;int tmp_2;tmp_2 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_5 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_8 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4));tmp_8 += tmp_2 + tmp_5;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j));}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_2d_4_...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_...
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_2d_4_...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_...
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_2d_4_...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_...
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j = 0;j < 250;j++) {.....
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j = 0;j < 250;j++) {.....
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < ...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < ...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 417] Create a if block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_su...
[EST ALGO][AddChildBlock_AOCL, 274] Find a if: SgIfStmt:if(inc > 100) {c_buf_0[j][j_su...
[EST ALGO][AddChildBlock_AOCL, 278]     If body : SgBasicBlock:{c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][AddChildBlock_AOCL, 283]     Else body : nullptr
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_write_int_2d_4...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4...
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j = 0;j < 250 + -inc /...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j = 0;j < 250 + -inc /...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j_sub = 0;j_sub < 4;++...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j_sub = 0;j_sub < 4;++...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 417] Create a if block: SgIfStmt:if(inc < 100) {int tmp_6;int t...
[EST ALGO][AddChildBlock_AOCL, 274] Find a if: SgIfStmt:if(inc < 100) {int tmp_6;int t...
[EST ALGO][AddChildBlock_AOCL, 278]     If body : SgBasicBlock:{int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j ...
[EST ALGO][AddChildBlock_AOCL, 283]     Else body : nullptr
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:tmp_0 = memcpy_wide_bus_single...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:int memcpy_wide_bus_single_rea...
[EST ALGO][MakeNewBlocks, 653] Create func decl: 
Insert one ext port : a
[EST ALGO][MakeNewBlocks, 678] ExtPortList: 
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:a
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:int memcpy_wide_bus_single_rea...
Function body = {#pragma HLS inline selfconst size_t data_width = sizeof(int );const size_t bus_width =(512 / 8);const size_t num_elements = bus_width / data_width;size_t offset = offset_byte / data_width;size_t head_align = offset & num_elements - 1;size_t start = offset / num_elements;int ret =(merlin_get_range_512(&a[start],(head_align * data_width),data_width));return ret;}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:tmp_3 = memcpy_wide_bus_single...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_single_write_i...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void memcpy_wide_bus_single_wr...
[EST ALGO][MakeNewBlocks, 653] Create func decl: 
Insert one ext port : c
[EST ALGO][MakeNewBlocks, 678] ExtPortList: 
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:c
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void memcpy_wide_bus_single_wr...
Function body = {#pragma HLS inline selfconst size_t data_width = sizeof(int );const size_t bus_width =(512 / 8);const size_t num_elements = bus_width / data_width;size_t offset = offset_byte / data_width;size_t head_align = offset & num_elements - 1;size_t start = offset / num_elements;merlin_set_range_512(&c[start],(head_align * data_width),data_width,c_buf);return ;}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 426] Create a basic block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 ...
[EST ALGO][AddChildBlock_AOCL, 297] Find a basic block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 ...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j =(1000 + -inc) / 4 *...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j =(1000 + -inc) / 4 *...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 417] Create a if block: SgIfStmt:if(inc < 100) {int tmp_7;int t...
[EST ALGO][AddChildBlock_AOCL, 274] Find a if: SgIfStmt:if(inc < 100) {int tmp_7;int t...
[EST ALGO][AddChildBlock_AOCL, 278]     If body : SgBasicBlock:{int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][AddChildBlock_AOCL, 283]     Else body : nullptr
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:tmp_1 = memcpy_wide_bus_single...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:tmp_4 = memcpy_wide_bus_single...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_single_write_i...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_512(&...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&...
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_512(&...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&...
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_512(&...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&...
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j = 0;j < 1000;j++) {....
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j = 0;j < 1000;j++) {....
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 417] Create a if block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j]...
[EST ALGO][AddChildBlock_AOCL, 274] Find a if: SgIfStmt:if(inc < inc_comp) {c_buf_2[j]...
[EST ALGO][AddChildBlock_AOCL, 278]     If body : SgBasicBlock:{c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][AddChildBlock_AOCL, 283]     Else body : nullptr
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_write_int_512(...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_write_int_512(...
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_512(&...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&...
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_512(&...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&...
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_read_int_512(&...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&...
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j = 0;j < 1000;j++) {....
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j = 0;j < 1000;j++) {....
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 417] Create a if block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[...
[EST ALGO][AddChildBlock_AOCL, 274] Find a if: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[...
[EST ALGO][AddChildBlock_AOCL, 278]     If body : SgBasicBlock:{c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][AddChildBlock_AOCL, 283]     Else body : nullptr
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_write_int_512(...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_write_int_512(...
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int j = 0;j < 1000 - inc;j...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int j = 0;j < 1000 - inc;j...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:tmp_2 = memcpy_wide_bus_single...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:tmp_5 = memcpy_wide_bus_single...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:tmp_8 = memcpy_wide_bus_single...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_single_write_i...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 830] Is fake memcpy call.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.



[INFO] ========================================================
[INFO] 2. Reading annotated report : gen_token.json
[INFO] ========================================================
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 8, ID = F_0_0_0_6, void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_33_0, memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_34_0, memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_35_0, memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_6_2_0_39, for(int j = 0;j < 250;j++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 250
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 3
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 251
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 3
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_6_2_0_39_3_1, for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 4
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 4
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 4, ID = X_0_0_0_6_2_0_39_3_1_3_1, if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][ReadAnnotatedReportHelper, 519]Critical Warning: TopoID does not exist in input json:
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_40_0, memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_6_2_0_41, for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1073742073
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 18
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 29
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 19327357324
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 29
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_6_2_0_41_3_1, for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 4
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 4
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 4, ID = X_0_0_0_6_2_0_41_3_1_3_1, if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][ReadAnnotatedReportHelper, 519]Critical Warning: TopoID does not exist in input json:
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_41_3_1_3_1_1_3_0_1, memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_41_3_1_3_1_1_4_0_1, memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_41_3_1_3_1_1_6_0, memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 6, ID = X_0_0_0_6_2_0_42, {for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][ReadAnnotatedReportHelper, 519]Critical Warning: TopoID does not exist in input json:
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_6_2_0_42_0, for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 3
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 15
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 29
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 58
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 29
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 4, ID = X_0_0_0_6_2_0_42_0_3_2, if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][ReadAnnotatedReportHelper, 519]Critical Warning: TopoID does not exist in input json:
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_42_0_3_2_1_3_0_1, memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_42_0_3_2_1_4_0_1, memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_42_0_3_2_1_6_0, memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_43_0, memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_44_0, memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_45_0, memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_6_2_0_46, for(int j = 0;j < 1000;j++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1000
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 3
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 1001
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 3
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 4, ID = X_0_0_0_6_2_0_46_3_1, if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][ReadAnnotatedReportHelper, 519]Critical Warning: TopoID does not exist in input json:
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_47_0, memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_48_0, memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_49_0, memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_50_0, memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_6_2_0_51, for(int j = 0;j < 1000;j++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1000
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 4
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 4
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 4000
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 4
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 4, ID = X_0_0_0_6_2_0_51_3_1, if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][ReadAnnotatedReportHelper, 519]Critical Warning: TopoID does not exist in input json:
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_6_2_0_52_0, memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_6_2_0_53, for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 1, TC_ub = 1
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 17
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 20
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 20
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_53_3_4_0_1, memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_53_3_5_0_1, memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_53_3_6_0_1, memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_6_2_0_53_3_8_0, memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = , int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][ReadAnnotatedReportHelper, 519]Critical Warning: TopoID does not exist in input json:
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = , void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][ReadAnnotatedReportHelper, 519]Critical Warning: TopoID does not exist in input json:
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[INFO] ========================================================
[INFO] 3. Compute cycles.
[INFO] ========================================================
[INFO] Reading external memory parameter file: config.json
[WARNING] RBW_GBs not found.
[WARNING] WBW_GBs not found.
[WARNING] RLat_ns not found.
[WARNING] WLat_ns not found.
[WARNING] RandLat_ns not found.
RBW_GBs=10.300000
WBW_GBs=9.600000
RLat_ns=434.000000
WLat_ns=325.000000
RandLat_ns=62.000000
FPGACLK_GHz=0.250000
MAX_BITWIDTH=512.000000
LATENCY=240.000000
Find Top Block = F_0_0_0_6
**********************************************************
3.1 Update cycles by compute all data
**********************************************************
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1574] Start compute cycles for TASK. 
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1586] Start compute cycles for top kernel: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_6 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_6 - schedule sequntial size: 18
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=1 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 124, LogicLatency: 124, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=2 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 186, LogicLatency: 186, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=3 ,k=0 ,Block=SgForStatement:for(int j = 0;j < 250;j++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_6_2_0_39 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_6_2_0_39 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_6_2_0_39_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_6_2_0_39_3_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1761] Finish compute cycles for statement if: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}, Cycles=0, LogicCycles=0, GlueCycles=0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_6_2_0_39_3_1 - schedule spawn size: 0
111 Final IL = 0, vendor latency = 1
Final IL = 0, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=4, UnrollFactor=4, II=0, IL=0, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=0
Find fully unroll loop with IL > 1.
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_6_2_0_39 - schedule spawn size: 0
111 Final IL = 0, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=250, UnrollFactor=1, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=250
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j = 0;j < 250;j++) {...}, Cycles: 250, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j = 0;j < 250;j++) {...}, Cycles: 250, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 250, LogicTemp: 0, GlueTemp: 0, TotalCycles: 436, LogicLatency: 186, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=4 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 498, LogicLatency: 248, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=5 ,k=0 ,Block=SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_6_2_0_41 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_6_2_0_41 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_6_2_0_41_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_6_2_0_41_3_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1724] Start compute cycles for if: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_6_2_0_41_3_1_3_1 - schedule sequntial size: 3
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_6_2_0_41_3_1_3_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Logic latency = 0, Unit cycles = 0, AccCycles = 0
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}, Cycles: 1, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1, LogicTemp: 1, GlueTemp: 0, TotalCycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_6_2_0_41_3_1_3_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=1 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1, LogicTemp: 1, GlueTemp: 0, TotalCycles: 2, LogicLatency: 2, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_6_2_0_41_3_1_3_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=2 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
Logic latency = 0, Unit cycles = 0, AccCycles = 0
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}, Cycles: 1, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub))), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1, LogicTemp: 1, GlueTemp: 0, TotalCycles: 3, LogicLatency: 3, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_6_2_0_41_3_1_3_1 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1734] Finish compute cycles for branch if: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}, Cycles=3, LogicCycles=3, GlueCycles=0
[EST ALGO][ComputeStaticCycleHelper, 1761] Finish compute cycles for statement if: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}, Cycles=3, LogicCycles=3, GlueCycles=0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 3, LogicTemp: 3, GlueTemp: 0, TotalCycles: 3, LogicLatency: 3, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_6_2_0_41_3_1 - schedule spawn size: 0
111 Final IL = 3, vendor latency = 1
Final IL = 3, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=4, UnrollFactor=4, II=0, IL=3, LogicLatencyIteration=3, GlueLatencyIteration=0, CycleUnitStatic=3
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}, Cycles: 3, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}, Cycles: 3, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 3, LogicTemp: 0, GlueTemp: 0, TotalCycles: 3, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_6_2_0_41 - schedule spawn size: 0
111 Final IL = 3, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1073742073, UnrollFactor=1, II=18, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=19327357297
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}, Cycles: 19327357297, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}, Cycles: 19327357297, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 19327357297, LogicTemp: 0, GlueTemp: 0, TotalCycles: 19327357795, LogicLatency: 248, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=6 ,k=0 ,Block=SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1812] Start compute cycles for basic block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_6_2_0_42 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_6_2_0_42 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_6_2_0_42_0 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_6_2_0_42_0 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1724] Start compute cycles for if: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_6_2_0_42_0_3_2 - schedule sequntial size: 3
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_6_2_0_42_0_3_2 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1, LogicTemp: 1, GlueTemp: 0, TotalCycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_6_2_0_42_0_3_2 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=1 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1, LogicTemp: 1, GlueTemp: 0, TotalCycles: 2, LogicLatency: 2, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_6_2_0_42_0_3_2 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=2 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1, LogicTemp: 1, GlueTemp: 0, TotalCycles: 3, LogicLatency: 3, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_6_2_0_42_0_3_2 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1734] Finish compute cycles for branch if: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}, Cycles=3, LogicCycles=3, GlueCycles=0
[EST ALGO][ComputeStaticCycleHelper, 1761] Finish compute cycles for statement if: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}, Cycles=3, LogicCycles=3, GlueCycles=0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 3, LogicTemp: 3, GlueTemp: 0, TotalCycles: 3, LogicLatency: 3, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_6_2_0_42_0 - schedule spawn size: 0
111 Final IL = 3, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=3, UnrollFactor=1, II=15, IL=1, LogicLatencyIteration=3, GlueLatencyIteration=0, CycleUnitStatic=31
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}, Cycles: 31, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}, Cycles: 31, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 31, LogicTemp: 0, GlueTemp: 0, TotalCycles: 31, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_6_2_0_42 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1823] Finish compute cycles for basic block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}, Cycles: 31
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 31, LogicTemp: 0, GlueTemp: 0, TotalCycles: 19327357826, LogicLatency: 248, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=7 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 19327357888, LogicLatency: 310, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=8 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 19327357950, LogicLatency: 372, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=9 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 19327358012, LogicLatency: 434, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=10 ,k=0 ,Block=SgForStatement:for(int j = 0;j < 1000;j++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_6_2_0_46 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_6_2_0_46 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1761] Finish compute cycles for statement if: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}, Cycles=0, LogicCycles=0, GlueCycles=0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_6_2_0_46 - schedule spawn size: 0
111 Final IL = 0, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1000, UnrollFactor=1, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=1000
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j = 0;j < 1000;j++) {...}, Cycles: 1000, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j = 0;j < 1000;j++) {...}, Cycles: 1000, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1000, LogicTemp: 0, GlueTemp: 0, TotalCycles: 19327359012, LogicLatency: 434, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=11 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 19327359074, LogicLatency: 496, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=12 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 19327359136, LogicLatency: 558, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=13 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 19327359198, LogicLatency: 620, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=14 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 19327359260, LogicLatency: 682, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=15 ,k=0 ,Block=SgForStatement:for(int j = 0;j < 1000;j++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_6_2_0_51 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_6_2_0_51 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1761] Finish compute cycles for statement if: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}, Cycles=0, LogicCycles=0, GlueCycles=0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_6_2_0_51 - schedule spawn size: 0
111 Final IL = 0, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1000, UnrollFactor=1, II=4, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=3997
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j = 0;j < 1000;j++) {...}, Cycles: 3997, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j = 0;j < 1000;j++) {...}, Cycles: 3997, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 3997, LogicTemp: 0, GlueTemp: 0, TotalCycles: 19327363257, LogicLatency: 682, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=16 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:1000LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 1000
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 4000
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 62
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 62, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 62
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL), Cycles: 62, LogicLatency: 62, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 62, LogicTemp: 62, GlueTemp: 0, TotalCycles: 19327363319, LogicLatency: 744, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=17 ,k=0 ,Block=SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_6_2_0_53 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_6_2_0_53 - schedule parallel size: 4
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=1 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=2 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=3 ,Block=SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j)), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1, LogicTemp: 1, GlueTemp: 0, TotalCycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_6_2_0_53 - schedule spawn size: 0
111 Final IL = 1, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1, UnrollFactor=1, II=17, IL=1, LogicLatencyIteration=1, GlueLatencyIteration=0, CycleUnitStatic=1
Find fully unroll loop with IL > 1.
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 19327363319, LogicLatency: 744, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_6 - schedule spawn size: 0
Logic latency = 744, Unit cycles = 19327363319, AccCycles = 19327363319
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}, Cycles: 19327363319, LogicLatency: 744, GlueLatency: 19327362575
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 19327363319, LogicTemp: 744, GlueTemp: 19327362575, TotalCycles: 19327363319, LogicLatency: 744, GlueLatency: 19327362575
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_6 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1599] Finish compute cycles for top kernel: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}, Cycles: 19327363319
[EST ALGO][ComputeStaticCycleHelper, 1579] Unit cycle of top kernel:19327363319
[EST ALGO][ComputeStaticCycleHelper, 1580] FIRST_CYCLES=19327363319
[EST ALGO][ComputeStaticCycles, 38] Print schedule for initial framework.

FuncDecl(0):int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...} TopoID:
-ExtPort0:a
-Schedule:
Function: TopoID: Unit Cycles:1 LogicLatency:0 GlueLatency:0

FuncDecl(1):void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...} TopoID:
-ExtPort0:c
-Schedule:
Function: TopoID: Unit Cycles:1 LogicLatency:0 GlueLatency:0

FuncDecl(2):void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...} TopoID:F_0_0_0_6
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_6 Unit Cycles:19327363319 LogicLatency:744 GlueLatency:19327362575
  (0,0) memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_33_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_34_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_35_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) for(int j = 0;;,j < 250;,j++) TopoID:L_0_0_0_6_2_0_39 II:1 IL:1 UF:1 Flat:0 TCStatic:250 Unit Cycles:250 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_40_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) for(int j = 0;;,j < 250 + -inc / 4;,j++) TopoID:L_0_0_0_6_2_0_41 II:18 IL:1 UF:1 Flat:0 TCStatic:1073742073 Unit Cycles:19327357297 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) {for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}} TopoID:X_0_0_0_6_2_0_42 Unit Cycles=31 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(int j =(1000 + -inc) / 4 * 4;;,j < 1000 - inc;,j++) TopoID:L_0_0_0_6_2_0_42_0 II:15 IL:1 UF:1 Flat:0 TCStatic:3 Unit Cycles:31 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3, GlueLatencyIteration: 0
  (7,0) memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_43_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (8,0) memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_44_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (9,0) memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_45_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (10,0) for(int j = 0;;,j < 1000;,j++) TopoID:L_0_0_0_6_2_0_46 II:1 IL:1 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (11,0) memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_47_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (12,0) memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_48_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (13,0) memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_49_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (14,0) memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_50_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (15,0) for(int j = 0;;,j < 1000;,j++) TopoID:L_0_0_0_6_2_0_51 II:4 IL:1 UF:1 Flat:0 TCStatic:1000 Unit Cycles:3997 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (16,0) memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_52_0 Unit Cycles=62 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (17,0) for(int j = 0;;,j < 1000 - inc;,j++) TopoID:L_0_0_0_6_2_0_53 II:17 IL:1 UF:1 Flat:0 TCStatic:1 Unit Cycles:0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
**********************************************************
3.2 Update cycles by memory burst
**********************************************************
**********************************************************
3.2.1 Update burst data size
**********************************************************
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 18
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 3
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 65536, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
Sub block bitwidth = 65536
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 3
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 65536, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
Sub block bitwidth = 65536
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 65536, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
Sub block bitwidth = 65536
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 65536, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
Sub block bitwidth = 65536
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Update burst cycles by coefficien.
cycles = 65
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 4
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 65536, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
Sub block bitwidth = 65536
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 65536, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
Sub block bitwidth = 65536
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 65536, for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
Sub block bitwidth = 65536
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 65536, for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
Sub block bitwidth = 65536
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 384000, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 384000, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 384000, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 384000, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
**********************************************************
3.2.2 Update burst cycles factor
**********************************************************
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 9, block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 384000, Parent Data Size = 384000, for block = void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 384000, Parent Data Size = 384000, for block = void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 8, block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 18
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
parent TCStatic = 250
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
parent TCStatic = 4
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 4, block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = for(int j_sub = 0;j_sub < 4;++j_sub) {...}
parent TCStatic = 1073742073
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
parent TCStatic = 4
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 4, block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 3
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 6, block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
parent TCStatic = 3
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 4, block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 3
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
parent TCStatic = 1000
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 4, block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
parent TCStatic = 1000
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 4, block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 4
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
parent TCStatic = 1
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 4
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
parent TCStatic = 1
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 4
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
parent TCStatic = 1
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 4
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
parent TCStatic = 1
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
**********************************************************
3.2.3 Update burst cycles
**********************************************************
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 18
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int j = 0;j < 250;j++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int j = 0;j < 250;j++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 250, CycleUnitStaticOrg = 250, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j = 0;j < 250;j++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 250
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 250
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 3
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
Child unit cycles sum = 3, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 3, CycleUnitStaticOrg = 3, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 3
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 3
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: for(int j_sub = 0;j_sub < 4;++j_sub) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: for(int j_sub = 0;j_sub < 4;++j_sub) {...}
Child unit cycles sum = 3, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 3, CycleUnitStaticOrg = 3, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 3
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 3
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: for(int j = 0;j < 250 + -inc / 4;j++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: for(int j = 0;j < 250 + -inc / 4;j++) {...}
Child unit cycles sum = 3, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 19327357297, CycleUnitStaticOrg = 19327357297, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 19327357297
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 19327357297
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 3
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
Child unit cycles sum = 3, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 3, CycleUnitStaticOrg = 3, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 3
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 3
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=3, for block: for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
Child unit cycles sum = 3, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 31, CycleUnitStaticOrg = 31, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 31
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 31
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=31, for block: {for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=31, for block: {for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
Child unit cycles sum = 31, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 31, CycleUnitStaticOrg = 31, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 31
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 31
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int j = 0;j < 1000;j++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int j = 0;j < 1000;j++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1000, CycleUnitStaticOrg = 1000, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1000
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1000
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int j = 0;j < 1000;j++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int j = 0;j < 1000;j++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 3997, CycleUnitStaticOrg = 3997, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j = 0;j < 1000;j++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 3997
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 3997
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 65, CycleUnitStaticOrg = 65, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL)
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 65
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 65
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 4
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=1, for block: for(int j = 0;j < 1000 - inc;j++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=1, for block: for(int j = 0;j < 1000 - inc;j++) {...}
Child unit cycles sum = 1, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=744, ChildUnitCyclesSum=19327363355, for block: void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=744, ChildUnitCyclesSum=19327363355, for block: void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
Child unit cycles sum = 19327363355, Child burst cycles sum = 744, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 19327363319, CycleUnitStaticOrg = 19327363319, BurstCycles = 750, SubBlocksCycles = 744, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
ChildBurstCyclesMax = 750, ChildUnitCyclesMax = 19327363319
Finish calculate for one parallel scope: Child burst cycles max = 750, Child unit cycles max = 19327363319
Prefinish block Cycles calculation: ChildBurstCyclesSum=750, ChildUnitCyclesSum=19327363319, for block: void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=750, ChildUnitCyclesSum=19327363319, for block: void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
Child unit cycles sum = 19327363319, Child burst cycles sum = 750, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 19327363319, CycleUnitStaticOrg = 19327363319, BurstCycles = 750, SubBlocksCycles = 750, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][UpdateCycleByMemoryBurstTop, 92] Total cycle of top kernel:0
SECOND_CYCLES=19327363319
[EST ALGO][ComputeStaticCycles, 48] Print schedule for after memory burst updating.

FuncDecl(0):int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...} TopoID:
-ExtPort0:a
-Schedule:
Function: TopoID: Unit Cycles:1 LogicLatency:0 GlueLatency:0

FuncDecl(1):void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...} TopoID:
-ExtPort0:c
-Schedule:
Function: TopoID: Unit Cycles:1 LogicLatency:0 GlueLatency:0

FuncDecl(2):void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...} TopoID:F_0_0_0_6
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_6 Unit Cycles:19327363319 LogicLatency:744 GlueLatency:19327362575
  (0,0) memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_33_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_34_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_35_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) for(int j = 0;;,j < 250;,j++) TopoID:L_0_0_0_6_2_0_39 II:1 IL:1 UF:1 Flat:0 TCStatic:250 Unit Cycles:250 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_40_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) for(int j = 0;;,j < 250 + -inc / 4;,j++) TopoID:L_0_0_0_6_2_0_41 II:18 IL:1 UF:1 Flat:0 TCStatic:1073742073 Unit Cycles:19327357297 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) {for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}} TopoID:X_0_0_0_6_2_0_42 Unit Cycles=31 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(int j =(1000 + -inc) / 4 * 4;;,j < 1000 - inc;,j++) TopoID:L_0_0_0_6_2_0_42_0 II:15 IL:1 UF:1 Flat:0 TCStatic:3 Unit Cycles:31 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3, GlueLatencyIteration: 0
  (7,0) memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_43_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (8,0) memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_44_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (9,0) memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_45_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (10,0) for(int j = 0;;,j < 1000;,j++) TopoID:L_0_0_0_6_2_0_46 II:1 IL:1 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (11,0) memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_47_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (12,0) memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_48_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (13,0) memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_49_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (14,0) memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_50_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (15,0) for(int j = 0;;,j < 1000;,j++) TopoID:L_0_0_0_6_2_0_51 II:4 IL:1 UF:1 Flat:0 TCStatic:1000 Unit Cycles:3997 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (16,0) memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_52_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (17,0) for(int j = 0;;,j < 1000 - inc;,j++) TopoID:L_0_0_0_6_2_0_53 II:17 IL:1 UF:1 Flat:0 TCStatic:1 Unit Cycles:0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
**********************************************************
3.3 Update total cycles.
**********************************************************
[EST ALGO][ComputeTotalStaticCycle, 2585] Start compute cycles for TASK. 
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_6 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_6 - schedule sequntial size: 18
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j = 0;j < 250;j++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 250, TmpTCStatic = 250, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_6_2_0_39 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_6_2_0_39 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 4, TCStatic = 4, TmpTCStatic = 1, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_6_2_0_39_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_6_2_0_39_3_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2689] Start compute cycles for if if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}
[EST ALGO][ComputeTotalStaticCycle, 2690] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_39_3_1_3_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_39_3_1_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_39_3_1_3_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_39_3_1_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2706] Compute cycles for if: SgIfStmt:if(inc > 100) {c_buf_0[j][j_sub_0] = a_buf_0[j][j_sub_0] + b_buf_0[j][j_sub_0];}, TotalCycles 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_6_2_0_39_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j_sub_0 = 0;j_sub_0 < 4;++j_sub_0) {...}, IsPipeline=0, TotalCycles 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_6_2_0_39 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j = 0;j < 250;j++) {...}, IsPipeline=1, TotalCycles 250
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j = 0;j < 250 + -inc / 4;j++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 1073742073, TmpTCStatic = 1073742073, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_6_2_0_41 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_6_2_0_41 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j_sub = 0;j_sub < 4;++j_sub) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 4, TCStatic = 4, TmpTCStatic = 1, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_6_2_0_41_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_6_2_0_41_3_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2689] Start compute cycles for if if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}
[EST ALGO][ComputeTotalStaticCycle, 2690] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_41_3_1_3_1 - schedule sequntial size: 3
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_6_2_0_41_3_1_3_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766] - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783] - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 1
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...}, TotalCycles 1. TmpCycles 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_6_2_0_41_3_1_3_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_6_2_0_41_3_1_3_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766] - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783] - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 1
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...}, TotalCycles 1. TmpCycles 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub))), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_41_3_1_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_41_3_1_3_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_41_3_1_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2706] Compute cycles for if: SgIfStmt:if(inc < 100) {int tmp_6;int tmp_3;int tmp_0;tmp_0 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,((j * 4 + j_sub) * 4));tmp_3 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,((j * 4 + j_sub) * 4));tmp_6 = tmp_0 + tmp_3;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_6,(4 *(j * 4 + j_sub)));}, TotalCycles 3
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_6_2_0_41_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j_sub = 0;j_sub < 4;++j_sub) {...}, IsPipeline=0, TotalCycles 3
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_6_2_0_41 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j = 0;j < 250 + -inc / 4;j++) {...}, IsPipeline=1, TotalCycles 19327357297
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2740] Start compute cycles for basic block {for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}
[EST ALGO][ComputeTotalStaticCycle, 2741] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_42 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_6_2_0_42 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 3, TmpTCStatic = 3, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_6_2_0_42_0 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_6_2_0_42_0 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2689] Start compute cycles for if if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}
[EST ALGO][ComputeTotalStaticCycle, 2690] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_42_0_3_2 - schedule sequntial size: 3
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_6_2_0_42_0_3_2 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_6_2_0_42_0_3_2 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_6_2_0_42_0_3_2 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_42_0_3_2 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_42_0_3_2 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_42_0_3_2 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2706] Compute cycles for if: SgIfStmt:if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}, TotalCycles 31
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_6_2_0_42_0 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {...}, IsPipeline=1, TotalCycles 31
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_42 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2752] Compute cycles for basic block: SgBasicBlock:{for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}}, TotalCycles 31
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j = 0;j < 1000;j++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 1000, TmpTCStatic = 1000, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_6_2_0_46 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_6_2_0_46 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2689] Start compute cycles for if if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}
[EST ALGO][ComputeTotalStaticCycle, 2690] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_46_3_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_46_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_46_3_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_46_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2706] Compute cycles for if: SgIfStmt:if(inc < inc_comp) {c_buf_2[j] = a_buf_2[j] + b_buf_2[j];}, TotalCycles 1000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_6_2_0_46 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j = 0;j < 1000;j++) {...}, IsPipeline=1, TotalCycles 1000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j = 0;j < 1000;j++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 1000, TmpTCStatic = 1000, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_6_2_0_51 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_6_2_0_51 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2689] Start compute cycles for if if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}
[EST ALGO][ComputeTotalStaticCycle, 2690] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_51_3_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_51_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_6_2_0_51_3_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_6_2_0_51_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2706] Compute cycles for if: SgIfStmt:if(inc < c_buf_1[0]) {c_buf_1[j] = a_buf_1[j] + b_buf_1[j];}, TotalCycles 3997
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_6_2_0_51 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j = 0;j < 1000;j++) {...}, IsPipeline=1, TotalCycles 3997
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_6 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int j = 0;j < 1000 - inc;j++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 1, TmpTCStatic = 1, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_6_2_0_53 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_6_2_0_53 - schedule parallel size: 4
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)c,(j * 4)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j))
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_8,(4 * j)), TotalCycles 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_6_2_0_53 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int j = 0;j < 1000 - inc;j++) {...}, IsPipeline=1, TotalCycles 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_6 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 19327363319
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}, TotalCycles 19327363319. TmpCycles 19327363319
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_6 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 19327363319
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...}, TotalCycles 19327363319. TmpCycles 19327363319
[EST ALGO][ComputeTotalStaticCycle, 2590] Unit cycle of top kernel:19327363319
[EST ALGO][ComputeTotalStaticCycle, 2591] THIRD_CYCLES=19327363319
[EST ALGO][ComputeStaticCycles, 59] Print schedule for after compute total cycle.

FuncDecl(0):int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...} TopoID:
-ExtPort0:a
-Schedule:
Function: TopoID: Unit Cycles:1 LogicLatency:0 GlueLatency:0

FuncDecl(1):int memcpy_wide_bus_single_read_int_512(::merlin_uint_512* a,::size_t offset_byte) {...} TopoID:
-ExtPort0:a
-Schedule:
Function: TopoID: Unit Cycles:1 LogicLatency:0 GlueLatency:0

FuncDecl(2):void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...} TopoID:
-ExtPort0:c
-Schedule:
Function: TopoID: Unit Cycles:1 LogicLatency:0 GlueLatency:0

FuncDecl(3):void memcpy_wide_bus_single_write_int_512(::merlin_uint_512* c,int c_buf,::size_t offset_byte) {...} TopoID:
-ExtPort0:c
-Schedule:
Function: TopoID: Unit Cycles:1 LogicLatency:0 GlueLatency:0

FuncDecl(4):void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...} TopoID:F_0_0_0_6
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_6 Unit Cycles:19327363319 LogicLatency:744 GlueLatency:19327362575
  (0,0) memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_33_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_34_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_35_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) for(int j = 0;;,j < 250;,j++) TopoID:L_0_0_0_6_2_0_39 II:1 IL:1 UF:1 Flat:0 TCStatic:250 Unit Cycles:250 Total Cycles:250
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_40_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) for(int j = 0;;,j < 250 + -inc / 4;,j++) TopoID:L_0_0_0_6_2_0_41 II:18 IL:1 UF:1 Flat:0 TCStatic:1073742073 Unit Cycles:19327357297 Total Cycles:19327357297
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) {for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}} TopoID:X_0_0_0_6_2_0_42 Unit Cycles=31 Total Cycles:31
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(int j =(1000 + -inc) / 4 * 4;;,j < 1000 - inc;,j++) TopoID:L_0_0_0_6_2_0_42_0 II:15 IL:1 UF:1 Flat:0 TCStatic:3 Unit Cycles:31 Total Cycles:31
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3, GlueLatencyIteration: 0
  (7,0) memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_43_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (8,0) memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_44_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (9,0) memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_45_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (10,0) for(int j = 0;;,j < 1000;,j++) TopoID:L_0_0_0_6_2_0_46 II:1 IL:1 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1000 Total Cycles:1000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (11,0) memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_47_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (12,0) memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_48_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (13,0) memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_49_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (14,0) memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_50_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (15,0) for(int j = 0;;,j < 1000;,j++) TopoID:L_0_0_0_6_2_0_51 II:4 IL:1 UF:1 Flat:0 TCStatic:1000 Unit Cycles:3997 Total Cycles:3997
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (16,0) memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_52_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (17,0) for(int j = 0;;,j < 1000 - inc;,j++) TopoID:L_0_0_0_6_2_0_53 II:17 IL:1 UF:1 Flat:0 TCStatic:1 Unit Cycles:0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(5):void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...} TopoID:F_0_0_0_6
-Schedule:
Function: TopoID:F_0_0_0_6 Unit Cycles:19327363319 LogicLatency:744 GlueLatency:19327362575
  (0,0) void vec_add_kernel(::merlin_uint_512* a,::merlin_uint_512* b,::merlin_uint_512* c,int inc,int inc_comp) {...} TopoID:F_0_0_0_6 Unit Cycles=19327363319 Total Cycles:19327363319
            LogicLatency: 744, GlueLatency: 19327362575, LogicLatencyIteration: 0, GlueLatencyIteration: 0
Function: TopoID:F_0_0_0_6 Unit Cycles:19327363319 LogicLatency:744 GlueLatency:19327362575
  (0,0) memcpy_wide_bus_read_int_2d_4_512(c_buf_0,0,0,(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_33_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) memcpy_wide_bus_read_int_2d_4_512(a_buf_0,0,0,(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_34_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) memcpy_wide_bus_read_int_2d_4_512(b_buf_0,0,0,(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_35_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) for(int j = 0;;,j < 250;,j++) TopoID:L_0_0_0_6_2_0_39 II:1 IL:1 UF:1 Flat:0 TCStatic:250 Unit Cycles:250 Total Cycles:250
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) memcpy_wide_bus_write_int_2d_4_512((merlin_uint_512 *)c,c_buf_0,0,0,(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_40_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) for(int j = 0;;,j < 250 + -inc / 4;,j++) TopoID:L_0_0_0_6_2_0_41 II:18 IL:1 UF:1 Flat:0 TCStatic:1073742073 Unit Cycles:19327357297 Total Cycles:19327357297
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) {for(int j =(1000 + -inc) / 4 * 4;j < 1000 - inc;j++) {#pragma HLS pipeline#pragma HLS LOOP_TRIPCOUNT max=3if(inc < 100) {int tmp_7;int tmp_4;int tmp_1;tmp_1 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)a,(j * 4));tmp_4 = memcpy_wide_bus_single_read_int_512((merlin_uint_512 *)b,(j * 4));tmp_7 = tmp_1 + tmp_4;memcpy_wide_bus_single_write_int_512((merlin_uint_512 *)c,tmp_7,(4 * j));}}} TopoID:X_0_0_0_6_2_0_42 Unit Cycles=31 Total Cycles:31
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(int j =(1000 + -inc) / 4 * 4;;,j < 1000 - inc;,j++) TopoID:L_0_0_0_6_2_0_42_0 II:15 IL:1 UF:1 Flat:0 TCStatic:3 Unit Cycles:31 Total Cycles:31
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3, GlueLatencyIteration: 0
  (7,0) memcpy_wide_bus_read_int_512(&c_buf_2[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_43_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (8,0) memcpy_wide_bus_read_int_512(&a_buf_2[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_44_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (9,0) memcpy_wide_bus_read_int_512(&b_buf_2[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_45_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (10,0) for(int j = 0;;,j < 1000;,j++) TopoID:L_0_0_0_6_2_0_46 II:1 IL:1 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1000 Total Cycles:1000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (11,0) memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_2[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_47_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (12,0) memcpy_wide_bus_read_int_512(&c_buf_1[0],(merlin_uint_512 *)c,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_48_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (13,0) memcpy_wide_bus_read_int_512(&a_buf_1[0],(merlin_uint_512 *)a,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_49_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (14,0) memcpy_wide_bus_read_int_512(&b_buf_1[0],(merlin_uint_512 *)b,(0 * 4),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_50_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (15,0) for(int j = 0;;,j < 1000;,j++) TopoID:L_0_0_0_6_2_0_51 II:4 IL:1 UF:1 Flat:0 TCStatic:1000 Unit Cycles:3997 Total Cycles:3997
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (16,0) memcpy_wide_bus_write_int_512((merlin_uint_512 *)c,&c_buf_1[0],(4 * 0),sizeof(int ) *((unsigned long )1000),1000LL) TopoID:X_0_0_0_6_2_0_52_0 Unit Cycles=65 Total Cycles:0
            LogicLatency: 62, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (17,0) for(int j = 0;;,j < 1000 - inc;,j++) TopoID:L_0_0_0_6_2_0_53 II:17 IL:1 UF:1 Flat:0 TCStatic:1 Unit Cycles:0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[INFO] ========================================================
[INFO] 4. Merge Json file.
[INFO] ========================================================
[INFO] Writing performance report : step1.json
ID = F_0_0_0_6
Report unit number = 0
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 19327363319
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
{
    "F_0_0_0_6": {
        "serially_execution":"0",
        "CYCLE_BURST":"750",
        "CYCLE_COMPUTE":"19327363319",
    "CYCLE_UNIT":"19327363319",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_33_0
Report unit number = 1
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_33_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_34_0
Report unit number = 2
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_34_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_35_0
Report unit number = 3
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_35_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_39
Report unit number = 4
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 250
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_39": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"250",
    "CYCLE_UNIT":"250",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"250",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_6_2_0_39_3_1
Report unit number = 5
    "L_0_0_0_6_2_0_39_3_1": {
        "CYCLE_UNIT":"ignore",
        "CYCLE_TOT":"ignore",
        "DBW":"ignore",
        "trip-count":"4",
        "unroll-factor":"4",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_40_0
Report unit number = 6
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_40_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_41
Report unit number = 7
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 19327357297
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_41": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"19327357297",
    "CYCLE_UNIT":"19327357297",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1073742073",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_6_2_0_41_3_1
Report unit number = 8
    "L_0_0_0_6_2_0_41_3_1": {
        "CYCLE_UNIT":"ignore",
        "CYCLE_TOT":"ignore",
        "DBW":"ignore",
        "trip-count":"4",
        "unroll-factor":"4",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_41_3_1_3_1_1_3_0_1
Report unit number = 9
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_41_3_1_3_1_1_3_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_41_3_1_3_1_1_4_0_1
Report unit number = 10
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_41_3_1_3_1_1_4_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_41_3_1_3_1_1_6_0
Report unit number = 11
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_41_3_1_3_1_1_6_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_42_0
Report unit number = 12
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 31
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_42_0": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"31",
    "CYCLE_UNIT":"31",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"3",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_6_2_0_42_0_3_2_1_3_0_1
Report unit number = 13
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_42_0_3_2_1_3_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_42_0_3_2_1_4_0_1
Report unit number = 14
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_42_0_3_2_1_4_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_42_0_3_2_1_6_0
Report unit number = 15
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_42_0_3_2_1_6_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_43_0
Report unit number = 16
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_43_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_44_0
Report unit number = 17
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_44_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_45_0
Report unit number = 18
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_45_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_46
Report unit number = 19
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_46": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1000",
    "CYCLE_UNIT":"1000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_6_2_0_47_0
Report unit number = 20
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_47_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_48_0
Report unit number = 21
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_48_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_49_0
Report unit number = 22
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_49_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_50_0
Report unit number = 23
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_50_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_51
Report unit number = 24
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 3997
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_51": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"3997",
    "CYCLE_UNIT":"3997",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_6_2_0_52_0
Report unit number = 25
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_52_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_53
Report unit number = 26
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_53": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_6_2_0_53_3_4_0_1
Report unit number = 27
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_53_3_4_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_53_3_5_0_1
Report unit number = 28
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_53_3_5_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_53_3_6_0_1
Report unit number = 29
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_53_3_6_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_53_3_8_0
Report unit number = 30
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_53_3_8_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = 
Report unit number = 31
ID = 
Report unit number = 32
ID = F_0_0_0_6
Report unit number = 33
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 19327363319
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "TOP_vec_add_kernel": {
        "CYCLE_UNIT":"19327363319",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0",
        "func_name": "vec_add_kernel",
             "topo_id": "TOP_vec_add_kernel",
             "type":"top_kernel"
     },
ID = F_0_0_0_6
Report unit number = 34
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 19327363319
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_6": {
        "serially_execution":"0",
        "CYCLE_BURST":"750",
        "CYCLE_COMPUTE":"19327363319",
    "CYCLE_UNIT":"19327363319",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_33_0
Report unit number = 35
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_33_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_34_0
Report unit number = 36
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_34_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_35_0
Report unit number = 37
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_35_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_39
Report unit number = 38
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 250
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_39": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"250",
    "CYCLE_UNIT":"250",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"250",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_6_2_0_39_3_1
Report unit number = 39
    "L_0_0_0_6_2_0_39_3_1": {
        "CYCLE_UNIT":"ignore",
        "CYCLE_TOT":"ignore",
        "DBW":"ignore",
        "trip-count":"4",
        "unroll-factor":"4",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_40_0
Report unit number = 40
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_40_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_41
Report unit number = 41
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 19327357297
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_41": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"19327357297",
    "CYCLE_UNIT":"19327357297",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1073742073",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_6_2_0_41_3_1
Report unit number = 42
    "L_0_0_0_6_2_0_41_3_1": {
        "CYCLE_UNIT":"ignore",
        "CYCLE_TOT":"ignore",
        "DBW":"ignore",
        "trip-count":"4",
        "unroll-factor":"4",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_41_3_1_3_1_1_3_0_1
Report unit number = 43
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_41_3_1_3_1_1_3_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_41_3_1_3_1_1_4_0_1
Report unit number = 44
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_41_3_1_3_1_1_4_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_41_3_1_3_1_1_6_0
Report unit number = 45
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_41_3_1_3_1_1_6_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_42_0
Report unit number = 46
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 31
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_42_0": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"31",
    "CYCLE_UNIT":"31",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"3",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_6_2_0_42_0_3_2_1_3_0_1
Report unit number = 47
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_42_0_3_2_1_3_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_42_0_3_2_1_4_0_1
Report unit number = 48
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_42_0_3_2_1_4_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_42_0_3_2_1_6_0
Report unit number = 49
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_42_0_3_2_1_6_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_43_0
Report unit number = 50
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_43_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_44_0
Report unit number = 51
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_44_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_45_0
Report unit number = 52
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_45_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_46
Report unit number = 53
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_46": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1000",
    "CYCLE_UNIT":"1000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_6_2_0_47_0
Report unit number = 54
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_47_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_48_0
Report unit number = 55
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_48_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_49_0
Report unit number = 56
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_49_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_50_0
Report unit number = 57
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_50_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_51
Report unit number = 58
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 3997
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_51": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"3997",
    "CYCLE_UNIT":"3997",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_6_2_0_52_0
Report unit number = 59
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_52_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"65",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_6_2_0_53
Report unit number = 60
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_6_2_0_53": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_6_2_0_53_3_4_0_1
Report unit number = 61
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_53_3_4_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_53_3_5_0_1
Report unit number = 62
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_53_3_5_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_53_3_6_0_1
Report unit number = 63
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_53_3_6_0_1": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_6_2_0_53_3_8_0
Report unit number = 64
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_6_2_0_53_3_8_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    }
}
Finish write file step1.json
#################################################
Delete some attribtues from json step1.json.
#################################################
Write output.json file.


#################################################
Delete some attribtues from json gen_token.json.
#################################################
Write output.json file.


[INFO] Performance estimation complete

====== Typedef replace ========>
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
[INFO] Beginning merging simulation output step1.json and annotated report gen_token.json into performance report perf_est.json
[INFO] Reading simulation output : step1.json
[INFO] Reading annotated report : gen_token.json
[INFO] Generating output file : perf_est.json
[INFO] Merge complete
cd .//lc_sim; merlin_safe_exec mars_opt __merlinkernel_vec_add_kernel.cpp  -e c -p performance_estimation  -I\/curr\/hanhu\/unit_test\/test_case\/test0  -I\/curr\/hanhu\/unit_test\/test_case\/test0\/src\/  -I\/curr\/hanhu\/WORK\/Merlin_Compiler\/trunk\/build\/..\/\/mars-gen\/lib\/merlin -a MERGE -a step1.json -a gen_token.json -a perf_est.json :: __merlinkernel_vec_add_kernel.cpp  :: 0
