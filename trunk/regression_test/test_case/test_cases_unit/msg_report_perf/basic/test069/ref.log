cmd = mars_opt __merlinkernel_vec_add_kernel.cpp  -e c -p performance_estimation  -I\/curr\/hanhu\/unit_test\/test_case\/test0  -I\/curr\/hanhu\/unit_test\/test_case\/test0\/src\/  -I\/curr\/hanhu\/WORK\/Merlin_Compiler\/trunk\/build\/..\/\/mars-gen\/lib\/merlin -a STATIC -a kernel_list.json -a gen_token.json -a config.json -a step1.json -a aocl

====== Typedef replace ========>
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_msm_node_0() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_msm_node_0() {...}
while cond: SgExprStatement:1;
[INFO] Beginning static performance estimation



[INFO] ========================================================
[INFO] 1. Create blocks..
[INFO] ========================================================
[INFO] Reading annotated report : gen_token.json
[INFO] Reading annotated report : gen_token.json
[EST ALGO][MakeNewBlocks, 659] Create TOP TASK.
[EST ALGO][MakeNewBlocks, 648] Create top kernel: F_0_0_0_29
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 402] Create a kernel block: SgFunctionDeclaration:void vec_add_kernel(int * __re...
[EST ALGO][MakeNewBlocks, 655] Create sub kernel: F_0_0_0_29
[EST ALGO][MakeNewBlocks, 678] ExtPortList: 
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:a
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:b
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:c
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void vec_add_kernel(int * __re...
Function body = {int _memcpy_i2_1;int _memcpy_i2_0;int _memcpy_i1_1;int _memcpy_i1_0;int _memcpy_i0_1;int _memcpy_i0_0;#pragma ACCEL interface variable=a max_depth=2000000 depth=2000000#pragma ACCEL interface variable=b max_depth=2000000 depth=2000000#pragma ACCEL interface variable=c max_depth=2000000 depth=2000000int i;#pragma unroll 1for(i = 0;i < 125;i++) {int c_buf_0[16][1000];int b_buf_0[16][1000];int a_buf_0[16][1000];{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}msm_port_a_buf_0_msm_node_0_0(a_buf_0,0);msm_port_b_buf_0_msm_node_0_0(b_buf_0,0);msm_port_i_sub_l1_msm_node_0_0(0);#pragma ACCEL mem_fence autokernel=msm_node_0 parent=vec_add_kernel depth=16msm_port_c_buf_0_msm_node_0_0(c_buf_0,0);{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 426] Create a basic block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_...
[EST ALGO][AddChildBlock_AOCL, 297] Find a basic block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
Find a external reference = a
[EST ALGO][AddChildBlock_AOCL, 533]Read data size = 1000, r_ub = 999, r_lb = 0, for : a
[EST ALGO][AddChildBlock_AOCL, 538]Write data size = 0, w_ub = 0, w_lb = 0, for : a
[EST ALGO][AddChildBlock_AOCL, 565]One ref data size = 32000 for : a
[EST ALGO][AddChildBlock_AOCL, 568]One ref type size = 32 for : a
[EST ALGO][AddChildBlock_AOCL, 426] Create a basic block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_...
[EST ALGO][AddChildBlock_AOCL, 297] Find a basic block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
Find a external reference = b
[EST ALGO][AddChildBlock_AOCL, 533]Read data size = 1000, r_ub = 999, r_lb = 0, for : b
[EST ALGO][AddChildBlock_AOCL, 538]Write data size = 0, w_ub = 0, w_lb = 0, for : b
[EST ALGO][AddChildBlock_AOCL, 565]One ref data size = 32000 for : b
[EST ALGO][AddChildBlock_AOCL, 568]One ref type size = 32 for : b
[EST ALGO][AddChildBlock_AOCL, 469] Create a function call block: SgExprStatement:msm_port_a_buf_0_msm_node_0_0(...
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node...
[EST ALGO][MakeNewBlocks, 653] Create func decl: F_0_0_0_25
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node...
Function body = {int __i_sub_l1;__i_sub_l1 = _i_sub_l1;int _j_1;for(_j_1 = 0;_j_1 < 1000;_j_1++) {int _i_sub_l1_0;{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1+...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1+...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 426] Create a basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0...
[EST ALGO][AddChildBlock_AOCL, 297] Find a basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 469] Create a function call block: SgExprStatement:msm_port_b_buf_0_msm_node_0_0(...
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node...
[EST ALGO][MakeNewBlocks, 653] Create func decl: F_0_0_0_26
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node...
Function body = {int __i_sub_l1;__i_sub_l1 = _i_sub_l1;int _j_2;for(_j_2 = 0;_j_2 < 1000;_j_2++) {int _i_sub_l1_0;{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2+...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2+...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 426] Create a basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0...
[EST ALGO][AddChildBlock_AOCL, 297] Find a basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 469] Create a function call block: SgExprStatement:msm_port_i_sub_l1_msm_node_0_0...
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_nod...
[EST ALGO][MakeNewBlocks, 653] Create func decl: F_0_0_0_28
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_nod...
Function body = {int _i_sub_l1_0;{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 426] Create a basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0...
[EST ALGO][AddChildBlock_AOCL, 297] Find a basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 469] Create a function call block: SgExprStatement:msm_port_c_buf_0_msm_node_0_0(...
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node...
[EST ALGO][MakeNewBlocks, 653] Create func decl: F_0_0_0_27
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node...
Function body = {int __i_sub_l1;__i_sub_l1 = _i_sub_l1;int _j_3;for(_j_3 = 0;_j_3 < 1000;_j_3++) {int _i_sub_l1_0;{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3+...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3+...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 426] Create a basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0...
[EST ALGO][AddChildBlock_AOCL, 297] Find a basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 426] Create a basic block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_...
[EST ALGO][AddChildBlock_AOCL, 297] Find a basic block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i...
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i...
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
Find a external reference = c
[EST ALGO][AddChildBlock_AOCL, 533]Read data size = 0, r_ub = 0, r_lb = 0, for : c
[EST ALGO][AddChildBlock_AOCL, 538]Write data size = 1000, w_ub = 999, w_lb = 0, for : c
[EST ALGO][AddChildBlock_AOCL, 565]One ref data size = 32000 for : c
[EST ALGO][AddChildBlock_AOCL, 568]One ref type size = 32 for : c
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.



[INFO] ========================================================
[INFO] 2. Reading annotated report : gen_token.json
[INFO] ========================================================
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 8, ID = F_0_0_0_29, void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_29_2_0_11, for(i = 0;i < 125;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 125, TC_ub = 125
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 125
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 5
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 6, ID = X_0_0_0_29_2_0_11_3_3, {for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_29_2_0_11_3_3_0, for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 16, TC_ub = 16
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 16
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 488]----Setting parent for(i = 0;i < 125;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 5
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_29_2_0_11_3_3_0_3_2, for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 1000, TC_ub = 1000
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1000
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 488]----Setting parent for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 50
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 1. burst width = 2048
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 295
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 6, ID = X_0_0_0_29_2_0_11_3_4, {for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_29_2_0_11_3_4_0, for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 16, TC_ub = 16
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 16
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 488]----Setting parent for(i = 0;i < 125;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 5
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_29_2_0_11_3_4_0_3_2, for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 1000, TC_ub = 1000
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1000
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 488]----Setting parent for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 50
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 1. burst width = 2048
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 293
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_29_2_0_11_3_5_0, msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_29_2_0_11_3_6_0, msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_29_2_0_11_3_7_0, msm_port_i_sub_l1_msm_node_0_0(0)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_29_2_0_11_3_9_0, msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 6, ID = X_0_0_0_29_2_0_11_3_10, {for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_29_2_0_11_3_10_0, for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 16, TC_ub = 16
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 16
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 488]----Setting parent for(i = 0;i < 125;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 5
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_29_2_0_11_3_10_0_3_2, for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 1000, TC_ub = 1000
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1000
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 488]----Setting parent for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 50
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 1. burst width = 2048
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 40
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = F_0_0_0_25, void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_25_2_0_3, for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 1000, TC_ub = 1000
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1000
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 465]----Setting parent for(i = 0;i < 125;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 37
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 6, ID = X_0_0_0_25_2_0_3_3_1, {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_25_2_0_3_3_1_1, for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 16, TC_ub = 16
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 16
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 16
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = F_0_0_0_26, void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_26_2_0_3, for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 1000, TC_ub = 1000
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1000
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 465]----Setting parent for(i = 0;i < 125;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 37
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 6, ID = X_0_0_0_26_2_0_3_3_1, {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_26_2_0_3_3_1_1, for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 16, TC_ub = 16
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 16
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 16
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = F_0_0_0_28, void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 6, ID = X_0_0_0_28_2_0_1, {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_28_2_0_1_1, for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 16, TC_ub = 16
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 16
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 16
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = F_0_0_0_27, void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_27_2_0_3, for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 1000, TC_ub = 1000
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 1000
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][TraceUpToSetHaveNotUnrollLoopOnly, 465]----Setting parent for(i = 0;i < 125;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 40
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 6, ID = X_0_0_0_27_2_0_3_3_1, {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_27_2_0_3_3_1_1, for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
TC = 16, TC_ub = 16
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 16
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 16
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 0
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 1
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[INFO] ========================================================
[INFO] 3. Compute cycles.
[INFO] ========================================================
[INFO] Reading external memory parameter file: config.json
[WARNING] RBW_GBs not found.
[WARNING] WBW_GBs not found.
[WARNING] RLat_ns not found.
[WARNING] WLat_ns not found.
[WARNING] RandLat_ns not found.
RBW_GBs=10.300000
WBW_GBs=9.600000
RLat_ns=434.000000
WLat_ns=325.000000
RandLat_ns=62.000000
FPGACLK_GHz=0.250000
MAX_BITWIDTH=512.000000
LATENCY=240.000000
Find Top Block = F_0_0_0_29
**********************************************************
3.1 Update cycles by compute all data
**********************************************************
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1574] Start compute cycles for TASK. 
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1586] Start compute cycles for top kernel: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_29 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_29 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_29 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_29 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(i = 0;i < 125;i++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_29_2_0_11 - schedule sequntial size: 7
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1812] Start compute cycles for basic block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_29_2_0_11_3_3 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_29_2_0_11_3_3 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_29_2_0_11_3_3_0 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11_3_3_0 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
111 Final IL = 1, vendor latency = 295
[EST ALGO][ComputeStaticCyclesForLoop, 1135] Find memory burst loop, set II=1, IL=1.
Final IL = 1, vendor latency = 295
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1000, UnrollFactor=50, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=20
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}, Cycles: 20, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}, Cycles: 20, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 20, LogicTemp: 0, GlueTemp: 0, TotalCycles: 20, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_29_2_0_11_3_3_0 - schedule spawn size: 0
111 Final IL = 20, vendor latency = 5
Final IL = 20, vendor latency = 5
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=16, UnrollFactor=1, II=0, IL=20, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=320
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}, Cycles: 320, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}, Cycles: 320, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 320, LogicTemp: 0, GlueTemp: 0, TotalCycles: 320, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_29_2_0_11_3_3 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1823] Finish compute cycles for basic block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}, Cycles: 320
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 320, LogicTemp: 0, GlueTemp: 0, TotalCycles: 320, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=1 ,k=0 ,Block=SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1812] Start compute cycles for basic block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_29_2_0_11_3_4 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_29_2_0_11_3_4 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_29_2_0_11_3_4_0 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11_3_4_0 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
111 Final IL = 1, vendor latency = 293
[EST ALGO][ComputeStaticCyclesForLoop, 1135] Find memory burst loop, set II=1, IL=1.
Final IL = 1, vendor latency = 293
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1000, UnrollFactor=50, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=20
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}, Cycles: 20, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}, Cycles: 20, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 20, LogicTemp: 0, GlueTemp: 0, TotalCycles: 20, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_29_2_0_11_3_4_0 - schedule spawn size: 0
111 Final IL = 20, vendor latency = 5
Final IL = 20, vendor latency = 5
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=16, UnrollFactor=1, II=0, IL=20, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=320
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}, Cycles: 320, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}, Cycles: 320, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 320, LogicTemp: 0, GlueTemp: 0, TotalCycles: 320, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_29_2_0_11_3_4 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1823] Finish compute cycles for basic block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}, Cycles: 320
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 320, LogicTemp: 0, GlueTemp: 0, TotalCycles: 640, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=2 ,k=0 ,Block=SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_25 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_25 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_25_2_0_3 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_25_2_0_3 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1812] Start compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_25_2_0_3_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_25_2_0_3_3_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
111 Final IL = 1, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=16, UnrollFactor=16, II=0, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=1
Find fully unroll loop with IL > 1.
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_25_2_0_3_3_1 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1823] Finish compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}, Cycles: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_25_2_0_3 - schedule spawn size: 0
111 Final IL = 0, vendor latency = 37
Final IL = 37, vendor latency = 37
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1000, UnrollFactor=1, II=1, IL=37, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=1036
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}, Cycles: 1036, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}, Cycles: 1036, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1036, LogicTemp: 0, GlueTemp: 0, TotalCycles: 1036, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_25 - schedule spawn size: 0
Logic latency = 0, Unit cycles = 1036, AccCycles = 1036
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}, Cycles: 1036, LogicLatency: 0, GlueLatency: 1036
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0), Cycles: 1036, LogicLatency: 1036, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1036, LogicTemp: 1036, GlueTemp: 0, TotalCycles: 1676, LogicLatency: 1036, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=3 ,k=0 ,Block=SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_26 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_26 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_26_2_0_3 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_26_2_0_3 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1812] Start compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_26_2_0_3_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_26_2_0_3_3_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
111 Final IL = 1, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=16, UnrollFactor=16, II=0, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=1
Find fully unroll loop with IL > 1.
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_26_2_0_3_3_1 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1823] Finish compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}, Cycles: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_26_2_0_3 - schedule spawn size: 0
111 Final IL = 0, vendor latency = 37
Final IL = 37, vendor latency = 37
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1000, UnrollFactor=1, II=1, IL=37, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=1036
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}, Cycles: 1036, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}, Cycles: 1036, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1036, LogicTemp: 0, GlueTemp: 0, TotalCycles: 1036, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_26 - schedule spawn size: 0
Logic latency = 0, Unit cycles = 1036, AccCycles = 1036
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}, Cycles: 1036, LogicLatency: 0, GlueLatency: 1036
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0), Cycles: 1036, LogicLatency: 1036, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1036, LogicTemp: 1036, GlueTemp: 0, TotalCycles: 2712, LogicLatency: 2072, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=4 ,k=0 ,Block=SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_28 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_28 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1812] Start compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_28_2_0_1 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_28_2_0_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
111 Final IL = 1, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=16, UnrollFactor=16, II=0, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=1
Find fully unroll loop with IL > 1.
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_28_2_0_1 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1823] Finish compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}, Cycles: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_28 - schedule spawn size: 0
Logic latency = 0, Unit cycles = 0, AccCycles = 0
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}, Cycles: 1, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0), Cycles: 1, LogicLatency: 1, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1, LogicTemp: 1, GlueTemp: 0, TotalCycles: 2713, LogicLatency: 2073, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=5 ,k=0 ,Block=SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_27 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_27 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_27_2_0_3 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_27_2_0_3 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1812] Start compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_27_2_0_3_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_27_2_0_3_3_1 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
111 Final IL = 1, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=16, UnrollFactor=16, II=0, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=1
Find fully unroll loop with IL > 1.
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, Cycles: 0, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_27_2_0_3_3_1 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1823] Finish compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}, Cycles: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 0, LogicTemp: 0, GlueTemp: 0, TotalCycles: 0, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_27_2_0_3 - schedule spawn size: 0
111 Final IL = 0, vendor latency = 40
Final IL = 40, vendor latency = 40
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1000, UnrollFactor=1, II=1, IL=40, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=1039
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}, Cycles: 1039, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}, Cycles: 1039, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1039, LogicTemp: 0, GlueTemp: 0, TotalCycles: 1039, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_27 - schedule spawn size: 0
Logic latency = 0, Unit cycles = 1039, AccCycles = 1039
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}, Cycles: 1039, LogicLatency: 0, GlueLatency: 1039
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0), Cycles: 1039, LogicLatency: 1039, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 1039, LogicTemp: 1039, GlueTemp: 0, TotalCycles: 3752, LogicLatency: 3112, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=6 ,k=0 ,Block=SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1812] Start compute cycles for basic block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]X_0_0_0_29_2_0_11_3_10 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]X_0_0_0_29_2_0_11_3_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]L_0_0_0_29_2_0_11_3_10_0 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]L_0_0_0_29_2_0_11_3_10_0 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
111 Final IL = 1, vendor latency = 40
[EST ALGO][ComputeStaticCyclesForLoop, 1135] Find memory burst loop, set II=1, IL=1.
Final IL = 1, vendor latency = 40
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=1000, UnrollFactor=50, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=20
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}, Cycles: 20, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}, Cycles: 20, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 20, LogicTemp: 0, GlueTemp: 0, TotalCycles: 20, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_29_2_0_11_3_10_0 - schedule spawn size: 0
111 Final IL = 20, vendor latency = 5
Final IL = 20, vendor latency = 5
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=16, UnrollFactor=1, II=0, IL=20, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=320
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}, Cycles: 320, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}, Cycles: 320, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 320, LogicTemp: 0, GlueTemp: 0, TotalCycles: 320, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]X_0_0_0_29_2_0_11_3_10 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1823] Finish compute cycles for basic block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}, Cycles: 320
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 320, LogicTemp: 0, GlueTemp: 0, TotalCycles: 4072, LogicLatency: 3112, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]L_0_0_0_29_2_0_11 - schedule spawn size: 0
111 Final IL = 4072, vendor latency = 5
Final IL = 4072, vendor latency = 5
[EST ALGO][ComputeStaticCyclesForLoop, 1230] Loop not pipelined, TC=125, UnrollFactor=1, II=0, IL=4072, LogicLatencyIteration=3112, GlueLatencyIteration=0, CycleUnitStatic=509000
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(i = 0;i < 125;i++) {...}, Cycles: 509000, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3112, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(i = 0;i < 125;i++) {...}, Cycles: 509000, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3112, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 509000, LogicTemp: 0, GlueTemp: 0, TotalCycles: 509000, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_29 - schedule spawn size: 0
Logic latency = 0, Unit cycles = 509000, AccCycles = 509000
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}, Cycles: 509000, LogicLatency: 0, GlueLatency: 509000
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 509000, LogicTemp: 0, GlueTemp: 509000, TotalCycles: 509000, LogicLatency: 0, GlueLatency: 509000
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_29 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1599] Finish compute cycles for top kernel: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}, Cycles: 509000
[EST ALGO][ComputeStaticCycleHelper, 1579] Unit cycle of top kernel:509000
[EST ALGO][ComputeStaticCycleHelper, 1580] FIRST_CYCLES=509000
[EST ALGO][ComputeStaticCycles, 38] Print schedule for initial framework.

FuncDecl(0):void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_25
-Schedule:
Function: TopoID:F_0_0_0_25 Unit Cycles:1036 LogicLatency:0 GlueLatency:1036
  (0,0) for(_j_1 = 0;;,_j_1 < 1000;,_j_1++) TopoID:L_0_0_0_25_2_0_3 II:1 IL:37 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1036 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(1):void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_26
-Schedule:
Function: TopoID:F_0_0_0_26 Unit Cycles:1036 LogicLatency:0 GlueLatency:1036
  (0,0) for(_j_2 = 0;;,_j_2 < 1000;,_j_2++) TopoID:L_0_0_0_26_2_0_3 II:1 IL:37 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1036 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(2):void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...} TopoID:F_0_0_0_28
-Schedule:
Function: TopoID:F_0_0_0_28 Unit Cycles:1 LogicLatency:0 GlueLatency:0
  (0,0) {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}} TopoID:X_0_0_0_28_2_0_1 Unit Cycles=0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_i_sub_l1_0 =((int )0);;,_i_sub_l1_0 <=((int )15);,++_i_sub_l1_0) TopoID:L_0_0_0_28_2_0_1_1 II:0 IL:1 UF:16 Flat:0 TCStatic:16 Unit Cycles:0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(3):void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_27
-Schedule:
Function: TopoID:F_0_0_0_27 Unit Cycles:1039 LogicLatency:0 GlueLatency:1039
  (0,0) for(_j_3 = 0;;,_j_3 < 1000;,_j_3++) TopoID:L_0_0_0_27_2_0_3 II:1 IL:40 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1039 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(4):void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...} TopoID:F_0_0_0_29
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_29 Unit Cycles:509000 LogicLatency:0 GlueLatency:509000
  (0,0) for(i = 0;;,i < 125;,i++) TopoID:L_0_0_0_29_2_0_11 II:0 IL:4072 UF:1 Flat:0 TCStatic:125 Unit Cycles:509000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3112, GlueLatencyIteration: 0
  (0,0) {for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}} TopoID:X_0_0_0_29_2_0_11_3_3 Unit Cycles=320 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i0_1 = 0;;,_memcpy_i0_1 < 16;,++_memcpy_i0_1) TopoID:L_0_0_0_29_2_0_11_3_3_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:320 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i0_0 = 0;;,_memcpy_i0_0 < 1000;,++_memcpy_i0_0) TopoID:L_0_0_0_29_2_0_11_3_3_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:20 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) {for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}} TopoID:X_0_0_0_29_2_0_11_3_4 Unit Cycles=320 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i1_1 = 0;;,_memcpy_i1_1 < 16;,++_memcpy_i1_1) TopoID:L_0_0_0_29_2_0_11_3_4_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:320 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i1_0 = 0;;,_memcpy_i1_0 < 1000;,++_memcpy_i1_0) TopoID:L_0_0_0_29_2_0_11_3_4_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:20 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) msm_port_a_buf_0_msm_node_0_0(a_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_5_0 Unit Cycles=1036 Total Cycles:0
            LogicLatency: 1036, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) msm_port_b_buf_0_msm_node_0_0(b_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_6_0 Unit Cycles=1036 Total Cycles:0
            LogicLatency: 1036, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) msm_port_i_sub_l1_msm_node_0_0(0) TopoID:X_0_0_0_29_2_0_11_3_7_0 Unit Cycles=1 Total Cycles:0
            LogicLatency: 1, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) msm_port_c_buf_0_msm_node_0_0(c_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_9_0 Unit Cycles=1039 Total Cycles:0
            LogicLatency: 1039, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) {for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}} TopoID:X_0_0_0_29_2_0_11_3_10 Unit Cycles=320 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i2_1 = 0;;,_memcpy_i2_1 < 16;,++_memcpy_i2_1) TopoID:L_0_0_0_29_2_0_11_3_10_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:320 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i2_0 = 0;;,_memcpy_i2_0 < 1000;,++_memcpy_i2_0) TopoID:L_0_0_0_29_2_0_11_3_10_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:20 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
**********************************************************
3.2 Update cycles by memory burst
**********************************************************
**********************************************************
3.2.1 Update burst data size
**********************************************************
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 7
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2093] Start compute for loop: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
one ref = a bitwidth = 512 OneDataSize 1 = 32000 Cycles = 62
[EST ALGO][UpdateBurstCyclesBySelf, 2157] Finish compute for loop: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 512000, for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 512000, for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 512000, for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 512000, for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2093] Start compute for loop: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
one ref = b bitwidth = 512 OneDataSize 1 = 32000 Cycles = 62
[EST ALGO][UpdateBurstCyclesBySelf, 2157] Finish compute for loop: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 512000, for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 512000, for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 512000, for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 512000, for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2093] Start compute for loop: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
one ref = c bitwidth = 512 OneDataSize 1 = 32000 Cycles = 62
[EST ALGO][UpdateBurstCyclesBySelf, 2157] Finish compute for loop: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 32000, VarRefBitWidth = 512, for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 32000, for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 512000, for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 512000, for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 512000, for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 512000, for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 192000000, for block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 192000000, for block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgForStatement:for(i = 0;i < 125;i++) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 192000000, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 192000000, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 192000000, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 192000000, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
**********************************************************
3.2.2 Update burst cycles factor
**********************************************************
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 9, block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 192000000, Parent Data Size = 192000000, for block = void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 192000000, Parent Data Size = 192000000, for block = void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 8, block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 7
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 6, block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 32000, Parent Data Size = 512000, for block = for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
parent TCStatic = 16
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 512000, Parent Data Size = 512000, for block = for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 6, block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 32000, Parent Data Size = 512000, for block = for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
parent TCStatic = 16
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 512000, Parent Data Size = 512000, for block = for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
parent TCStatic = 1000
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 6, block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
parent TCStatic = 1000
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 6, block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 6, block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
parent TCStatic = 1000
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 6, block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 0, Parent Data Size = 0, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 0, Parent Data Size = 0, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 6, block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 32000, Parent Data Size = 512000, for block = for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
parent TCStatic = 16
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 512000, Parent Data Size = 512000, for block = for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
**********************************************************
3.2.3 Update burst cycles
**********************************************************
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 7
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 62, CycleUnitStaticOrg = 20, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 62
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 62
Prefinish block Cycles calculation: ChildBurstCyclesSum=62, ChildUnitCyclesSum=62, for block: for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=992, ChildUnitCyclesSum=62, for block: for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
Child unit cycles sum = 62, Child burst cycles sum = 992, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1000, CycleUnitStaticOrg = 320, BurstCycles = 1000, SubBlocksCycles = 992, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
ChildBurstCyclesMax = 1000, ChildUnitCyclesMax = 1000
Finish calculate for one parallel scope: Child burst cycles max = 1000, Child unit cycles max = 1000
Prefinish block Cycles calculation: ChildBurstCyclesSum=1000, ChildUnitCyclesSum=1000, for block: {for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
Finish block Cycles calculation: ChildBurstCyclesSum=1000, ChildUnitCyclesSum=1000, for block: {for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
Child unit cycles sum = 1000, Child burst cycles sum = 1000, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1000, CycleUnitStaticOrg = 320, BurstCycles = 1000, SubBlocksCycles = 1000, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
ChildBurstCyclesMax = 1000, ChildUnitCyclesMax = 1000
Finish calculate for one parallel scope: Child burst cycles max = 1000, Child unit cycles max = 1000
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 62, CycleUnitStaticOrg = 20, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 62
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 62
Prefinish block Cycles calculation: ChildBurstCyclesSum=62, ChildUnitCyclesSum=62, for block: for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=992, ChildUnitCyclesSum=62, for block: for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
Child unit cycles sum = 62, Child burst cycles sum = 992, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1000, CycleUnitStaticOrg = 320, BurstCycles = 1000, SubBlocksCycles = 992, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
ChildBurstCyclesMax = 1000, ChildUnitCyclesMax = 1000
Finish calculate for one parallel scope: Child burst cycles max = 1000, Child unit cycles max = 1000
Prefinish block Cycles calculation: ChildBurstCyclesSum=1000, ChildUnitCyclesSum=1000, for block: {for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
Finish block Cycles calculation: ChildBurstCyclesSum=1000, ChildUnitCyclesSum=1000, for block: {for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
Child unit cycles sum = 1000, Child burst cycles sum = 1000, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1000, CycleUnitStaticOrg = 320, BurstCycles = 1000, SubBlocksCycles = 1000, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
ChildBurstCyclesMax = 1000, ChildUnitCyclesMax = 1000
Finish calculate for one parallel scope: Child burst cycles max = 1000, Child unit cycles max = 1000
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1036, CycleUnitStaticOrg = 1036, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1036
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1036
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=1036, for block: void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=1036, for block: void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
Child unit cycles sum = 1036, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1036, CycleUnitStaticOrg = 1036, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1036
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1036
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1036, CycleUnitStaticOrg = 1036, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1036
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1036
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=1036, for block: void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=1036, for block: void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
Child unit cycles sum = 1036, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1036, CycleUnitStaticOrg = 1036, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1036
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1036
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1, CycleUnitStaticOrg = 1, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0)
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 0, CycleUnitStaticOrg = 0, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 0
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1039, CycleUnitStaticOrg = 1039, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1039
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1039
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=1039, for block: void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=1039, for block: void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
Child unit cycles sum = 1039, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1039, CycleUnitStaticOrg = 1039, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 1039
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 1039
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 62, CycleUnitStaticOrg = 20, BurstCycles = 62, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
ChildBurstCyclesMax = 62, ChildUnitCyclesMax = 62
Finish calculate for one parallel scope: Child burst cycles max = 62, Child unit cycles max = 62
Prefinish block Cycles calculation: ChildBurstCyclesSum=62, ChildUnitCyclesSum=62, for block: for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=992, ChildUnitCyclesSum=62, for block: for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
Child unit cycles sum = 62, Child burst cycles sum = 992, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1000, CycleUnitStaticOrg = 320, BurstCycles = 1000, SubBlocksCycles = 992, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
ChildBurstCyclesMax = 1000, ChildUnitCyclesMax = 1000
Finish calculate for one parallel scope: Child burst cycles max = 1000, Child unit cycles max = 1000
Prefinish block Cycles calculation: ChildBurstCyclesSum=1000, ChildUnitCyclesSum=1000, for block: {for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
Finish block Cycles calculation: ChildBurstCyclesSum=1000, ChildUnitCyclesSum=1000, for block: {for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
Child unit cycles sum = 1000, Child burst cycles sum = 1000, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 1000, CycleUnitStaticOrg = 320, BurstCycles = 1000, SubBlocksCycles = 1000, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
ChildBurstCyclesMax = 1000, ChildUnitCyclesMax = 1000
Finish calculate for one parallel scope: Child burst cycles max = 1000, Child unit cycles max = 1000
Prefinish block Cycles calculation: ChildBurstCyclesSum=3000, ChildUnitCyclesSum=6112, for block: for(i = 0;i < 125;i++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=375000, ChildUnitCyclesSum=6112, for block: for(i = 0;i < 125;i++) {...}
Child unit cycles sum = 6112, Child burst cycles sum = 375000, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 509000, CycleUnitStaticOrg = 509000, BurstCycles = 375000, SubBlocksCycles = 375000, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(i = 0;i < 125;i++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(i = 0;i < 125;i++) {...}
ChildBurstCyclesMax = 375000, ChildUnitCyclesMax = 509000
Finish calculate for one parallel scope: Child burst cycles max = 375000, Child unit cycles max = 509000
Prefinish block Cycles calculation: ChildBurstCyclesSum=375000, ChildUnitCyclesSum=509000, for block: void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=375000, ChildUnitCyclesSum=509000, for block: void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
Child unit cycles sum = 509000, Child burst cycles sum = 375000, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 509000, CycleUnitStaticOrg = 509000, BurstCycles = 375000, SubBlocksCycles = 375000, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
ChildBurstCyclesMax = 375000, ChildUnitCyclesMax = 509000
Finish calculate for one parallel scope: Child burst cycles max = 375000, Child unit cycles max = 509000
Prefinish block Cycles calculation: ChildBurstCyclesSum=375000, ChildUnitCyclesSum=509000, for block: void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=375000, ChildUnitCyclesSum=509000, for block: void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
Child unit cycles sum = 509000, Child burst cycles sum = 375000, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 509000, CycleUnitStaticOrg = 509000, BurstCycles = 375000, SubBlocksCycles = 375000, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][UpdateCycleByMemoryBurstTop, 92] Total cycle of top kernel:0
SECOND_CYCLES=509000
[EST ALGO][ComputeStaticCycles, 48] Print schedule for after memory burst updating.

FuncDecl(0):void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_25
-Schedule:
Function: TopoID:F_0_0_0_25 Unit Cycles:1036 LogicLatency:0 GlueLatency:1036
  (0,0) for(_j_1 = 0;;,_j_1 < 1000;,_j_1++) TopoID:L_0_0_0_25_2_0_3 II:1 IL:37 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1036 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(1):void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_26
-Schedule:
Function: TopoID:F_0_0_0_26 Unit Cycles:1036 LogicLatency:0 GlueLatency:1036
  (0,0) for(_j_2 = 0;;,_j_2 < 1000;,_j_2++) TopoID:L_0_0_0_26_2_0_3 II:1 IL:37 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1036 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(2):void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...} TopoID:F_0_0_0_28
-Schedule:
Function: TopoID:F_0_0_0_28 Unit Cycles:1 LogicLatency:0 GlueLatency:0
  (0,0) {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}} TopoID:X_0_0_0_28_2_0_1 Unit Cycles=0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_i_sub_l1_0 =((int )0);;,_i_sub_l1_0 <=((int )15);,++_i_sub_l1_0) TopoID:L_0_0_0_28_2_0_1_1 II:0 IL:1 UF:16 Flat:0 TCStatic:16 Unit Cycles:0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(3):void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_27
-Schedule:
Function: TopoID:F_0_0_0_27 Unit Cycles:1039 LogicLatency:0 GlueLatency:1039
  (0,0) for(_j_3 = 0;;,_j_3 < 1000;,_j_3++) TopoID:L_0_0_0_27_2_0_3 II:1 IL:40 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1039 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(4):void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...} TopoID:F_0_0_0_29
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_29 Unit Cycles:509000 LogicLatency:0 GlueLatency:509000
  (0,0) for(i = 0;;,i < 125;,i++) TopoID:L_0_0_0_29_2_0_11 II:0 IL:4072 UF:1 Flat:0 TCStatic:125 Unit Cycles:509000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3112, GlueLatencyIteration: 0
  (0,0) {for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}} TopoID:X_0_0_0_29_2_0_11_3_3 Unit Cycles=1000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i0_1 = 0;;,_memcpy_i0_1 < 16;,++_memcpy_i0_1) TopoID:L_0_0_0_29_2_0_11_3_3_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i0_0 = 0;;,_memcpy_i0_0 < 1000;,++_memcpy_i0_0) TopoID:L_0_0_0_29_2_0_11_3_3_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) {for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}} TopoID:X_0_0_0_29_2_0_11_3_4 Unit Cycles=1000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i1_1 = 0;;,_memcpy_i1_1 < 16;,++_memcpy_i1_1) TopoID:L_0_0_0_29_2_0_11_3_4_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i1_0 = 0;;,_memcpy_i1_0 < 1000;,++_memcpy_i1_0) TopoID:L_0_0_0_29_2_0_11_3_4_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) msm_port_a_buf_0_msm_node_0_0(a_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_5_0 Unit Cycles=1036 Total Cycles:0
            LogicLatency: 1036, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) msm_port_b_buf_0_msm_node_0_0(b_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_6_0 Unit Cycles=1036 Total Cycles:0
            LogicLatency: 1036, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) msm_port_i_sub_l1_msm_node_0_0(0) TopoID:X_0_0_0_29_2_0_11_3_7_0 Unit Cycles=1 Total Cycles:0
            LogicLatency: 1, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) msm_port_c_buf_0_msm_node_0_0(c_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_9_0 Unit Cycles=1039 Total Cycles:0
            LogicLatency: 1039, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) {for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}} TopoID:X_0_0_0_29_2_0_11_3_10 Unit Cycles=1000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i2_1 = 0;;,_memcpy_i2_1 < 16;,++_memcpy_i2_1) TopoID:L_0_0_0_29_2_0_11_3_10_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i2_0 = 0;;,_memcpy_i2_0 < 1000;,++_memcpy_i2_0) TopoID:L_0_0_0_29_2_0_11_3_10_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
**********************************************************
3.3 Update total cycles.
**********************************************************
[EST ALGO][ComputeTotalStaticCycle, 2585] Start compute cycles for TASK. 
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_29 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_29 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_29 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_29 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(i = 0;i < 125;i++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 125, TmpTCStatic = 125, NewFactor = 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_29_2_0_11 - schedule sequntial size: 7
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2740] Start compute cycles for basic block {for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}
[EST ALGO][ComputeTotalStaticCycle, 2741] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_29_2_0_11_3_3 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_29_2_0_11_3_3 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 16, TmpTCStatic = 16, NewFactor = 2000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_29_2_0_11_3_3_0 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11_3_3_0 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 2000
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 50, TCStatic = 1000, TmpTCStatic = 20, NewFactor = 2000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_29_2_0_11_3_3_0_3_2 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_29_2_0_11_3_3_0_3_2 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {...}, IsPipeline=1, TotalCycles 124000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_29_2_0_11_3_3_0 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {...}, IsPipeline=0, TotalCycles 125000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_29_2_0_11_3_3 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2752] Compute cycles for basic block: SgBasicBlock:{for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}}, TotalCycles 125000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2740] Start compute cycles for basic block {for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}
[EST ALGO][ComputeTotalStaticCycle, 2741] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_29_2_0_11_3_4 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_29_2_0_11_3_4 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 16, TmpTCStatic = 16, NewFactor = 2000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_29_2_0_11_3_4_0 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11_3_4_0 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 2000
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 50, TCStatic = 1000, TmpTCStatic = 20, NewFactor = 2000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_29_2_0_11_3_4_0_3_2 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_29_2_0_11_3_4_0_3_2 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {...}, IsPipeline=1, TotalCycles 124000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_29_2_0_11_3_4_0 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {...}, IsPipeline=0, TotalCycles 125000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_29_2_0_11_3_4 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2752] Compute cycles for basic block: SgBasicBlock:{for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}}, TotalCycles 125000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call msm_port_a_buf_0_msm_node_0_0(a_buf_0,0)
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_25 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_25 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 1000, TmpTCStatic = 1000, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_25_2_0_3 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_25_2_0_3 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2740] Start compute cycles for basic block {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}
[EST ALGO][ComputeTotalStaticCycle, 2741] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_25_2_0_3_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_25_2_0_3_3_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 16, TCStatic = 16, TmpTCStatic = 1, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_25_2_0_3_3_1_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_25_2_0_3_3_1_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, IsPipeline=0, TotalCycles 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_25_2_0_3_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2752] Compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int a_buf_0_sp_tmp_0;a_buf_0_sp_tmp_0 = a_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_1];write_channel_altera_ch_a_buf_0_0_p__merlinalterafuncend(ch_a_buf_0_0_p[_i_sub_l1_0],a_buf_0_sp_tmp_0);}}, TotalCycles 1036
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_25_2_0_3 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_j_1 = 0;_j_1 < 1000;_j_1++) {...}, IsPipeline=1, TotalCycles 1036
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_25 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 1036
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...}, TotalCycles 1036. TmpCycles 129500
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:msm_port_a_buf_0_msm_node_0_0(a_buf_0,0), TotalCycles 129500
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call msm_port_b_buf_0_msm_node_0_0(b_buf_0,0)
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_26 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_26 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 1000, TmpTCStatic = 1000, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_26_2_0_3 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_26_2_0_3 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2740] Start compute cycles for basic block {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}
[EST ALGO][ComputeTotalStaticCycle, 2741] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_26_2_0_3_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_26_2_0_3_3_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 16, TCStatic = 16, TmpTCStatic = 1, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_26_2_0_3_3_1_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_26_2_0_3_3_1_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, IsPipeline=0, TotalCycles 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_26_2_0_3_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2752] Compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int b_buf_0_sp_tmp_0;b_buf_0_sp_tmp_0 = b_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_2];write_channel_altera_ch_b_buf_0_1_p__merlinalterafuncend(ch_b_buf_0_1_p[_i_sub_l1_0],b_buf_0_sp_tmp_0);}}, TotalCycles 1036
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_26_2_0_3 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_j_2 = 0;_j_2 < 1000;_j_2++) {...}, IsPipeline=1, TotalCycles 1036
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_26 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 1036
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...}, TotalCycles 1036. TmpCycles 129500
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:msm_port_b_buf_0_msm_node_0_0(b_buf_0,0), TotalCycles 129500
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call msm_port_i_sub_l1_msm_node_0_0(0)
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_28 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_28 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2740] Start compute cycles for basic block {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}
[EST ALGO][ComputeTotalStaticCycle, 2741] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_28_2_0_1 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_28_2_0_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 16, TCStatic = 16, TmpTCStatic = 1, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_28_2_0_1_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_28_2_0_1_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, IsPipeline=0, TotalCycles 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_28_2_0_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2752] Compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}}, TotalCycles 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_28 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 1
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...}, TotalCycles 1. TmpCycles 125
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:msm_port_i_sub_l1_msm_node_0_0(0), TotalCycles 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call msm_port_c_buf_0_msm_node_0_0(c_buf_0,0)
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_27 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_27 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 1000, TmpTCStatic = 1000, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_27_2_0_3 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_27_2_0_3 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2740] Start compute cycles for basic block {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}
[EST ALGO][ComputeTotalStaticCycle, 2741] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_27_2_0_3_3_1 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_27_2_0_3_3_1 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2773] Have Pipeline parent.
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 16, TCStatic = 16, TmpTCStatic = 1, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_27_2_0_3_3_1_1 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_27_2_0_3_3_1_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {...}, IsPipeline=0, TotalCycles 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_27_2_0_3_3_1 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2752] Compute cycles for basic block: SgBasicBlock:{#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int c_buf_0_sp_tmp_0;c_buf_0_sp_tmp_0 =((int )(read_channel_altera_ch_c_buf_0_2_p__merlinalterafuncend(ch_c_buf_0_2_p[_i_sub_l1_0])));c_buf_0[((long long )_i_sub_l1_0) - 0LL][_j_3] = c_buf_0_sp_tmp_0;}}, TotalCycles 1039
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_27_2_0_3 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_j_3 = 0;_j_3 < 1000;_j_3++) {...}, IsPipeline=1, TotalCycles 1039
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_27 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 1039
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...}, TotalCycles 1039. TmpCycles 129875
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:msm_port_c_buf_0_msm_node_0_0(c_buf_0,0), TotalCycles 129875
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2740] Start compute cycles for basic block {for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}
[EST ALGO][ComputeTotalStaticCycle, 2741] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]X_0_0_0_29_2_0_11_3_10 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]X_0_0_0_29_2_0_11_3_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 125
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 16, TmpTCStatic = 16, NewFactor = 2000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_29_2_0_11_3_10_0 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]L_0_0_0_29_2_0_11_3_10_0 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 2000
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 50, TCStatic = 1000, TmpTCStatic = 20, NewFactor = 2000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_29_2_0_11_3_10_0_3_2 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_29_2_0_11_3_10_0_3_2 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {...}, IsPipeline=1, TotalCycles 124000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_29_2_0_11_3_10_0 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {...}, IsPipeline=0, TotalCycles 125000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]X_0_0_0_29_2_0_11_3_10 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2752] Compute cycles for basic block: SgBasicBlock:{for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}}, TotalCycles 125000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_29_2_0_11 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(i = 0;i < 125;i++) {...}, IsPipeline=0, TotalCycles 509000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_29 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 509000
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}, TotalCycles 509000. TmpCycles 509000
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_29 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 509000
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...}, TotalCycles 509000. TmpCycles 509000
[EST ALGO][ComputeTotalStaticCycle, 2590] Unit cycle of top kernel:509000
[EST ALGO][ComputeTotalStaticCycle, 2591] THIRD_CYCLES=509000
[EST ALGO][ComputeStaticCycles, 59] Print schedule for after compute total cycle.

FuncDecl(0):void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_25
-Schedule:
Function: TopoID:F_0_0_0_25 Unit Cycles:1036 LogicLatency:0 GlueLatency:1036
  (0,0) for(_j_1 = 0;;,_j_1 < 1000;,_j_1++) TopoID:L_0_0_0_25_2_0_3 II:1 IL:37 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1036 Total Cycles:1036
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(1):void msm_port_a_buf_0_msm_node_0_0(int [16][1000] a_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_25
-Schedule:
Function: TopoID:F_0_0_0_25 Unit Cycles:1036 LogicLatency:0 GlueLatency:1036
  (0,0) for(_j_1 = 0;;,_j_1 < 1000;,_j_1++) TopoID:L_0_0_0_25_2_0_3 II:1 IL:37 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1036 Total Cycles:1036
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(2):void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_26
-Schedule:
Function: TopoID:F_0_0_0_26 Unit Cycles:1036 LogicLatency:0 GlueLatency:1036
  (0,0) for(_j_2 = 0;;,_j_2 < 1000;,_j_2++) TopoID:L_0_0_0_26_2_0_3 II:1 IL:37 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1036 Total Cycles:1036
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(3):void msm_port_b_buf_0_msm_node_0_0(int [16][1000] b_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_26
-Schedule:
Function: TopoID:F_0_0_0_26 Unit Cycles:1036 LogicLatency:0 GlueLatency:1036
  (0,0) for(_j_2 = 0;;,_j_2 < 1000;,_j_2++) TopoID:L_0_0_0_26_2_0_3 II:1 IL:37 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1036 Total Cycles:1036
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(4):void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...} TopoID:F_0_0_0_28
-Schedule:
Function: TopoID:F_0_0_0_28 Unit Cycles:1 LogicLatency:0 GlueLatency:0
  (0,0) {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}} TopoID:X_0_0_0_28_2_0_1 Unit Cycles=0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_i_sub_l1_0 =((int )0);;,_i_sub_l1_0 <=((int )15);,++_i_sub_l1_0) TopoID:L_0_0_0_28_2_0_1_1 II:0 IL:1 UF:16 Flat:0 TCStatic:16 Unit Cycles:0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(5):void msm_port_i_sub_l1_msm_node_0_0(int _i_sub_l1) {...} TopoID:F_0_0_0_28
-Schedule:
Function: TopoID:F_0_0_0_28 Unit Cycles:1 LogicLatency:0 GlueLatency:0
  (0,0) {#pragma unrollfor(_i_sub_l1_0 =((int )0);_i_sub_l1_0 <=((int )15);++_i_sub_l1_0) {int _i_sub_l1_sp_tmp_0;int __i_sub_l1;_i_sub_l1_sp_tmp_0 = _i_sub_l1_0;write_channel_altera_ch__i_sub_l1_3_p__merlinalterafuncend(ch__i_sub_l1_3_p[_i_sub_l1_0],_i_sub_l1_sp_tmp_0);__i_sub_l1 = _i_sub_l1_0;__i_sub_l1;}} TopoID:X_0_0_0_28_2_0_1 Unit Cycles=0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_i_sub_l1_0 =((int )0);;,_i_sub_l1_0 <=((int )15);,++_i_sub_l1_0) TopoID:L_0_0_0_28_2_0_1_1 II:0 IL:1 UF:16 Flat:0 TCStatic:16 Unit Cycles:0 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(6):void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_27
-Schedule:
Function: TopoID:F_0_0_0_27 Unit Cycles:1039 LogicLatency:0 GlueLatency:1039
  (0,0) for(_j_3 = 0;;,_j_3 < 1000;,_j_3++) TopoID:L_0_0_0_27_2_0_3 II:1 IL:40 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1039 Total Cycles:1039
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(7):void msm_port_c_buf_0_msm_node_0_0(int [16][1000] c_buf_0,int _i_sub_l1) {...} TopoID:F_0_0_0_27
-Schedule:
Function: TopoID:F_0_0_0_27 Unit Cycles:1039 LogicLatency:0 GlueLatency:1039
  (0,0) for(_j_3 = 0;;,_j_3 < 1000;,_j_3++) TopoID:L_0_0_0_27_2_0_3 II:1 IL:40 UF:1 Flat:0 TCStatic:1000 Unit Cycles:1039 Total Cycles:1039
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(8):void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...} TopoID:F_0_0_0_29
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_29 Unit Cycles:509000 LogicLatency:0 GlueLatency:509000
  (0,0) for(i = 0;;,i < 125;,i++) TopoID:L_0_0_0_29_2_0_11 II:0 IL:4072 UF:1 Flat:0 TCStatic:125 Unit Cycles:509000 Total Cycles:509000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3112, GlueLatencyIteration: 0
  (0,0) {for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}} TopoID:X_0_0_0_29_2_0_11_3_3 Unit Cycles=1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i0_1 = 0;;,_memcpy_i0_1 < 16;,++_memcpy_i0_1) TopoID:L_0_0_0_29_2_0_11_3_3_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i0_0 = 0;;,_memcpy_i0_0 < 1000;,++_memcpy_i0_0) TopoID:L_0_0_0_29_2_0_11_3_3_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:124000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) {for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}} TopoID:X_0_0_0_29_2_0_11_3_4 Unit Cycles=1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i1_1 = 0;;,_memcpy_i1_1 < 16;,++_memcpy_i1_1) TopoID:L_0_0_0_29_2_0_11_3_4_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i1_0 = 0;;,_memcpy_i1_0 < 1000;,++_memcpy_i1_0) TopoID:L_0_0_0_29_2_0_11_3_4_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:124000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) msm_port_a_buf_0_msm_node_0_0(a_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_5_0 Unit Cycles=1036 Total Cycles:129500
            LogicLatency: 1036, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) msm_port_b_buf_0_msm_node_0_0(b_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_6_0 Unit Cycles=1036 Total Cycles:129500
            LogicLatency: 1036, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) msm_port_i_sub_l1_msm_node_0_0(0) TopoID:X_0_0_0_29_2_0_11_3_7_0 Unit Cycles=1 Total Cycles:125
            LogicLatency: 1, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) msm_port_c_buf_0_msm_node_0_0(c_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_9_0 Unit Cycles=1039 Total Cycles:129875
            LogicLatency: 1039, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) {for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}} TopoID:X_0_0_0_29_2_0_11_3_10 Unit Cycles=1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i2_1 = 0;;,_memcpy_i2_1 < 16;,++_memcpy_i2_1) TopoID:L_0_0_0_29_2_0_11_3_10_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i2_0 = 0;;,_memcpy_i2_0 < 1000;,++_memcpy_i2_0) TopoID:L_0_0_0_29_2_0_11_3_10_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:124000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(9):void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...} TopoID:F_0_0_0_29
-Schedule:
Function: TopoID:F_0_0_0_29 Unit Cycles:509000 LogicLatency:0 GlueLatency:509000
  (0,0) void vec_add_kernel(int * __restrict__ a,int * __restrict__ b,int * __restrict__ c) {...} TopoID:F_0_0_0_29 Unit Cycles=509000 Total Cycles:509000
            LogicLatency: 0, GlueLatency: 509000, LogicLatencyIteration: 0, GlueLatencyIteration: 0
Function: TopoID:F_0_0_0_29 Unit Cycles:509000 LogicLatency:0 GlueLatency:509000
  (0,0) for(i = 0;;,i < 125;,i++) TopoID:L_0_0_0_29_2_0_11 II:0 IL:4072 UF:1 Flat:0 TCStatic:125 Unit Cycles:509000 Total Cycles:509000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 3112, GlueLatencyIteration: 0
  (0,0) {for(_memcpy_i0_1 = 0;_memcpy_i0_1 < 16;++_memcpy_i0_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i0_0 = 0;_memcpy_i0_0 < 1000;++_memcpy_i0_0) {a_buf_0[_memcpy_i0_1][_memcpy_i0_0] = a[i * 16000 +((0 * 16 + _memcpy_i0_1) * 1000 + _memcpy_i0_0)];}}} TopoID:X_0_0_0_29_2_0_11_3_3 Unit Cycles=1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i0_1 = 0;;,_memcpy_i0_1 < 16;,++_memcpy_i0_1) TopoID:L_0_0_0_29_2_0_11_3_3_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i0_0 = 0;;,_memcpy_i0_0 < 1000;,++_memcpy_i0_0) TopoID:L_0_0_0_29_2_0_11_3_3_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:124000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) {for(_memcpy_i1_1 = 0;_memcpy_i1_1 < 16;++_memcpy_i1_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i1_0 = 0;_memcpy_i1_0 < 1000;++_memcpy_i1_0) {b_buf_0[_memcpy_i1_1][_memcpy_i1_0] = b[i * 16000 +((0 * 16 + _memcpy_i1_1) * 1000 + _memcpy_i1_0)];}}} TopoID:X_0_0_0_29_2_0_11_3_4 Unit Cycles=1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i1_1 = 0;;,_memcpy_i1_1 < 16;,++_memcpy_i1_1) TopoID:L_0_0_0_29_2_0_11_3_4_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i1_0 = 0;;,_memcpy_i1_0 < 1000;,++_memcpy_i1_0) TopoID:L_0_0_0_29_2_0_11_3_4_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:124000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) msm_port_a_buf_0_msm_node_0_0(a_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_5_0 Unit Cycles=1036 Total Cycles:129500
            LogicLatency: 1036, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) msm_port_b_buf_0_msm_node_0_0(b_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_6_0 Unit Cycles=1036 Total Cycles:129500
            LogicLatency: 1036, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) msm_port_i_sub_l1_msm_node_0_0(0) TopoID:X_0_0_0_29_2_0_11_3_7_0 Unit Cycles=1 Total Cycles:125
            LogicLatency: 1, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) msm_port_c_buf_0_msm_node_0_0(c_buf_0,0) TopoID:X_0_0_0_29_2_0_11_3_9_0 Unit Cycles=1039 Total Cycles:129875
            LogicLatency: 1039, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) {for(_memcpy_i2_1 = 0;_memcpy_i2_1 < 16;++_memcpy_i2_1) {#pragma HLS COALESCING_WIDTH=1600#pragma unroll 50for(_memcpy_i2_0 = 0;_memcpy_i2_0 < 1000;++_memcpy_i2_0) {c[i * 16000 +((0 * 16 + _memcpy_i2_1) * 1000 + _memcpy_i2_0)] = c_buf_0[_memcpy_i2_1][_memcpy_i2_0];}}} TopoID:X_0_0_0_29_2_0_11_3_10 Unit Cycles=1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i2_1 = 0;;,_memcpy_i2_1 < 16;,++_memcpy_i2_1) TopoID:L_0_0_0_29_2_0_11_3_10_0 II:0 IL:20 UF:1 Flat:0 TCStatic:16 Unit Cycles:1000 Total Cycles:125000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (0,0) for(_memcpy_i2_0 = 0;;,_memcpy_i2_0 < 1000;,++_memcpy_i2_0) TopoID:L_0_0_0_29_2_0_11_3_10_0_3_2 II:1 IL:1 UF:50 Flat:0 TCStatic:1000 Unit Cycles:62 Total Cycles:124000
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[INFO] ========================================================
[INFO] 4. Merge Json file.
[INFO] ========================================================
[INFO] Writing performance report : step1.json
ID = F_0_0_0_29
Report unit number = 0
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 509000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
{
    "F_0_0_0_29": {
        "serially_execution":"0",
        "CYCLE_BURST":"375000",
        "CYCLE_COMPUTE":"509000",
    "CYCLE_UNIT":"509000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11
Report unit number = 1
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 509000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11": {
        "serially_execution":"0",
        "CYCLE_BURST":"375000",
        "CYCLE_COMPUTE":"509000",
    "CYCLE_UNIT":"509000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"125",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_3_0
Report unit number = 2
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 125000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_3_0": {
        "CYCLE_BURST":"1000",
        "CYCLE_COMPUTE":"320",
    "CYCLE_UNIT":"125000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"16",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_3_0_3_2
Report unit number = 3
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 124000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_3_0_3_2": {
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"20",
    "CYCLE_UNIT":"124000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"50",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_4_0
Report unit number = 4
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 125000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_4_0": {
        "CYCLE_BURST":"1000",
        "CYCLE_COMPUTE":"320",
    "CYCLE_UNIT":"125000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"16",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_4_0_3_2
Report unit number = 5
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 124000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_4_0_3_2": {
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"20",
    "CYCLE_UNIT":"124000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"50",

        "poison":"0"
    },
ID = X_0_0_0_29_2_0_11_3_5_0
Report unit number = 6
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 129500
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_29_2_0_11_3_5_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"129500",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_29_2_0_11_3_6_0
Report unit number = 7
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 129500
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_29_2_0_11_3_6_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"129500",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_29_2_0_11_3_7_0
Report unit number = 8
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 125
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_29_2_0_11_3_7_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"125",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_29_2_0_11_3_9_0
Report unit number = 9
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 129875
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_29_2_0_11_3_9_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"129875",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_10_0
Report unit number = 10
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 125000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_10_0": {
        "CYCLE_BURST":"1000",
        "CYCLE_COMPUTE":"320",
    "CYCLE_UNIT":"125000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"16",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_10_0_3_2
Report unit number = 11
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 124000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_10_0_3_2": {
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"20",
    "CYCLE_UNIT":"124000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"50",

        "poison":"0"
    },
ID = F_0_0_0_25
Report unit number = 12
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1036
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_25": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1036",
    "CYCLE_UNIT":"1036",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_25_2_0_3
Report unit number = 13
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1036
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_25_2_0_3": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1036",
    "CYCLE_UNIT":"1036",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_25_2_0_3_3_1_1
Report unit number = 14
    "L_0_0_0_25_2_0_3_3_1_1": {
        "CYCLE_UNIT":"ignore",
        "CYCLE_TOT":"ignore",
        "DBW":"ignore",
        "trip-count":"16",
        "unroll-factor":"16",
        "poison":"0"
    },
ID = F_0_0_0_26
Report unit number = 15
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1036
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_26": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1036",
    "CYCLE_UNIT":"1036",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_26_2_0_3
Report unit number = 16
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1036
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_26_2_0_3": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1036",
    "CYCLE_UNIT":"1036",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_26_2_0_3_3_1_1
Report unit number = 17
    "L_0_0_0_26_2_0_3_3_1_1": {
        "CYCLE_UNIT":"ignore",
        "CYCLE_TOT":"ignore",
        "DBW":"ignore",
        "trip-count":"16",
        "unroll-factor":"16",
        "poison":"0"
    },
ID = F_0_0_0_28
Report unit number = 18
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_28": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1",
    "CYCLE_UNIT":"1",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_28_2_0_1_1
Report unit number = 19
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_28_2_0_1_1": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"16",
        "unroll-factor":"16",

        "poison":"0"
    },
ID = F_0_0_0_27
Report unit number = 20
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1039
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_27": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1039",
    "CYCLE_UNIT":"1039",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_27_2_0_3
Report unit number = 21
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 1039
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_27_2_0_3": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"1039",
    "CYCLE_UNIT":"1039",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_27_2_0_3_3_1_1
Report unit number = 22
    "L_0_0_0_27_2_0_3_3_1_1": {
        "CYCLE_UNIT":"ignore",
        "CYCLE_TOT":"ignore",
        "DBW":"ignore",
        "trip-count":"16",
        "unroll-factor":"16",
        "poison":"0"
    },
ID = F_0_0_0_29
Report unit number = 23
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 509000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "TOP_vec_add_kernel": {
        "CYCLE_UNIT":"509000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0",
        "func_name": "vec_add_kernel",
             "topo_id": "TOP_vec_add_kernel",
             "type":"top_kernel"
     },
ID = F_0_0_0_29
Report unit number = 24
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 509000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_29": {
        "serially_execution":"0",
        "CYCLE_BURST":"375000",
        "CYCLE_COMPUTE":"509000",
    "CYCLE_UNIT":"509000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11
Report unit number = 25
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 509000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11": {
        "serially_execution":"0",
        "CYCLE_BURST":"375000",
        "CYCLE_COMPUTE":"509000",
    "CYCLE_UNIT":"509000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"125",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_3_0
Report unit number = 26
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 125000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_3_0": {
        "CYCLE_BURST":"1000",
        "CYCLE_COMPUTE":"320",
    "CYCLE_UNIT":"125000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"16",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_3_0_3_2
Report unit number = 27
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 124000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_3_0_3_2": {
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"20",
    "CYCLE_UNIT":"124000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"50",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_4_0
Report unit number = 28
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 125000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_4_0": {
        "CYCLE_BURST":"1000",
        "CYCLE_COMPUTE":"320",
    "CYCLE_UNIT":"125000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"16",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_4_0_3_2
Report unit number = 29
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 124000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_4_0_3_2": {
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"20",
    "CYCLE_UNIT":"124000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"50",

        "poison":"0"
    },
ID = X_0_0_0_29_2_0_11_3_5_0
Report unit number = 30
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 129500
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_29_2_0_11_3_5_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"129500",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_29_2_0_11_3_6_0
Report unit number = 31
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 129500
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_29_2_0_11_3_6_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"129500",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_29_2_0_11_3_7_0
Report unit number = 32
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 125
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_29_2_0_11_3_7_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"125",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_29_2_0_11_3_9_0
Report unit number = 33
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 129875
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_29_2_0_11_3_9_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"129875",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_10_0
Report unit number = 34
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 125000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_10_0": {
        "CYCLE_BURST":"1000",
        "CYCLE_COMPUTE":"320",
    "CYCLE_UNIT":"125000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"16",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = L_0_0_0_29_2_0_11_3_10_0_3_2
Report unit number = 35
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 124000
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_29_2_0_11_3_10_0_3_2": {
        "CYCLE_BURST":"62",
        "CYCLE_COMPUTE":"20",
    "CYCLE_UNIT":"124000",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"1000",
        "unroll-factor":"50",

        "poison":"0"
    }
}
Finish write file step1.json
#################################################
Delete some attribtues from json step1.json.
#################################################
Write output.json file.


#################################################
Delete some attribtues from json gen_token.json.
#################################################
Write output.json file.


[INFO] Performance estimation complete

====== Typedef replace ========>
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy__pragma_ACCEL_STREAM_CHANNEL_C_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_msm_node_0() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_msm_node_0() {...}
while cond: SgExprStatement:1;
[INFO] Beginning merging simulation output step1.json and annotated report gen_token.json into performance report perf_est.json
[INFO] Reading simulation output : step1.json
[INFO] Reading annotated report : gen_token.json
[INFO] Generating output file : perf_est.json
[INFO] Merge complete
cd .//lc_sim; merlin_safe_exec mars_opt __merlinkernel_vec_add_kernel.cpp  -e c -p performance_estimation  -I\/curr\/hanhu\/unit_test\/test_case\/test0  -I\/curr\/hanhu\/unit_test\/test_case\/test0\/src\/  -I\/curr\/hanhu\/WORK\/Merlin_Compiler\/trunk\/build\/..\/\/mars-gen\/lib\/merlin -a MERGE -a step1.json -a gen_token.json -a perf_est.json :: __merlinkernel_vec_add_kernel.cpp  :: 0
