cmd = mars_opt __merlinkernel_test.cpp  -e c -p performance_estimation  -I\/curr\/hanhu\/unit_test\/test_case\/test0  -I\/curr\/hanhu\/unit_test\/test_case\/test0\/src\/  -I\/curr\/hanhu\/WORK\/Merlin_Compiler\/trunk\/build\/..\/\/mars-gen\/lib\/merlin -a STATIC -a kernel_list.json -a gen_token.json -a config.json -a step1.json -a aocl

====== Typedef replace ========>
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
[INFO] Beginning static performance estimation



[INFO] ========================================================
[INFO] 1. Create blocks..
[INFO] ========================================================
[INFO] Reading annotated report : gen_token.json
[INFO] Reading annotated report : gen_token.json
[EST ALGO][MakeNewBlocks, 659] Create TOP TASK.
[EST ALGO][MakeNewBlocks, 648] Create top kernel: F_0_0_0_10
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 402] Create a kernel block: SgFunctionDeclaration:void test(char * a,int * b,::m...
[EST ALGO][MakeNewBlocks, 655] Create sub kernel: F_0_0_0_10
[EST ALGO][MakeNewBlocks, 678] ExtPortList: 
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:a
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:b
[EST ALGO][MakeNewBlocks, 680]    SgInitializedName:c
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void test(char * a,int * b,::m...
Function body = {#pragma HLS INTERFACE m_axi port=a offset=slave depth=128#pragma HLS INTERFACE m_axi port=b offset=slave depth=128#pragma HLS INTERFACE m_axi port=c offset=slave depth=16#pragma HLS INTERFACE s_axilite port=a bundle=control#pragma HLS INTERFACE s_axilite port=b bundle=control#pragma HLS INTERFACE s_axilite port=c bundle=control#pragma HLS INTERFACE s_axilite port=return bundle=control#pragma HLS DATA_PACK VARIABLE=cint b_buf_0[128];char a_buf_0[128];long c_buf_0[128];#pragma HLS array_partition variable=c_buf_0 cyclic factor=4 dim=1merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL);merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL);#pragma ACCEL interface variable=a max_depth=128 depth=128#pragma ACCEL interface variable=b max_depth=128 depth=128#pragma ACCEL interface variable=c max_depth=128 depth=128for(int i = 0;i < 64;i++) {#pragma HLS pipelinec_buf_0[i] =((long )(((int )a_buf_0[i]) + b_buf_0[i]));}func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0);func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0);func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0);memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL);return ;}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:merlin_memcpy_0(a_buf_0,0,a,0,...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,...
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:merlin_memcpy_1(b_buf_0,0,b,0,...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,...
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int i = 0;i < 64;i++) {......
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int i = 0;i < 64;i++) {......
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][AddChildBlock_AOCL, 469] Create a function call block: SgExprStatement:func1((char *)a_buf_0,(int *)b...
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void func1(char * a,int * b,lo...
[EST ALGO][MakeNewBlocks, 653] Create func decl: F_0_0_0_3
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void func1(char * a,int * b,lo...
Function body = {for(int i = 0;i < 128;i++) {#pragma HLS pipelinec[i] =((long )(((int )a[i]) + b[i]));}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int i = 0;i < 128;i++) {.....
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int i = 0;i < 128;i++) {.....
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 469] Create a function call block: SgExprStatement:func2((char *)a_buf_0,(int *)b...
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void func2(char * a,int * b,lo...
[EST ALGO][MakeNewBlocks, 653] Create func decl: F_0_0_0_4
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void func2(char * a,int * b,lo...
Function body = {for(int i = 0;i < 64;i++) {#pragma HLS pipelinec[i] =((long )(((int )a[i]) + b[i]));}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int i = 0;i < 64;i++) {......
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int i = 0;i < 64;i++) {......
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 469] Create a function call block: SgExprStatement:func3((char *)a_buf_0,(int *)b...
[EST ALGO][AddChildBlock_AOCL, 240] Create a function declaration block: SgFunctionDeclaration:void func3(char * a,int * b,lo...
[EST ALGO][MakeNewBlocks, 653] Create func decl: F_0_0_0_5
[EST ALGO][AddChildBlock_AOCL, 253] Find a function declaration: SgFunctionDeclaration:void func3(char * a,int * b,lo...
Function body = {for(int i = 0;i < 32;i++) {#pragma HLS pipelinec[i] =((long )(((int )a[i]) + b[i]));}}
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 409] Create a loop block: SgForStatement:for(int i = 0;i < 32;i++) {......
[EST ALGO][AddChildBlock_AOCL, 268] Find a loop: SgForStatement:for(int i = 0;i < 32;i++) {......
[EST ALGO][GetExecFlowFromInput, 166] Block execute in parallel.
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.
[EST ALGO][AddChildBlock_AOCL, 447] Create memcpy block: SgExprStatement:memcpy_wide_bus_write_long_512...
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][AddChildBlock_AOCL, 264] Find a memcpy function, do not care about the inner logic: SgFunctionCallExp:memcpy_wide_bus_write_long_512...
[EST ALGO][GetExecFlowFromInput, 164] Block execute in serial.



[INFO] ========================================================
[INFO] 2. Reading annotated report : gen_token.json
[INFO] ========================================================
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 8, ID = F_0_0_0_10, void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
Key:Value=state1:merlin_memcpy_0
Key:Value=state10:func2
Key:Value=state12:func3
Key:Value=state3:merlin_memcpy_1
Key:Value=state8:func1
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size5
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_10_2_0_12_0, merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_10_2_0_13_0, merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_10_2_0_17, for(int i = 0;i < 64;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 64
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 3
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 65
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 3
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_10_2_0_18_0, func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_10_2_0_19_0, func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 1, ID = X_0_0_0_10_2_0_20_0, func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 3, ID = X_0_0_0_10_2_0_21_0, memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 762]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 769]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = F_0_0_0_3, void func1(char * a,int * b,long * c) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 0
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_3_2_0_0, for(int i = 0;i < 128;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 128
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 3
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 129
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 3
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = F_0_0_0_4, void func2(char * a,int * b,long * c) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 0
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_4_2_0_0, for(int i = 0;i < 64;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 64
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 3
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 65
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 3
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 2, ID = F_0_0_0_5, void func3(char * a,int * b,long * c) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 0
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 725]----Checking latnecy max...
[EST ALGO][ReadAnnotatedReportHelper, 730]----Final latency max = 1
[EST ALGO][ReadAnnotatedReportHelper, 732]----Checking inline...
[EST ALGO][ReadAnnotatedReportHelper, 736]----Final latency max = 0
[EST ALGO][ReadAnnotatedReportHelper, 738]----Checking dead...
[EST ALGO][ReadAnnotatedReportHelper, 742]----Final dead = 0
[EST ALGO][ReadAnnotatedReportHelper, 744]----Checking execution sequence from json file...
[EST ALGO][ReadAnnotatedReportHelper, 757]----Vector size0
[EST ALGO][ReadAnnotatedReportHelper, 514]*******************************
[EST ALGO][ReadAnnotatedReportHelper, 516]Read report for 0, ID = L_0_0_0_5_2_0_0, for(int i = 0;i < 32;i++) {...}
[EST ALGO][ReadAnnotatedReportHelper, 522]----Checking if updated...
[EST ALGO][ReadAnnotatedReportHelper, 526]----Final updated = 0
[EST ALGO][ReadAnnotatedReportHelper, 528]----Checking glue latency...
[EST ALGO][ReadAnnotatedReportHelper, 532]----Final glue latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 534]----Checking glue latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 540]----Final glue latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 542]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 547]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 549]----Checking logic latency...
[EST ALGO][ReadAnnotatedReportHelper, 553]----Final logic latency = 0
[EST ALGO][ReadAnnotatedReportHelper, 555]----Checking logic latency iteration...
[EST ALGO][ReadAnnotatedReportHelper, 561]----Final logic latency iteration = 0
[EST ALGO][ReadAnnotatedReportHelper, 563]----Checking execution sequence...
[EST ALGO][ReadAnnotatedReportHelper, 568]----execution in 1
[EST ALGO][ReadAnnotatedReportHelper, 570]----Checking instance_number...
[EST ALGO][ReadAnnotatedReportHelper, 575]----instance number 1
[EST ALGO][ReadAnnotatedReportHelper, 579]----Checking TC...
[EST ALGO][ReadAnnotatedReportHelper, 594]----Final TC = 32
[EST ALGO][ReadAnnotatedReportHelper, 597]----Checking flatten...
[EST ALGO][ReadAnnotatedReportHelper, 614]----Final flatten = 0
[EST ALGO][ReadAnnotatedReportHelper, 617]----Checking unroll factor...
[EST ALGO][SetParentAttributeHaveUnrollLoopOnly, 502] Setting parent loop as not unroll loop.
[EST ALGO][ReadAnnotatedReportHelper, 644]----Final unroll factor = 1
[EST ALGO][ReadAnnotatedReportHelper, 647]----Checking II...
[EST ALGO][ReadAnnotatedReportHelper, 665]----Final II = 1
[EST ALGO][ReadAnnotatedReportHelper, 668]----Checking IL...
[EST ALGO][ReadAnnotatedReportHelper, 677]----Final IL = 3
[EST ALGO][ReadAnnotatedReportHelper, 679]----Checking total latency...
[EST ALGO][ReadAnnotatedReportHelper, 684]----Final total latency = 33
[EST ALGO][ReadAnnotatedReportHelper, 686]----Checking iteration latency...
[EST ALGO][ReadAnnotatedReportHelper, 693]----Final iteration latency = 3
[EST ALGO][ReadAnnotatedReportHelper, 695]----Checking burst...
[EST ALGO][ReadAnnotatedReportHelper, 708]----Final burst = 0. burst width = 0
[EST ALGO][ReadAnnotatedReportHelper, 710]----Checking vendor latnecy...
[EST ALGO][ReadAnnotatedReportHelper, 723]----Final vendor latency = 1
[INFO] ========================================================
[INFO] 3. Compute cycles.
[INFO] ========================================================
[INFO] Reading external memory parameter file: config.json
[WARNING] RBW_GBs not found.
[WARNING] WBW_GBs not found.
[WARNING] RLat_ns not found.
[WARNING] WLat_ns not found.
[WARNING] RandLat_ns not found.
RBW_GBs=10.300000
WBW_GBs=9.600000
RLat_ns=434.000000
WLat_ns=325.000000
RandLat_ns=62.000000
FPGACLK_GHz=0.250000
MAX_BITWIDTH=512.000000
LATENCY=240.000000
Find Top Block = F_0_0_0_10
**********************************************************
3.1 Update cycles by compute all data
**********************************************************
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1574] Start compute cycles for TASK. 
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1586] Start compute cycles for top kernel: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_10 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][ComputeStaticCycleHelper, 1606]RescheduleByADB void test(char * a,int * b,::merlin_uint_512* c) {...}
Vector size = 5
[EST ALGO][ReScheduleByADB, 1015] - schedule sequntial size: 7
[EST ALGO][ReScheduleByADB, 1017] - schedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1017] - schedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1017] - schedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1017] - schedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1017] - schedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1017] - schedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1017] - schedule parallel size: 1
block size = 7
Find block for this func name
Find block for this func name
Find block for this func name
Find block for this func name
Find block for this func name
Find one block for(int i = 0;i < 64;i++) {...} which not in StateVector
Find one block memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL) which not in StateVector
[EST ALGO][ReScheduleByADB, 1074] reschedule sequntial size: 7
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 1
[EST ALGO][ReScheduleByADB, 1076] reschedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_10 - schedule sequntial size: 7
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:128UL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:char *): 1
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 128
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 128
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 128
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 128, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 128
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL), Cycles: 128, LogicLatency: 128, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 128, LogicTemp: 128, GlueTemp: 0, TotalCycles: 128, LogicLatency: 128, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=1 ,k=0 ,Block=SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_4 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_4 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(int i = 0;i < 64;i++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int i = 0;i < 64;i++) {...}
111 Final IL = 3, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=64, UnrollFactor=1, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=64
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int i = 0;i < 64;i++) {...}, Cycles: 64, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int i = 0;i < 64;i++) {...}, Cycles: 64, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 64, LogicTemp: 0, GlueTemp: 0, TotalCycles: 64, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_4 - schedule spawn size: 0
Logic latency = 0, Unit cycles = 64, AccCycles = 64
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}, Cycles: 64, LogicLatency: 0, GlueLatency: 64
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0), Cycles: 64, LogicLatency: 64, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 64, LogicTemp: 64, GlueTemp: 0, TotalCycles: 192, LogicLatency: 192, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=2 ,k=0 ,Block=SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_5 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_5 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(int i = 0;i < 32;i++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int i = 0;i < 32;i++) {...}
111 Final IL = 3, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=32, UnrollFactor=1, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=32
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int i = 0;i < 32;i++) {...}, Cycles: 32, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int i = 0;i < 32;i++) {...}, Cycles: 32, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 32, LogicTemp: 0, GlueTemp: 0, TotalCycles: 32, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_5 - schedule spawn size: 0
Logic latency = 0, Unit cycles = 32, AccCycles = 32
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}, Cycles: 32, LogicLatency: 0, GlueLatency: 32
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0), Cycles: 32, LogicLatency: 32, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 32, LogicTemp: 32, GlueTemp: 0, TotalCycles: 224, LogicLatency: 224, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=3 ,k=0 ,Block=SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:512UL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:int *): 4
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 512
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 512
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 128
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 128, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 128
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL), Cycles: 128, LogicLatency: 128, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 128, LogicTemp: 128, GlueTemp: 0, TotalCycles: 352, LogicLatency: 352, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=4 ,k=0 ,Block=SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1764] Start Compute cycles for function call: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1602] Start compute cycles for function declaration: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][ComputeStaticCycleFromSchedule, 1858]F_0_0_0_3 - schedule sequntial size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_3 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=0 ,k=0 ,Block=SgForStatement:for(int i = 0;i < 128;i++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}
111 Final IL = 3, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=128, UnrollFactor=1, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=128
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}, Cycles: 128, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}, Cycles: 128, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 128, LogicTemp: 0, GlueTemp: 0, TotalCycles: 128, LogicLatency: 0, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_3 - schedule spawn size: 0
Logic latency = 0, Unit cycles = 128, AccCycles = 128
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}, Cycles: 128, LogicLatency: 0, GlueLatency: 128
[EST ALGO][ComputeStaticCycleHelper, 1809] Finish compute cycles for function call: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0), Cycles: 128, LogicLatency: 128, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 128, LogicTemp: 128, GlueTemp: 0, TotalCycles: 480, LogicLatency: 480, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=5 ,k=0 ,Block=SgForStatement:for(int i = 0;i < 64;i++) {...}
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][ComputeStaticCycleHelper, 1670] Start compute cycles for loop: SgForStatement:for(int i = 0;i < 64;i++) {...}
111 Final IL = 3, vendor latency = 1
Final IL = 1, vendor latency = 1
[EST ALGO][ComputeStaticCyclesForLoop, 1219] Loop pipelined, TC=64, UnrollFactor=1, II=1, IL=1, LogicLatencyIteration=0, GlueLatencyIteration=0, CycleUnitStatic=64
[EST ALGO][ComputeStaticCycleHelper, 1693] Prefinish compute cycles for loop: SgForStatement:for(int i = 0;i < 64;i++) {...}, Cycles: 64, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleHelper, 1714] Finish compute cycles for loop: SgForStatement:for(int i = 0;i < 64;i++) {...}, Cycles: 64, LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 64, LogicTemp: 0, GlueTemp: 0, TotalCycles: 544, LogicLatency: 480, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1861]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeStaticCycleFromSchedule, 1870] j=6 ,k=0 ,Block=SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
ComputeStaticCycleHelper spawn size = 0
[EST ALGO][CheckIfRealMemcpy, 706] Check if real memcpy call.
[EST ALGO][CheckIfRealMemcpy, 828] Is real memcpy call.
[EST ALGO][GetMemcpyCycles, 854] start calculate range of SgCastExp:128LL
[EST ALGO][GetMemcpyCycles, 862] - BusByteWidth for type (P_nullptr:SgPointerType:::merlin_uint_512*): 64
[EST ALGO][GetMemcpyCycles, 878] - number of elements: 128
[EST ALGO][GetMemcpyCycles, 898] - number of Bytes: 1024
[EST ALGO][GetMemcpyCycles, 906] - Cycles without II: 16
[EST ALGO][GetMemcpyCycles, 908] - Cycles with II: 16, II = 1
[EST ALGO][GetMemcpyCycles, 912] - Final Cycles : 16
[EST ALGO][ComputeStaticCycleHelper, 1668] Finish compute cycles for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL), Cycles: 16, LogicLatency: 16, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 16, LogicTemp: 16, GlueTemp: 0, TotalCycles: 560, LogicLatency: 496, GlueLatency: 0
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_10 - schedule spawn size: 0
Logic latency = 496, Unit cycles = 560, AccCycles = 560
[EST ALGO][ComputeStaticCycleHelper, 1643] Finish compute cycles for function declaration: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}, Cycles: 560, LogicLatency: 496, GlueLatency: 64
[EST ALGO][ComputeStaticCycleFromSchedule, 1897] ComputeTemp: 560, LogicTemp: 496, GlueTemp: 64, TotalCycles: 560, LogicLatency: 496, GlueLatency: 64
[EST ALGO][ComputeStaticCycleFromSchedule, 1903]F_0_0_0_10 - schedule spawn size: 0
[EST ALGO][ComputeStaticCycleHelper, 1599] Finish compute cycles for top kernel: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}, Cycles: 560
[EST ALGO][ComputeStaticCycleHelper, 1579] Unit cycle of top kernel:560
[EST ALGO][ComputeStaticCycleHelper, 1580] FIRST_CYCLES=560
[EST ALGO][ComputeStaticCycles, 38] Print schedule for initial framework.

FuncDecl(0):void func2(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4
-Schedule:
Function: TopoID:F_0_0_0_4 Unit Cycles:64 LogicLatency:0 GlueLatency:64
  (0,0) for(int i = 0;;,i < 64;,i++) TopoID:L_0_0_0_4_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:64 Unit Cycles:64 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(1):void func3(char * a,int * b,long * c) {...} TopoID:F_0_0_0_5
-Schedule:
Function: TopoID:F_0_0_0_5 Unit Cycles:32 LogicLatency:0 GlueLatency:32
  (0,0) for(int i = 0;;,i < 32;,i++) TopoID:L_0_0_0_5_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:32 Unit Cycles:32 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(2):void func1(char * a,int * b,long * c) {...} TopoID:F_0_0_0_3
-Schedule:
Function: TopoID:F_0_0_0_3 Unit Cycles:128 LogicLatency:0 GlueLatency:128
  (0,0) for(int i = 0;;,i < 128;,i++) TopoID:L_0_0_0_3_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:128 Unit Cycles:128 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(3):void test(char * a,int * b,::merlin_uint_512* c) {...} TopoID:F_0_0_0_10
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_10 Unit Cycles:560 LogicLatency:496 GlueLatency:64
  (0,0) merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL) TopoID:X_0_0_0_10_2_0_12_0 Unit Cycles=128 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_19_0 Unit Cycles=64 Total Cycles:0
            LogicLatency: 64, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_20_0 Unit Cycles=32 Total Cycles:0
            LogicLatency: 32, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL) TopoID:X_0_0_0_10_2_0_13_0 Unit Cycles=128 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_18_0 Unit Cycles=128 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) for(int i = 0;;,i < 64;,i++) TopoID:L_0_0_0_10_2_0_17 II:1 IL:1 UF:1 Flat:0 TCStatic:64 Unit Cycles:64 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL) TopoID:X_0_0_0_10_2_0_21_0 Unit Cycles=16 Total Cycles:0
            LogicLatency: 16, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
**********************************************************
3.2 Update cycles by memory burst
**********************************************************
**********************************************************
3.2.1 Update burst data size
**********************************************************
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 7
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
Update burst cycles by coefficien.
cycles = 134
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 1024, VarRefBitWidth = 8, for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 1024, for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 8, for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
Sub block bitwidth = 8
parallel bitwidth = 8
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
Update burst cycles by coefficien.
cycles = 134
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 4096, VarRefBitWidth = 32, for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 4096, for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 32, for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
Sub block bitwidth = 32
parallel bitwidth = 32
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 1998] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2091] Finish compute for func call: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 0, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 0, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
Sub block bitwidth = 0
parallel bitwidth = 0
[EST ALGO][UpdateBurstCyclesBySelf, 2001] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesBySelf, 1984] Start compute for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 0, SubBlocksDataSize = 0, for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2051] Start compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
Update burst cycles by coefficien.
cycles = 16
[EST ALGO][UpdateBurstCyclesBySelf, 2061] Finish compute for memcpy: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 8192, VarRefBitWidth = 512, for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 8192, for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 13312, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 13312, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
Sub block bitwidth = 512
parallel bitwidth = 512
[EST ALGO][UpdateBurstCyclesBySelf, 2044] SubBlocksBitwidth = 512, SubBlocksDataSize = 13312, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2174] VarRefTotalData = 0, VarRefBitWidth = 0, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2200] Get Burst Data Size = 13312, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesBySelf, 2203] Get Burst Bit Width = 512, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
**********************************************************
3.2.2 Update burst cycles factor
**********************************************************
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 9, block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2232] 111 Child Data Size = 13312, Parent Data Size = 13312, for block = void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2246] 222 Child Data Size = 13312, Parent Data Size = 13312, for block = void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2258] Factor = 1, for block = void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 8, block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 7
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int i = 0;i < 32;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 2, block: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 0, block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2223] - schedule parallel size: 1
[EST ALGO][UpdateBurstCyclesFactor, 2217] Start update factor for type : 3, block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCyclesFactor, 2218] - schedule sequntial size: 0
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCyclesFactor, 2273] BurstFactor = 1, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
**********************************************************
3.2.3 Update burst cycles
**********************************************************
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 7
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 134, CycleUnitStaticOrg = 134, BurstCycles = 128, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL)
ChildBurstCyclesMax = 128, ChildUnitCyclesMax = 134
Finish calculate for one parallel scope: Child burst cycles max = 128, Child unit cycles max = 134
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 64;i++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 64;i++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 64, CycleUnitStaticOrg = 64, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 64
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 64
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=64, for block: void func2(char * a,int * b,long * c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=64, for block: void func2(char * a,int * b,long * c) {...}
Child unit cycles sum = 64, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 64, CycleUnitStaticOrg = 64, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 64
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 64
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 32;i++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 32;i++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 32, CycleUnitStaticOrg = 32, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int i = 0;i < 32;i++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 32
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 32
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=32, for block: void func3(char * a,int * b,long * c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=32, for block: void func3(char * a,int * b,long * c) {...}
Child unit cycles sum = 32, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 32, CycleUnitStaticOrg = 32, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 32
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 32
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 134, CycleUnitStaticOrg = 134, BurstCycles = 128, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL)
ChildBurstCyclesMax = 128, ChildUnitCyclesMax = 134
Finish calculate for one parallel scope: Child burst cycles max = 128, Child unit cycles max = 134
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 1
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 128;i++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 128;i++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 128, CycleUnitStaticOrg = 128, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int i = 0;i < 128;i++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 128
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 128
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=128, for block: void func1(char * a,int * b,long * c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=128, for block: void func1(char * a,int * b,long * c) {...}
Child unit cycles sum = 128, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 128, CycleUnitStaticOrg = 128, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 128
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 128
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 64;i++) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: for(int i = 0;i < 64;i++) {...}
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 64, CycleUnitStaticOrg = 64, BurstCycles = 0, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgForStatement:for(int i = 0;i < 64;i++) {...}
ChildBurstCyclesMax = 0, ChildUnitCyclesMax = 64
Finish calculate for one parallel scope: Child burst cycles max = 0, Child unit cycles max = 64
[EST ALGO][UpdateBurstCycles, 2292] - schedule parallel size: 1
[EST ALGO][UpdateBurstCycles, 2301] Start calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCycles, 2302] ChildBurstFactor = 1
[EST ALGO][UpdateBurstCycles, 2288] - schedule sequntial size: 0
Prefinish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
Finish block Cycles calculation: ChildBurstCyclesSum=0, ChildUnitCyclesSum=0, for block: memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
Child unit cycles sum = 0, Child burst cycles sum = 0, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 16, CycleUnitStaticOrg = 16, BurstCycles = 16, SubBlocksCycles = 0, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionCallExp:memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL)
ChildBurstCyclesMax = 16, ChildUnitCyclesMax = 16
Finish calculate for one parallel scope: Child burst cycles max = 16, Child unit cycles max = 16
Prefinish block Cycles calculation: ChildBurstCyclesSum=272, ChildUnitCyclesSum=572, for block: void test(char * a,int * b,::merlin_uint_512* c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=272, ChildUnitCyclesSum=572, for block: void test(char * a,int * b,::merlin_uint_512* c) {...}
Child unit cycles sum = 572, Child burst cycles sum = 272, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 560, CycleUnitStaticOrg = 560, BurstCycles = 26, SubBlocksCycles = 272, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateBurstCycles, 2333] Finish calculate as subblock for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
ChildBurstCyclesMax = 26, ChildUnitCyclesMax = 560
Finish calculate for one parallel scope: Child burst cycles max = 26, Child unit cycles max = 560
Prefinish block Cycles calculation: ChildBurstCyclesSum=26, ChildUnitCyclesSum=560, for block: void test(char * a,int * b,::merlin_uint_512* c) {...}
Finish block Cycles calculation: ChildBurstCyclesSum=26, ChildUnitCyclesSum=560, for block: void test(char * a,int * b,::merlin_uint_512* c) {...}
Child unit cycles sum = 560, Child burst cycles sum = 26, Burst var ref cycles = 0
[EST ALGO][UpdateBurstCycles, 2422] CycleUnitStatic = 560, CycleUnitStaticOrg = 560, BurstCycles = 26, SubBlocksCycles = 26, VarRefCycles = 0, ComboBurstFactor = 1, for block: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][UpdateCycleByMemoryBurstTop, 92] Total cycle of top kernel:0
SECOND_CYCLES=560
[EST ALGO][ComputeStaticCycles, 48] Print schedule for after memory burst updating.

FuncDecl(0):void func2(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4
-Schedule:
Function: TopoID:F_0_0_0_4 Unit Cycles:64 LogicLatency:0 GlueLatency:64
  (0,0) for(int i = 0;;,i < 64;,i++) TopoID:L_0_0_0_4_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:64 Unit Cycles:64 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(1):void func3(char * a,int * b,long * c) {...} TopoID:F_0_0_0_5
-Schedule:
Function: TopoID:F_0_0_0_5 Unit Cycles:32 LogicLatency:0 GlueLatency:32
  (0,0) for(int i = 0;;,i < 32;,i++) TopoID:L_0_0_0_5_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:32 Unit Cycles:32 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(2):void func1(char * a,int * b,long * c) {...} TopoID:F_0_0_0_3
-Schedule:
Function: TopoID:F_0_0_0_3 Unit Cycles:128 LogicLatency:0 GlueLatency:128
  (0,0) for(int i = 0;;,i < 128;,i++) TopoID:L_0_0_0_3_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:128 Unit Cycles:128 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(3):void test(char * a,int * b,::merlin_uint_512* c) {...} TopoID:F_0_0_0_10
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_10 Unit Cycles:560 LogicLatency:496 GlueLatency:64
  (0,0) merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL) TopoID:X_0_0_0_10_2_0_12_0 Unit Cycles=134 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_19_0 Unit Cycles=64 Total Cycles:0
            LogicLatency: 64, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_20_0 Unit Cycles=32 Total Cycles:0
            LogicLatency: 32, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL) TopoID:X_0_0_0_10_2_0_13_0 Unit Cycles=134 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_18_0 Unit Cycles=128 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) for(int i = 0;;,i < 64;,i++) TopoID:L_0_0_0_10_2_0_17 II:1 IL:1 UF:1 Flat:0 TCStatic:64 Unit Cycles:64 Total Cycles:0
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL) TopoID:X_0_0_0_10_2_0_21_0 Unit Cycles=16 Total Cycles:0
            LogicLatency: 16, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
**********************************************************
3.3 Update total cycles.
**********************************************************
[EST ALGO][ComputeTotalStaticCycle, 2585] Start compute cycles for TASK. 
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_10 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void test(char * a,int * b,::merlin_uint_512* c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_10 - schedule sequntial size: 7
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void func2(char * a,int * b,long * c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_4 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_4 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int i = 0;i < 64;i++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 64, TmpTCStatic = 64, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_4_2_0_0 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_4_2_0_0 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int i = 0;i < 64;i++) {...}, IsPipeline=1, TotalCycles 64
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_4 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 64
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void func2(char * a,int * b,long * c) {...}, TotalCycles 64. TmpCycles 64
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0), TotalCycles 64
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void func3(char * a,int * b,long * c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_5 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_5 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int i = 0;i < 32;i++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 32, TmpTCStatic = 32, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_5_2_0_0 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_5_2_0_0 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int i = 0;i < 32;i++) {...}, IsPipeline=1, TotalCycles 32
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_5 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 32
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void func3(char * a,int * b,long * c) {...}, TotalCycles 32. TmpCycles 32
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0), TotalCycles 32
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2709] Start compute cycles for call func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0)
[EST ALGO][ComputeTotalStaticCycle, 2710] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2597] Start compute cycles for func void func1(char * a,int * b,long * c) {...}
[EST ALGO][ComputeTotalStaticCycle, 2598] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]F_0_0_0_3 - schedule sequntial size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_3 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int i = 0;i < 128;i++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 128, TmpTCStatic = 128, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_3_2_0_0 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_3_2_0_0 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int i = 0;i < 128;i++) {...}, IsPipeline=1, TotalCycles 128
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_3 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 128
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void func1(char * a,int * b,long * c) {...}, TotalCycles 128. TmpCycles 128
[EST ALGO][ComputeTotalStaticCycle, 2737] Compute cycles for function call: SgFunctionCallExp:func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0), TotalCycles 128
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycle, 2640] Start compute cycles for loop for(int i = 0;i < 64;i++) {...}
[EST ALGO][ComputeTotalStaticCycle, 2642] Input Factor = 1
[EST ALGO][ComputeTotalStaticCycle, 2678] UnrollFactor = 1, TCStatic = 64, TmpTCStatic = 64, NewFactor = 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2766]L_0_0_0_10_2_0_17 - schedule sequntial size: 0
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]L_0_0_0_10_2_0_17 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2686] Compute cycles for loop: SgForStatement:for(int i = 0;i < 64;i++) {...}, IsPipeline=1, TotalCycles 64
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2769]F_0_0_0_10 - schedule parallel size: 1
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_10 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 560
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}, TotalCycles 560. TmpCycles 560
[EST ALGO][ComputeTotalStaticCycleFromSchedule, 2783]F_0_0_0_10 - schedule spawn size: 0
[EST ALGO][ComputeTotalStaticCycle, 2613] Factor = 1, Cycles 560
[EST ALGO][ComputeTotalStaticCycle, 2617] Compute cycles for function declaration: SgFunctionDeclaration:void test(char * a,int * b,::merlin_uint_512* c) {...}, TotalCycles 560. TmpCycles 560
[EST ALGO][ComputeTotalStaticCycle, 2590] Unit cycle of top kernel:560
[EST ALGO][ComputeTotalStaticCycle, 2591] THIRD_CYCLES=560
[EST ALGO][ComputeStaticCycles, 59] Print schedule for after compute total cycle.

FuncDecl(0):void func2(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4
-Schedule:
Function: TopoID:F_0_0_0_4 Unit Cycles:64 LogicLatency:0 GlueLatency:64
  (0,0) for(int i = 0;;,i < 64;,i++) TopoID:L_0_0_0_4_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:64 Unit Cycles:64 Total Cycles:64
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(1):void func2(char * a,int * b,long * c) {...} TopoID:F_0_0_0_4
-Schedule:
Function: TopoID:F_0_0_0_4 Unit Cycles:64 LogicLatency:0 GlueLatency:64
  (0,0) for(int i = 0;;,i < 64;,i++) TopoID:L_0_0_0_4_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:64 Unit Cycles:64 Total Cycles:64
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(2):void func3(char * a,int * b,long * c) {...} TopoID:F_0_0_0_5
-Schedule:
Function: TopoID:F_0_0_0_5 Unit Cycles:32 LogicLatency:0 GlueLatency:32
  (0,0) for(int i = 0;;,i < 32;,i++) TopoID:L_0_0_0_5_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:32 Unit Cycles:32 Total Cycles:32
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(3):void func3(char * a,int * b,long * c) {...} TopoID:F_0_0_0_5
-Schedule:
Function: TopoID:F_0_0_0_5 Unit Cycles:32 LogicLatency:0 GlueLatency:32
  (0,0) for(int i = 0;;,i < 32;,i++) TopoID:L_0_0_0_5_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:32 Unit Cycles:32 Total Cycles:32
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(4):void func1(char * a,int * b,long * c) {...} TopoID:F_0_0_0_3
-Schedule:
Function: TopoID:F_0_0_0_3 Unit Cycles:128 LogicLatency:0 GlueLatency:128
  (0,0) for(int i = 0;;,i < 128;,i++) TopoID:L_0_0_0_3_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:128 Unit Cycles:128 Total Cycles:128
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(5):void func1(char * a,int * b,long * c) {...} TopoID:F_0_0_0_3
-Schedule:
Function: TopoID:F_0_0_0_3 Unit Cycles:128 LogicLatency:0 GlueLatency:128
  (0,0) for(int i = 0;;,i < 128;,i++) TopoID:L_0_0_0_3_2_0_0 II:1 IL:1 UF:1 Flat:0 TCStatic:128 Unit Cycles:128 Total Cycles:128
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(6):void test(char * a,int * b,::merlin_uint_512* c) {...} TopoID:F_0_0_0_10
-ExtPort0:a
-ExtPort1:b
-ExtPort2:c
-Schedule:
Function: TopoID:F_0_0_0_10 Unit Cycles:560 LogicLatency:496 GlueLatency:64
  (0,0) merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL) TopoID:X_0_0_0_10_2_0_12_0 Unit Cycles=134 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_19_0 Unit Cycles=64 Total Cycles:64
            LogicLatency: 64, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_20_0 Unit Cycles=32 Total Cycles:32
            LogicLatency: 32, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL) TopoID:X_0_0_0_10_2_0_13_0 Unit Cycles=134 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_18_0 Unit Cycles=128 Total Cycles:128
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) for(int i = 0;;,i < 64;,i++) TopoID:L_0_0_0_10_2_0_17 II:1 IL:1 UF:1 Flat:0 TCStatic:64 Unit Cycles:64 Total Cycles:64
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL) TopoID:X_0_0_0_10_2_0_21_0 Unit Cycles=16 Total Cycles:0
            LogicLatency: 16, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0

FuncDecl(7):void test(char * a,int * b,::merlin_uint_512* c) {...} TopoID:F_0_0_0_10
-Schedule:
Function: TopoID:F_0_0_0_10 Unit Cycles:560 LogicLatency:496 GlueLatency:64
  (0,0) void test(char * a,int * b,::merlin_uint_512* c) {...} TopoID:F_0_0_0_10 Unit Cycles=560 Total Cycles:560
            LogicLatency: 496, GlueLatency: 64, LogicLatencyIteration: 0, GlueLatencyIteration: 0
Function: TopoID:F_0_0_0_10 Unit Cycles:560 LogicLatency:496 GlueLatency:64
  (0,0) merlin_memcpy_0(a_buf_0,0,a,0,(sizeof(char ) *((unsigned long )128)),128UL) TopoID:X_0_0_0_10_2_0_12_0 Unit Cycles=134 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (1,0) func2((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_19_0 Unit Cycles=64 Total Cycles:64
            LogicLatency: 64, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (2,0) func3((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_20_0 Unit Cycles=32 Total Cycles:32
            LogicLatency: 32, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (3,0) merlin_memcpy_1(b_buf_0,0,b,0,(sizeof(int ) *((unsigned long )128)),512UL) TopoID:X_0_0_0_10_2_0_13_0 Unit Cycles=134 Total Cycles:0
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (4,0) func1((char *)a_buf_0,(int *)b_buf_0,(long *)c_buf_0) TopoID:X_0_0_0_10_2_0_18_0 Unit Cycles=128 Total Cycles:128
            LogicLatency: 128, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (5,0) for(int i = 0;;,i < 64;,i++) TopoID:L_0_0_0_10_2_0_17 II:1 IL:1 UF:1 Flat:0 TCStatic:64 Unit Cycles:64 Total Cycles:64
            LogicLatency: 0, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
  (6,0) memcpy_wide_bus_write_long_512((merlin_uint_512 *)c,&c_buf_0[0],(8 * 0),sizeof(long ) *((unsigned long )128),128LL) TopoID:X_0_0_0_10_2_0_21_0 Unit Cycles=16 Total Cycles:0
            LogicLatency: 16, GlueLatency: 0, LogicLatencyIteration: 0, GlueLatencyIteration: 0
[INFO] ========================================================
[INFO] 4. Merge Json file.
[INFO] ========================================================
[INFO] Writing performance report : step1.json
ID = F_0_0_0_10
Report unit number = 0
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 560
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
{
    "F_0_0_0_10": {
        "serially_execution":"0",
        "CYCLE_BURST":"26",
        "CYCLE_COMPUTE":"560",
    "CYCLE_UNIT":"560",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_12_0
Report unit number = 1
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_12_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"128",
        "CYCLE_COMPUTE":"134",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_19_0
Report unit number = 2
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 64
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_19_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"64",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_20_0
Report unit number = 3
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 32
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_20_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"32",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_13_0
Report unit number = 4
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_13_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"128",
        "CYCLE_COMPUTE":"134",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_18_0
Report unit number = 5
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 128
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_18_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"128",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_10_2_0_17
Report unit number = 6
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 64
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_10_2_0_17": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"64",
    "CYCLE_UNIT":"64",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"64",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_10_2_0_21_0
Report unit number = 7
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_21_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"16",
        "CYCLE_COMPUTE":"16",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = F_0_0_0_3
Report unit number = 8
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 128
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_3": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"128",
    "CYCLE_UNIT":"128",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_3_2_0_0
Report unit number = 9
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 128
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_3_2_0_0": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"128",
    "CYCLE_UNIT":"128",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"128",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = F_0_0_0_4
Report unit number = 10
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 64
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_4": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"64",
    "CYCLE_UNIT":"64",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_4_2_0_0
Report unit number = 11
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 64
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_4_2_0_0": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"64",
    "CYCLE_UNIT":"64",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"64",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = F_0_0_0_5
Report unit number = 12
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 32
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_5": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"32",
    "CYCLE_UNIT":"32",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_5_2_0_0
Report unit number = 13
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 32
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_5_2_0_0": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"32",
    "CYCLE_UNIT":"32",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"32",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = F_0_0_0_10
Report unit number = 14
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 560
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "TOP_test": {
        "CYCLE_UNIT":"560",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0",
        "func_name": "test",
             "topo_id": "TOP_test",
             "type":"top_kernel"
     },
ID = F_0_0_0_10
Report unit number = 15
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 560
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "F_0_0_0_10": {
        "serially_execution":"0",
        "CYCLE_BURST":"26",
        "CYCLE_COMPUTE":"560",
    "CYCLE_UNIT":"560",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_12_0
Report unit number = 16
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_12_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"128",
        "CYCLE_COMPUTE":"134",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_19_0
Report unit number = 17
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 64
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_19_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"64",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_20_0
Report unit number = 18
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 32
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_20_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"32",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_13_0
Report unit number = 19
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_13_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"128",
        "CYCLE_COMPUTE":"134",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = X_0_0_0_10_2_0_18_0
Report unit number = 20
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 128
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_18_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"0",
    "CYCLE_UNIT":"128",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    },
ID = L_0_0_0_10_2_0_17
Report unit number = 21
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 64
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "L_0_0_0_10_2_0_17": {
        "CYCLE_BURST":"0",
        "CYCLE_COMPUTE":"64",
    "CYCLE_UNIT":"64",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "trip-count":"64",
        "unroll-factor":"1",

        "poison":"0"
    },
ID = X_0_0_0_10_2_0_21_0
Report unit number = 22
[EST ALGO][AddSimOutputMaker, 1067]DBW - DRAMDataByteStatic: 0
[EST ALGO][AddSimOutputMaker, 1068]DBW - CycleStatic: 0
[EST ALGO][AddSimOutputMaker, 1069]DBW - FPGACLK_GHz: 0.25
    "X_0_0_0_10_2_0_21_0": {
        "serially_execution":"0",
        "CYCLE_BURST":"16",
        "CYCLE_COMPUTE":"16",
    "CYCLE_UNIT":"0",
        "CYCLE_TOT":"0",
        "DBW":"0.00",
        "poison":"0"
    }
}
Finish write file step1.json
#################################################
Delete some attribtues from json step1.json.
#################################################
Write output.json file.


#################################################
Delete some attribtues from json gen_token.json.
#################################################
Write output.json file.


[INFO] Performance estimation complete

====== Typedef replace ========>
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_extern_int_merlin_include_G_() {...}
=> nondefine func Orig: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
=> nondefine func REPLACE: SgFunctionDeclaration:void __merlin_dummy_kernel_pragma() {...}
[INFO] Beginning merging simulation output step1.json and annotated report gen_token.json into performance report perf_est.json
[INFO] Reading simulation output : step1.json
[INFO] Reading annotated report : gen_token.json
[INFO] Generating output file : perf_est.json
[INFO] Merge complete
cd .//lc_sim; merlin_safe_exec mars_opt __merlinkernel_test.cpp  -e c -p performance_estimation  -I\/curr\/hanhu\/unit_test\/test_case\/test0  -I\/curr\/hanhu\/unit_test\/test_case\/test0\/src\/  -I\/curr\/hanhu\/WORK\/Merlin_Compiler\/trunk\/build\/..\/\/mars-gen\/lib\/merlin -a MERGE -a step1.json -a gen_token.json -a perf_est.json :: __merlinkernel_test.cpp  :: 0
