
int g6(int a[1])
{
  int *p = &a[0];
  return 0;
}

int g5(int a[1])
{
  int *p = &a[0];
  g6(&( *p));
  return 0;
}

int g4(int a[1])
{
  int *p = &a[0];
  g5(&( *p));
  return 0;
}

int g3(int a[1])
{
  int *p = &a[0];
  g4(&( *p));
  return 0;
}

int g2(int a[1])
{
  int *p = &a[0];
  g3(&( *p));
  return 0;
}

int g1(int a[1])
{
  int *p = &a[0];
  g2(&( *p));
  return 0;
}
#pragma ACCEL kernel

int g0(int a[1])
{
  int *p = &a[0];
  g1(&( *p));
  return 0;
}
#pragma ACCEL kernel

void fun(int a[1],int b[1],int c[1],int d[1],int e[1],int f[1],int g[1])
{
  int aa = a[0];
  int bb = b[0];
  int cc = c[0];
  int dd = d[0];
  int ee = e[0];
  int ff = f[0];
  int gg = g[0];
}
#pragma ACCEL kernel

void hun(float a[1],const double b,int c[1][10][10],const char *const d)
{
  const float aa = a[0];
  const double bb = b;
  int (*cc)[10][10] = &c[0];
  const char *dd = d;
}

int main()
{
  int a;
  g0(&a);
  int b;
  fun(&b,&b,&b,&b,&b,&b,&b);
  float a3;
  double b3;
  int c3[10][10];
  char d3_;
  const char *d3 = (&d3_);
  hun(&a3,b3,&c3,d3);
  return 0;
}
