#include <stdio.h>
#include <stdlib.h>

struct As 
{
  int a;
}
;
struct As g_9;

void g9()
{
  g_9 . a = 44;
  return ;
}
int g_8 = 99;

void g8()
{
  g_8 = 22;
// int g_8 = 32;
  g9();
  return ;
}
static void __merlin_dummy_g_7();
int g_7 = 99;

void g7(int *g_7)
{
   *g_7 = 42;
  g8();
  return ;
}
int g_6;

int g6(int *g_7)
{
  g_6 = 0;
  g7(g_7);
  return 0;
}
int *g_5;

int g5(int *g_7)
{
// g_5 = NULL;
  g6(g_7);
  return 0;
}
#define SIZE 32
int g_4[32];

int g4(int *g_7)
{
  for (int i = 0; i < 32; ++i) {
    g_4[i] = 0;
  }
  g5(g_7);
  return 0;
}
int *g_3[32];

int g3(int *g_7)
{
  for (int i = 0; i < 32; ++i) {
    g_3[i] = 0L;
  }
  g4(g_7);
  return 0;
}
const int *g_2;

int g2(int *g_7)
{
  g_2 = 0L;
  g3(g_7);
  return 0;
}
const int **g_1;

int g1(int *g_7)
{
  g_1 = 0L;
  g2(g_7);
  return 0;
}
extern int g_7;

int __merlinwrapper_g0()
{
}
// int &const g_0 = g_6;
int g_0 = g_6;
#pragma ACCEL kernel

int g0(int *g_7)
{
  
#pragma ACCEL interface variable=g_7 scope_type=global depth=1 max_depth=1
  g_0 = 0;
  g1(g_7);
  return 0;
}

int main()
{
  g0(&g_7);
  int a = g_0;
  void *b = g_1;
  int *c;
  for (int i = 0; i < 32; ++i) {
    c = g_3[i];
  }
  int d;
  for (int i = 0; i < 32; ++i) {
    d = g_4[i];
  }
  void *e = g_5;
  int f = g_6;
  return 0;
}
