#include<ap_int.h>
// 1. loop structure
// 2. function structure
// 3. access pattern
// 4. pragma modes
#pragma ACCEL kernel

void func_top_0()
{
  int a[100];
  int b[100];
  int i;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_1()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_2()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    for (j = 0; j < 8; j++) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_2_1()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 8; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_3()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL parallel complete
{
    
#pragma ACCEL PARALLEL COMPLETE
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[i][j];
    }
  }
}
//Loop structure 
#pragma ACCEL kernel

void func_top_4()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[i][j];
    }
    for (j = 0; j < 8; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i + 1][j] = b[i][j + 1];
    }
  }
}
#pragma ACCEL kernel

void func_top_5()
{
  int a[100][100];
  int b[100][100];
  int i = 0;
  int j = 0;
  for (j = 0; j < 100; j++) {
    
#pragma ACCEL PIPELINE AUTO
    a[i + 1][j] = b[i][j + 1];
  }
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[i][j];
    }
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i + 2][j] = b[i + 2][j];
    }
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i + 1][j] = b[i][j + 1];
    }
  }
  for (j = 0; j < 100; j++) {
    
#pragma ACCEL PIPELINE AUTO
    a[i + 1][j] = b[i][j + 1];
  }
}
#pragma ACCEL kernel

void func_top_6()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      if (a[0][0]) {
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_7()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    if (a[0][0]) {
      for (j = 0; j < 100; j++) {
        
#pragma ACCEL PIPELINE AUTO
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_8()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    if (a[0][0]) {
      for (j = 0; j < 8; j++) {
        
#pragma ACCEL PARALLEL COMPLETE
        a[i][j] = b[i][j];
      }
    }
  }
}
// sub function

void sub_0(int a[100][100],int b[100][100])
{
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    if (a[0][0]) {
      for (j = 0; j < 100; j++) {
        
#pragma ACCEL PIPELINE AUTO
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_9()
{
  int a[100][100];
  int b[100][100];
  sub_0(a,b);
}

int sub_0(int a[100],int b[100][100],int c)
{
  int c_copy = 1;
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i] = b[i][j] + 1;
    }
  }
  return 1024;
}

void sub_0_1(int a[100],int b[100][100],int c)
{
  int c_copy = 1;
  int i;
  int j;
  for (j = 0; j < 8; j++) {
    
#pragma ACCEL PARALLEL COMPLETE
    a[i] = b[i][j] + 1;
  }
}
#pragma ACCEL kernel

void func_top_10()
{
  int a[100][100];
  int b[100][100];
  int i;
  int c = 1;
  for (i = 0; i < 100; i++) {
    sub_0(a[0],b,1);
  }
}
#pragma ACCEL kernel

void func_top_10_1()
{
  int a[100][100];
  int b[100][100];
  int i;
  int c = 1;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    sub_0_1(a[0],b,1);
  }
}

void sub_1(int a[100][100],int b[100][100])
{
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    if (a[0][0]) {
      for (j = 0; j < 100; j++) {
        
#pragma ACCEL PIPELINE AUTO
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_11()
{
  int a[100][100];
  int b[100][100];
  sub_1(a,b);
  sub_1(a,b);
}

int sub_2(int b[100][100],int i,int j)
{
  return b[i][j] + b[i][j + 1];
}

int sub_00(int a[100],int b[100][100],int c)
{
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i] = sub_2(b,i,j);
    }
  }
  return 1024;
}
#pragma ACCEL kernel

void func_top_12()
{
  int a[100][100];
  int b[100][100];
  int c = 1;
  int sum = sub_00(a[0],b,1);
}
#pragma ACCEL kernel

void func_top_12_1()
{
  int a[100][100];
  int b[100][100];
  int i;
  int c = 1;
  int sum;
  for (i = 0; i < 100; i++) {
    sum += sub_00(a[0],b,1);
  }
}
#pragma ACCEL kernel

void func_top_12_2()
{
  int a[100][100];
  int b[100][100];
  int c = 1;
  int sum;
  for (int i = 0; i < 8; i++) {
    sum += sub_00(a[0],b,1);
  }
}
// Acccess pattern
#pragma ACCEL kernel

void func_top_13()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  int k;
  for (k = 0; k < 100; k++) {
    
#pragma ACCEL PIPELINE AUTO
    for (i = 0; i < 8; i++) {
      
#pragma ACCEL PARALLEL COMPLETE
      for (j = 0; j < 8; j++) {
        
#pragma ACCEL PARALLEL COMPLETE
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_14()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[i][j] + b[i + 1][j] + b[i - 1][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_15()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[2 * i][j] + b[2 * i + 1][j] + b[2 * i - 1][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_16()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      while(i == j){
        
#pragma ACCEL PIPELINE AUTO
        a[i][j] = b[16 * i][j] + b[16 * i + 1][j] + b[16 * i - 1][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_17()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 16; i++) {
    
#pragma ACCEL PARALLEL COMPLETE
    for (j = 0; j < 16; j++) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[10587946 * i][j] + b[10587946 * i + 1][j] + b[10587946 * i - 1][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_18()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 8; i++) {
    
#pragma ACCEL PARALLEL COMPLETE
    for (j = 0; j < 8; j++) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[10587946 * i][j] + b[35935221 * i + 1][j] + b[43453045 * i - 1][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_19()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    if (i == 0) {
      a[i][0] = 0;
    }
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[i][j] + b[i + 1][j] + b[i + 2][j] + b[i + 3][j] + b[i + 4][j] + b[i + 5][j] + b[i + 6][j] + b[i + 7][j] + b[i + 8][j] + b[i + 9][j] + b[i + 10][j] + b[i + 11][j] + b[i + 12][j] + b[i + 13][j] + b[i + 14][j] + b[i + 15][j] + b[i + 16][j] + b[i + 17][j] + b[i + 18][j] + b[i + 19][j] + b[i + 20][j] + b[i + 21][j] + b[i + 22][j] + b[i + 23][j] + b[i + 24][j] + b[i + 25][j] + b[i + 26][j] + b[i + 27][j] + b[i + 28][j] + b[i + 29][j] + b[i + 30][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_20()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    for (j = 0; j < 8; j++) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[i][j] + b[i + 1][j] + b[i + 2][j] + b[i + 3][j] + b[i + 4][j] + b[i + 5][j] + b[i + 6][j] + b[i + 7][j] + b[i + 8][j] + b[i + 9][j] + b[i + 10][j] + b[i + 11][j] + b[i + 12][j] + b[i + 13][j] + b[i + 14][j] + b[i + 15][j] + b[i + 16][j] + b[i + 17][j] + b[i + 18][j] + b[i + 19][j] + b[i + 20][j] + b[i + 21][j] + b[i + 22][j] + b[i + 23][j] + b[i + 24][j] + b[i + 25][j] + b[i + 26][j] + b[i + 27][j] + b[i + 28][j] + b[i + 29][j] + b[i + 30][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_22()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[3 * i][j] + b[2 * i][j] + b[1 * i - 1][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_23()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[3 * i][j] + b[2 * i][j] + b[1 * i - 1][j];
    }
  }
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[3 * i][j] + b[2 * i][j] + b[1 * i - 1][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_24()
{
  int a[100][100];
  int i;
  int j;
  for (i = 0; i < 25; i++) 
// Original: #pragma ACCEL PARALLEL FACTOR=4
{
    for (int i_sub = 0; i_sub < 4; ++i_sub) 
// Original: #pragma ACCEL PARALLEL FACTOR=4
{
      
#pragma ACCEL PARALLEL 
      for (j = 0; j < 100; j++) {
        
#pragma ACCEL PIPELINE AUTO
        a[i * 4 + i_sub][j] += a[i * 4 + i_sub][j] * a[i * 4 + i_sub - 1][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_32()
{
  int a[100];
  int b[100];
  int i;
  
#pragma ACCEL PIPELINE II=1
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_33()
{
  int a[100];
  int b[100];
  int i;
  
#pragma ACCEL pipeline_parallel factor = 4
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_33_1()
{
  int a[100];
  int b[100];
  int i;
  
#pragma ACCEL parallel factor = 4
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_34()
{
  int a[100];
  int b[100];
  int i;
  int NN = 100;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    a[i] = b[i];
  }
}
//test loop range
#pragma ACCEL kernel

void func_top_35()
{
  int a[100];
  int b[100];
  int i;
  int NN = 100;
  for (i = - 1; i < 7; i++) {
    
#pragma ACCEL PARALLEL COMPLETE
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_38()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL parallel complete
{
    
#pragma ACCEL PARALLEL COMPLETE
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_41()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  int k;
  for (k = 0; k < 100; k++) {
    for (i = 0; i < 8; i++) 
// Original: #pragma ACCEL parallel complete
{
      
#pragma ACCEL PARALLEL COMPLETE
      for (j = 0; j < 100; j++) {
        
#pragma ACCEL PIPELINE AUTO
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_43()
{
  int a[100];
  int b[100];
  int i;
  int k;
  for (k = 0; k < 100; k++) {
    
#pragma ACCEL PIPELINE AUTO
    for (i = 0; i < 8; i++) {
      
#pragma ACCEL PARALLEL COMPLETE
      b[i] = i;
    }
    for (i = 0; i < 8; i++) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i] = b[i];
    }
  }
}
#pragma ACCEL kernel

void func_top_44()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 8; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      a[i][j] = b[3 * i][j] + b[2 * i][j] + b[1 * i - 1][j];
    }
  }
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PIPELINE AUTO
    int k;
    for (j = 0; j < 8; j++) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[3 * i][i + j] + b[2 * i][i + j] + b[1 * i - 1][i + j + 1];
    }
  }
}
#define _PB_N 5
#define n 5
#pragma ACCEL kernel

void func_top_45(int A_out[5],int k)
{
  int A[5][5][5][5][5];
  int i0;
  int i1;
  int i2;
  int i3;
  int i4;
  int j;
//	for( i0 = 0 ; i0 <  n-1; i0++){
  for (i1 = 0; i1 < 5 - 1; i1++) {
    
#pragma ACCEL PARALLEL COMPLETE
    for (i2 = 0; i2 < 5 - 1; i2++) {
      
#pragma ACCEL PARALLEL COMPLETE
      for (i3 = 0; i3 < 5 - 1; i3++) {
        
#pragma ACCEL PARALLEL COMPLETE
        for (i4 = 0; i4 < 5 - 1; i4++) {
          
#pragma ACCEL PARALLEL COMPLETE
          for (j = 0; j < 5 - 1; j++) {
            
#pragma ACCEL PARALLEL COMPLETE
            A[i1][i2][i3][i4][j] = j;
          }
        }
      }
    }
  }
/*Array Access*/
//    for( i0 = 0 ; i0 <  n-1; i0++){
  for (i1 = 0; i1 < 5 - 1; i1++) {
    
#pragma ACCEL PARALLEL COMPLETE
    for (i2 = 0; i2 < 5 - 1; i2++) {
      
#pragma ACCEL PARALLEL COMPLETE
      for (i3 = 0; i3 < 5 - 1; i3++) {
        
#pragma ACCEL PARALLEL COMPLETE
        for (i4 = 0; i4 < 5 - 1; i4++) {
          
#pragma ACCEL PARALLEL COMPLETE
          for (j = 0; j < 5 - 1; j++) {
            
#pragma ACCEL PARALLEL COMPLETE
            int r0 = A[i1][i2][i3][i4][j];
            A_out[j] = r0 / 8;
          }
        }
      }
    }
  }
}

void sub_46(int a[100][100])
{
  int b[100][100];
  int i;
  int j;
  int k;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma ACCEL PIPELINE
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PIPELINE AUTO
      int var1 = i + 1;
      int var0 = i;
      for (k = 0; k < 8; k++) {
        
#pragma ACCEL PARALLEL COMPLETE
        a[var1][k] += b[var1][j + k];
        a[var0][k] += b[var0][j + k];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_46()
{
  int aa[100][100];
  sub_46(aa);
}
#pragma ACCEL kernel

void func_top_47()
{
  int a[100][100];
  int b[100][100];
  class ap_int< 10 > i;
  class ap_int< 10 > j;
  for (i = 0; i<100; i ++ ) {
    
#pragma ACCEL PIPELINE AUTO
    for (j = 0; j<8; j ++ ) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_48()
{
  int a[100][100];
  int b[100][100];
  for (class ap_uint< 8 > i(0); i<100; i ++ ) {
    
#pragma ACCEL PIPELINE AUTO
    for (class ap_uint< 8 > j(0); j<8; j ++ ) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[i][j];
    }
  }
}
