#define VEC_SIZE 10000
#define SUB_SIZE 100
#pragma ACCEl kernel

void func_top_2_1(int a[100][100],int b[100][100])
{
  int i;
  int j;
  int a_buf[100][100];
  loop1:
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    loop2:
    for (j = 0; j < 100; j++) {
      a_buf[i][j] = b[i][j];
      if (j == 5) 
        goto loop1;
    }
  }
}
#pragma ACCEl kernel

void func_top_2_2(int a[100][100],int b[100][100])
{
  int i;
  int j;
  int a_buf[100][100];
  loop1:
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    loop2:
    for (j = 0; j < 100; j++) {
      a_buf[i][j] = b[i][j];
      if (j == 5) 
        goto r1;
    }
    r1:
    break; 
  }
}

void mars_kernel_0_9_node_0_stage_0(int i,int exec,int a_buf[100][100],int b[100][100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int j;
    for (j = 0; j < 100; j++) {
      a_buf[i][j] = b[i][j];
    }
// Original label: loop2:for(j = 0;j < 100;j++) {a_buf[i][j] = b[i][j];}
  }
}

void mars_kernel_0_9_node_1_stage_1(int i,int exec,int a_buf[100][100],int *sum)
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
     *sum += a_buf[i][0];
  }
}

void mars_kernel_0_9(int mars_i,int mars_init,int mars_cond,int mars_a_buf_0[100][100],int mars_a_buf_1[100][100],int b[100][100],int *mars_sum_1)
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_9_node_0_stage_0(mars_i - 0,(int )(mars_i >= mars_init + 0 & mars_i <= mars_cond + 0),mars_a_buf_0,b);
  mars_kernel_0_9_node_1_stage_1(mars_i - 1,(int )(mars_i >= mars_init + 1 & mars_i <= mars_cond + 1),mars_a_buf_1,mars_sum_1);
}
#pragma ACCEl kernel

void func_top_2_3(int a[100][100],int b[100][100])
{
  int i;
  int j;
  int sum = 0;
  int a_buf[100][100];
// Original label: loop1:for(i = 0;i < 100;i++) {#pragma ACCEL pipelineloop2:for(j = 0;j < 100;j++) {a_buf[i][j] = b[i][j];}sum += a_buf[i][0];}
  int mars_count_0_9 = 0;
  int mars_kernel_0_9_a_buf_0[100][100];
  int mars_kernel_0_9_a_buf_1[100][100];
  for (i = 0; i < 100 + 1; i++) 
// Original: #pragma ACCEL pipeline
{
    if (mars_count_0_9 == 0) 
      mars_kernel_0_9(i,0,99,mars_kernel_0_9_a_buf_0,mars_kernel_0_9_a_buf_1,b,&sum);
     else 
      mars_kernel_0_9(i,0,99,mars_kernel_0_9_a_buf_1,mars_kernel_0_9_a_buf_0,b,&sum);
    mars_count_0_9++;
    if (mars_count_0_9 == 2) 
      mars_count_0_9 = 0;
  }
// Original label: loop2:for(j = 0;j < 100;j++) {a_buf[i][j] = b[i][j];}
}
#pragma ACCEl kernel

void func_top_2_4(int a[100][100],int b[100][100],int c)
{
  int sum = 0;
  int i;
  int j;
  int a_buf[100][100];
  loop1:
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    loop2:
    for (j = 0; j < 100; j++) {
      a_buf[i][j] = b[i][j];
    }
    sum += a_buf[i][0];
  }
  if (c > 0) 
    goto loop2;
}
#pragma ACCEL kernel

void func_top_2_5(int a[100][100],int b[100][100])
{
  int i;
  int j;
  int a_buf[100][100];
  loop1:
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    loop2:
    for (j = 0; j < 100; j++) {
      a_buf[i][j] = b[i][j];
    }
    goto loop2;
  }
}
#pragma ACCEL kernel

void func_top_2_6(int a[100][100],int b[100][100])
{
  int i;
  int j;
  int a_buf[100][100];
  loop1:
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    loop2:
    for (j = 0; j < 100; j++) {
      a_buf[i][j] = b[i][j];
      if (i < 5) 
        goto loop2;
    }
    a[0][i] = 0;
  }
}
#pragma ACCEL kernel

void vec_add_kernel(int *a,int *b,int *c,int inc)
{
  for (int i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    int local_buf[100];
    for (int j = 0; j < 100; j++) {
      local_buf[j] = a[i * 100 + j] + b[i * 100 + j] + c[i * 100 + j];
    }
    for (int j = 0; j < 100; j++) {
      c[i * 100 + j] += local_buf[j];
    }
    if (i > inc) {
      goto L0;
    }
  }
  L0:
  return ;
}

int main()
{
  int aa[100][100];
  int bb[100][100];
  int cc[100][100];
  int *a;
  int *b;
  int *c;
  int a_s;
  int b_s;
  int c_s;
  int d_s;
  float aa_f[100][100];
  float bb_f[100][100];
  float cc_f[100][100];
  float *a_f;
  float *b_f;
  float *c_f;
  float a_s_f;
  float b_s_f;
  float c_s_f;
  float d_s_f;
  int d;
  func_top_2_1(aa,bb);
  func_top_2_2(aa,bb);
  func_top_2_3(aa,bb);
  func_top_2_4(aa,bb,d);
}
