#include<string.h>
#define VEC_SIZE 64
#define VEC_flat_SIZE 4096
#define aa(p, n) (a[(p)*VEC_SIZE + (n)])
#define bb(p, n) (b[(p)*VEC_SIZE + (n)])
#define cc(p, n) (c[(p)*VEC_SIZE + (n)])
#define a_buf(p, n) (abuf[(p)*VEC_SIZE + (n)])

void mars_kernel_0_1_node_0_stage_0(int k,int exec,float *a,float a_2_0_buf[4033])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)(&a_2_0_buf[0]),(const void *)(&a[k]),sizeof(float ) * ((unsigned long )4033));
  }
}

void mars_kernel_0_1_node_1_stage_0(int k,int exec,float *b,float b_2_0_buf[64])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)(&b_2_0_buf[0]),(const void *)(&b[64 * k]),sizeof(float ) * ((unsigned long )64));
  }
}

void mars_kernel_0_1_bus(int mars_k,int mars_init,int mars_cond,float *a,float mars_a_2_0_buf_0[4033],float mars_a_2_0_buf_1[4033],float *b,float mars_b_2_0_buf_0[64],float mars_b_2_0_buf_1[64],float mars_c_2_0_buf_1[4096])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_1_node_0_stage_0(mars_k - 0,(int )(mars_k >= mars_init + 0 & mars_k <= mars_cond + 0),a,mars_a_2_0_buf_0);
  mars_kernel_0_1_node_1_stage_0(mars_k - 0,(int )(mars_k >= mars_init + 0 & mars_k <= mars_cond + 0),b,mars_b_2_0_buf_0);
}

void mars_kernel_0_1_node_2_stage_1(int k,int exec,float a_2_0_buf[4033],float b_2_0_buf[64],float c_2_0_buf[4096])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int j;
    int i;
    for (i = 0; i < 64; i++) {
//#pragma ACCEL pipeline
      for (j = 0; j < 64; j++) {
        
#pragma ACCEL parallel complete
        c_2_0_buf[64 * i + j] += a_2_0_buf[64 * i] * b_2_0_buf[j];
      }
    }
  }
}

void mars_kernel_0_1_comp(int mars_k,int mars_init,int mars_cond,float *a,float mars_a_2_0_buf_0[4033],float mars_a_2_0_buf_1[4033],float *b,float mars_b_2_0_buf_0[64],float mars_b_2_0_buf_1[64],float mars_c_2_0_buf_1[4096])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_1_node_2_stage_1(mars_k - 1,(int )(mars_k >= mars_init + 1 & mars_k <= mars_cond + 1),mars_a_2_0_buf_1,mars_b_2_0_buf_1,mars_c_2_0_buf_1);
}

void mars_kernel_0_1(int mars_k,int mars_init,int mars_cond,float *a,float mars_a_2_0_buf_0[4033],float mars_a_2_0_buf_1[4033],float *b,float mars_b_2_0_buf_0[64],float mars_b_2_0_buf_1[64],float mars_c_2_0_buf_1[4096])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_1_bus(mars_k,mars_init,mars_cond,a,mars_a_2_0_buf_0,mars_a_2_0_buf_1,b,mars_b_2_0_buf_0,mars_b_2_0_buf_1,mars_c_2_0_buf_1);
  mars_kernel_0_1_comp(mars_k,mars_init,mars_cond,a,mars_a_2_0_buf_0,mars_a_2_0_buf_1,b,mars_b_2_0_buf_0,mars_b_2_0_buf_1,mars_c_2_0_buf_1);
}
#pragma ACCEL kernel

void matmul_kernel(float *a,float *b,float *c)
{
  float c_2_0_buf[4096];
  float b_2_0_buf[64];
  float a_2_0_buf[4033];
  int i;
  int j;
  int k;
//    for (i = 0 ;i < VEC_SIZE; i++) {
//        for (j = 0 ;j < VEC_SIZE; j++) {
//             cc(i,j)=0;
//        }
//    }
  memcpy((&c_2_0_buf[0]),(&c[0]),sizeof(float ) * 4096);
  int mars_count_0_1 = 0;
  float mars_kernel_0_1_a_2_0_buf_0[4033];
  float mars_kernel_0_1_a_2_0_buf_1[4033];
  float mars_kernel_0_1_b_2_0_buf_0[64];
  float mars_kernel_0_1_b_2_0_buf_1[64];
  for (k = 0; k < 64 + 1; k++) 
/* Original: #pragma ACCEL pipeline */
{
    if (mars_count_0_1 == 0) 
      mars_kernel_0_1(k,0,63,a,mars_kernel_0_1_a_2_0_buf_0,mars_kernel_0_1_a_2_0_buf_1,b,mars_kernel_0_1_b_2_0_buf_0,mars_kernel_0_1_b_2_0_buf_1,c_2_0_buf);
     else 
      mars_kernel_0_1(k,0,63,a,mars_kernel_0_1_a_2_0_buf_1,mars_kernel_0_1_a_2_0_buf_0,b,mars_kernel_0_1_b_2_0_buf_1,mars_kernel_0_1_b_2_0_buf_0,c_2_0_buf);
    mars_count_0_1++;
    if (mars_count_0_1 == 2) 
      mars_count_0_1 = 0;
  }
  memcpy((&c[0]),(&c_2_0_buf[0]),sizeof(float ) * 4096);
}
