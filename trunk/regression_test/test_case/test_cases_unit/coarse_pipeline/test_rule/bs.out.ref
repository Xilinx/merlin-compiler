#define fptype float
// Cumulative Normal Distribution Function
// See Hull, Section 11.8, P.243-244
#define inv_sqrt_2xPI 0.39894228040143270286
#include "math.h"
#include "stdio.h"
#include <string.h>
#define CONST_E (2.71828182845904)

float my_exp(float x)
{
  int sign = x >= 0?1 : 0;
  float absx = (fabs(x));
  float int_part = 1.0;
  float y = (absx - floor(absx));
  float frac_part = 1 + y + y * y / 2 + y * y * y / 6 + y * y * y * y / 24;
//for (i = 0; i < (int)(floor(absx)); i++)
//{
//	int_part *= CONST_E;
//}
  return sign?1 / (int_part * frac_part) : int_part * frac_part;
}

float CNDF(float InputX)
{
  int sign;
  float OutputX;
  float xInput;
  float xNPrimeofX;
  float expValues;
  float xK2;
  float xK2_2;
  float xK2_3;
  float xK2_4;
  float xK2_5;
  float xLocal;
  float xLocal_1;
  float xLocal_2;
  float xLocal_3;
// Check for negative value of InputX
  if (InputX < 0.0) {
    InputX = -InputX;
    sign = 1;
  }
   else 
    sign = 0;
  xInput = InputX;
// Compute NPrimeX term common to both four & six decimal accuracy calcs
  expValues = my_exp((float )(- 0.5f * InputX * InputX));
  xNPrimeofX = expValues;
  xNPrimeofX = (xNPrimeofX * 0.39894228040143270286);
  xK2 = (0.2316419 * xInput);
  xK2 = (1.0 + xK2);
  xK2 = (1.0 / xK2);
  xK2_2 = xK2 * xK2;
  xK2_3 = xK2_2 * xK2;
  xK2_4 = xK2_3 * xK2;
  xK2_5 = xK2_4 * xK2;
  xLocal_1 = (xK2 * 0.319381530);
  xLocal_2 = (xK2_2 * - 0.356563782);
  xLocal_3 = (xK2_3 * 1.781477937);
  xLocal_2 = xLocal_2 + xLocal_3;
  xLocal_3 = (xK2_4 * - 1.821255978);
  xLocal_2 = xLocal_2 + xLocal_3;
  xLocal_3 = (xK2_5 * 1.330274429);
  xLocal_2 = xLocal_2 + xLocal_3;
  xLocal_1 = xLocal_2 + xLocal_1;
  xLocal = xLocal_1 * xNPrimeofX;
  xLocal = (1.0 - xLocal);
  OutputX = xLocal;
  if (sign) {
    OutputX = (1.0 - OutputX);
  }
  return OutputX;
}
// For debugging

void print_xmm(float in,char *s)
{
  printf("%s: %f\n",s,in);
}

float BlkSchlsEqEuroNoDiv(float sptprice,float strike,float rate,float volatility,float time,int otype,float timet)
{
  float OptionPrice;
// local private working variables for the calculation
  float xStockPrice;
  float xStrikePrice;
  float xRiskFreeRate;
  float xVolatility;
  float xTime;
  float xSqrtTime;
  float logValues;
  float xLogTerm;
  float xD1;
  float xD2;
  float xPowerTerm;
  float xDen;
  float d1;
  float d2;
  float FutureValueX;
  float NofXd1;
  float NofXd2;
  float NegNofXd1;
  float NegNofXd2;
  xStockPrice = sptprice;
  xStrikePrice = strike;
  xRiskFreeRate = rate;
  xVolatility = volatility;
  xTime = time;
  xSqrtTime = (sqrt(xTime));
//logValues = log( sptprice / strike );
  logValues = sptprice / strike;
  xLogTerm = logValues;
  xPowerTerm = xVolatility * xVolatility;
  xPowerTerm = (xPowerTerm * 0.5);
  xD1 = xRiskFreeRate + xPowerTerm;
  xD1 = xD1 * xTime;
  xD1 = xD1 + xLogTerm;
  xDen = xVolatility * xSqrtTime;
  xD1 = xD1 / xDen;
  xD2 = xD1 - xDen;
  d1 = xD1;
  d2 = xD2;
  NofXd1 = CNDF(d1);
  NofXd2 = CNDF(d2);
  FutureValueX = strike * my_exp((float )(-rate * time));
  if (otype == 0) {
    OptionPrice = sptprice * NofXd1 - FutureValueX * NofXd2;
  }
   else {
    NegNofXd1 = (1.0 - NofXd1);
    NegNofXd2 = (1.0 - NofXd2);
    OptionPrice = FutureValueX * NegNofXd2 - sptprice * NegNofXd1;
  }
  return OptionPrice;
}

void mars_kernel_0_1_node_0_stage_0(int k,int exec,float *sptprice,float sptprice_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)sptprice_buf,(const void *)(&sptprice[k * 100]),sizeof(float ) * ((unsigned long )100));
  }
}

void mars_kernel_0_1_node_1_stage_0(int k,int exec,float *rate,float rate_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)rate_buf,(const void *)(&rate[k * 100]),sizeof(float ) * ((unsigned long )100));
  }
}

void mars_kernel_0_1_node_2_stage_0(int k,int exec,float *strike,float strike_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)strike_buf,(const void *)(&strike[k * 100]),sizeof(float ) * ((unsigned long )100));
  }
}

void mars_kernel_0_1_node_3_stage_0(int k,int exec,float *volatility,float volatility_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)volatility_buf,(const void *)(&volatility[k * 100]),sizeof(float ) * ((unsigned long )100));
  }
}

void mars_kernel_0_1_node_4_stage_0(int k,int exec,float *otime,float otime_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)otime_buf,(const void *)(&otime[k * 100]),sizeof(float ) * ((unsigned long )100));
  }
}

void mars_kernel_0_1_node_5_stage_0(int k,int exec,float *otype,float otype_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)otype_buf,(const void *)(&otype[k * 100]),sizeof(float ) * ((unsigned long )100));
  }
}

void mars_kernel_0_1_node_7_stage_2(int k,int exec,float *prices,float prices_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    memcpy((void *)(&prices[k * 100]),(const void *)prices_buf,sizeof(float ) * ((unsigned long )100));
  }
}

void mars_kernel_0_1_bus(int mars_k,int mars_init,int mars_cond,float *otime,float mars_otime_buf_0[100],float mars_otime_buf_1[100],float *otype,float mars_otype_buf_0[100],float mars_otype_buf_1[100],float *prices,float mars_prices_buf_1[100],float mars_prices_buf_2[100],float *rate,float mars_rate_buf_0[100],float mars_rate_buf_1[100],float *sptprice,float mars_sptprice_buf_0[100],float mars_sptprice_buf_1[100],float *strike,float mars_strike_buf_0[100],float mars_strike_buf_1[100],float *volatility,float mars_volatility_buf_0[100],float mars_volatility_buf_1[100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_1_node_0_stage_0(mars_k - 0,(int )(mars_k >= mars_init + 0 & mars_k <= mars_cond + 0),sptprice,mars_sptprice_buf_0);
  mars_kernel_0_1_node_1_stage_0(mars_k - 0,(int )(mars_k >= mars_init + 0 & mars_k <= mars_cond + 0),rate,mars_rate_buf_0);
  mars_kernel_0_1_node_2_stage_0(mars_k - 0,(int )(mars_k >= mars_init + 0 & mars_k <= mars_cond + 0),strike,mars_strike_buf_0);
  mars_kernel_0_1_node_3_stage_0(mars_k - 0,(int )(mars_k >= mars_init + 0 & mars_k <= mars_cond + 0),volatility,mars_volatility_buf_0);
  mars_kernel_0_1_node_4_stage_0(mars_k - 0,(int )(mars_k >= mars_init + 0 & mars_k <= mars_cond + 0),otime,mars_otime_buf_0);
  mars_kernel_0_1_node_5_stage_0(mars_k - 0,(int )(mars_k >= mars_init + 0 & mars_k <= mars_cond + 0),otype,mars_otype_buf_0);
  mars_kernel_0_1_node_7_stage_2(mars_k - 2,(int )(mars_k >= mars_init + 2 & mars_k <= mars_cond + 2),prices,mars_prices_buf_2);
}

void mars_kernel_0_1_node_6_stage_1(int k,int exec,float otime_buf[100],float otype_buf[100],float prices_buf[100],float rate_buf[100],float sptprice_buf[100],float strike_buf[100],float volatility_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int ii;
    for (ii = 0; ii < 100; ii++) {
      
#pragma ACCEL pipeline
      float price;
      float curr_sptprice = sptprice_buf[ii];
      float curr_strike = strike_buf[ii];
      float curr_rate = rate_buf[ii];
      float curr_volatility = volatility_buf[ii];
      float curr_otime = otime_buf[ii];
      float curr_otype = otype_buf[ii];
      price = BlkSchlsEqEuroNoDiv(curr_sptprice,curr_strike,curr_rate,curr_volatility,curr_otime,(int )curr_otype,(float )0);
      prices_buf[ii] = price;
    }
  }
}

void mars_kernel_0_1_comp(int mars_k,int mars_init,int mars_cond,float *otime,float mars_otime_buf_0[100],float mars_otime_buf_1[100],float *otype,float mars_otype_buf_0[100],float mars_otype_buf_1[100],float *prices,float mars_prices_buf_1[100],float mars_prices_buf_2[100],float *rate,float mars_rate_buf_0[100],float mars_rate_buf_1[100],float *sptprice,float mars_sptprice_buf_0[100],float mars_sptprice_buf_1[100],float *strike,float mars_strike_buf_0[100],float mars_strike_buf_1[100],float *volatility,float mars_volatility_buf_0[100],float mars_volatility_buf_1[100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_1_node_6_stage_1(mars_k - 1,(int )(mars_k >= mars_init + 1 & mars_k <= mars_cond + 1),mars_otime_buf_1,mars_otype_buf_1,mars_prices_buf_1,mars_rate_buf_1,mars_sptprice_buf_1,mars_strike_buf_1,mars_volatility_buf_1);
}

void mars_kernel_0_1(int mars_k,int mars_init,int mars_cond,float *otime,float mars_otime_buf_0[100],float mars_otime_buf_1[100],float *otype,float mars_otype_buf_0[100],float mars_otype_buf_1[100],float *prices,float mars_prices_buf_1[100],float mars_prices_buf_2[100],float *rate,float mars_rate_buf_0[100],float mars_rate_buf_1[100],float *sptprice,float mars_sptprice_buf_0[100],float mars_sptprice_buf_1[100],float *strike,float mars_strike_buf_0[100],float mars_strike_buf_1[100],float *volatility,float mars_volatility_buf_0[100],float mars_volatility_buf_1[100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_1_bus(mars_k,mars_init,mars_cond,otime,mars_otime_buf_0,mars_otime_buf_1,otype,mars_otype_buf_0,mars_otype_buf_1,prices,mars_prices_buf_1,mars_prices_buf_2,rate,mars_rate_buf_0,mars_rate_buf_1,sptprice,mars_sptprice_buf_0,mars_sptprice_buf_1,strike,mars_strike_buf_0,mars_strike_buf_1,volatility,mars_volatility_buf_0,mars_volatility_buf_1);
  mars_kernel_0_1_comp(mars_k,mars_init,mars_cond,otime,mars_otime_buf_0,mars_otime_buf_1,otype,mars_otype_buf_0,mars_otype_buf_1,prices,mars_prices_buf_1,mars_prices_buf_2,rate,mars_rate_buf_0,mars_rate_buf_1,sptprice,mars_sptprice_buf_0,mars_sptprice_buf_1,strike,mars_strike_buf_0,mars_strike_buf_1,volatility,mars_volatility_buf_0,mars_volatility_buf_1);
}
#pragma ACCEL kernel

void bs_kernel(float *sptprice,float *strike,float *rate,float *volatility,float *otime,float *otype,float *prices)
{
  float priceDelta;
//int     BLOCK_SIZE; 
//int     TOTAL_OPTION;
#define BLOCK_SIZE 100
#define TOTAL_OPTION  100
  float sptprice_buf[100];
  float strike_buf[100];
  float rate_buf[100];
  float volatility_buf[100];
  float otime_buf[100];
  float otype_buf[100];
  float prices_buf[100];
  int k;
  int ii;
  int mars_count_0_1 = 0;
  float mars_kernel_0_1_otime_buf_0[100];
  float mars_kernel_0_1_otime_buf_1[100];
  float mars_kernel_0_1_otime_buf_2[100];
  float mars_kernel_0_1_otype_buf_0[100];
  float mars_kernel_0_1_otype_buf_1[100];
  float mars_kernel_0_1_otype_buf_2[100];
  float mars_kernel_0_1_prices_buf_0[100];
  float mars_kernel_0_1_prices_buf_1[100];
  float mars_kernel_0_1_prices_buf_2[100];
  float mars_kernel_0_1_rate_buf_0[100];
  float mars_kernel_0_1_rate_buf_1[100];
  float mars_kernel_0_1_rate_buf_2[100];
  float mars_kernel_0_1_sptprice_buf_0[100];
  float mars_kernel_0_1_sptprice_buf_1[100];
  float mars_kernel_0_1_sptprice_buf_2[100];
  float mars_kernel_0_1_strike_buf_0[100];
  float mars_kernel_0_1_strike_buf_1[100];
  float mars_kernel_0_1_strike_buf_2[100];
  float mars_kernel_0_1_volatility_buf_0[100];
  float mars_kernel_0_1_volatility_buf_1[100];
  float mars_kernel_0_1_volatility_buf_2[100];
  for (k = 0; k < 100 + 2; k++) 
/* Original: #pragma ACCEL pipeline */
{
    if (mars_count_0_1 == 0) 
      mars_kernel_0_1(k,0,99,otime,mars_kernel_0_1_otime_buf_0,mars_kernel_0_1_otime_buf_1,otype,mars_kernel_0_1_otype_buf_0,mars_kernel_0_1_otype_buf_1,prices,mars_kernel_0_1_prices_buf_0,mars_kernel_0_1_prices_buf_1,rate,mars_kernel_0_1_rate_buf_0,mars_kernel_0_1_rate_buf_1,sptprice,mars_kernel_0_1_sptprice_buf_0,mars_kernel_0_1_sptprice_buf_1,strike,mars_kernel_0_1_strike_buf_0,mars_kernel_0_1_strike_buf_1,volatility,mars_kernel_0_1_volatility_buf_0,mars_kernel_0_1_volatility_buf_1);
     else if (mars_count_0_1 == 1) 
      mars_kernel_0_1(k,0,99,otime,mars_kernel_0_1_otime_buf_2,mars_kernel_0_1_otime_buf_0,otype,mars_kernel_0_1_otype_buf_2,mars_kernel_0_1_otype_buf_0,prices,mars_kernel_0_1_prices_buf_2,mars_kernel_0_1_prices_buf_0,rate,mars_kernel_0_1_rate_buf_2,mars_kernel_0_1_rate_buf_0,sptprice,mars_kernel_0_1_sptprice_buf_2,mars_kernel_0_1_sptprice_buf_0,strike,mars_kernel_0_1_strike_buf_2,mars_kernel_0_1_strike_buf_0,volatility,mars_kernel_0_1_volatility_buf_2,mars_kernel_0_1_volatility_buf_0);
     else 
      mars_kernel_0_1(k,0,99,otime,mars_kernel_0_1_otime_buf_1,mars_kernel_0_1_otime_buf_2,otype,mars_kernel_0_1_otype_buf_1,mars_kernel_0_1_otype_buf_2,prices,mars_kernel_0_1_prices_buf_1,mars_kernel_0_1_prices_buf_2,rate,mars_kernel_0_1_rate_buf_1,mars_kernel_0_1_rate_buf_2,sptprice,mars_kernel_0_1_sptprice_buf_1,mars_kernel_0_1_sptprice_buf_2,strike,mars_kernel_0_1_strike_buf_1,mars_kernel_0_1_strike_buf_2,volatility,mars_kernel_0_1_volatility_buf_1,mars_kernel_0_1_volatility_buf_2);
    mars_count_0_1++;
    if (mars_count_0_1 == 3) 
      mars_count_0_1 = 0;
  }
}
