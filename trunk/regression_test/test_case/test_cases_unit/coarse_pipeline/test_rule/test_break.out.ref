#pragma ACCEL kernel

void func_top_2_0(int a[100][100],int b[100][100])
{
  int i;
  int j;
  int sum;
  int sum1[100];
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    if (i < 50) 
      continue; 
    for (j = 0; j < 100; j++) {
      sum += b[i][j];
    }
  }
}

void mars_kernel_0_5_node_0_stage_0(int i,int exec,int b[100][100],int *sum)
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int j;
    for (j = 0; j < 100; j++) {
       *sum += b[i][j];
    }
  }
}

void mars_kernel_0_5_node_1_stage_1(int i,int exec,int sum,int sum1[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    while((bool )1){
      if (sum > 98) 
        break; 
      sum1[i] = sum;
    }
  }
}

void mars_kernel_0_5(int mars_i,int mars_init,int mars_cond,int b[100][100],int *mars_sum_0,int *mars_sum_1,int mars_sum1_1[100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_5_node_0_stage_0(mars_i - 0,(int )(mars_i >= mars_init + 0 & mars_i <= mars_cond + 0),b,mars_sum_0);
  mars_kernel_0_5_node_1_stage_1(mars_i - 1,(int )(mars_i >= mars_init + 1 & mars_i <= mars_cond + 1), *mars_sum_1,mars_sum1_1);
}
#pragma ACCEL kernel

void func_top_2_1(int a[100][100],int b[100][100])
{
  int i;
  int j;
  int sum;
  int sum1[100];
  sum = 0;
  int mars_count_0_5 = 0;
  int mars_kernel_0_5_sum_0 = sum;
  int mars_kernel_0_5_sum_1 = sum;
  for (i = 0; i < 100 + 1; i++) 
// Original: #pragma ACCEL pipeline
{
    if (mars_count_0_5 == 0) 
      mars_kernel_0_5(i,0,99,b,&mars_kernel_0_5_sum_0,&mars_kernel_0_5_sum_1,sum1);
     else 
      mars_kernel_0_5(i,0,99,b,&mars_kernel_0_5_sum_1,&mars_kernel_0_5_sum_0,sum1);
    mars_count_0_5++;
    if (mars_count_0_5 == 2) 
      mars_count_0_5 = 0;
  }
}
#pragma ACCEL kernel

void func_top_4(float a[100],float b[100],float c[100])
{
  int i;
  int j;
  float a_buf[100];
  float b_buf[100];
  float c_buf[100];
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    for (j = 0; j < 100; j++) {
      a_buf[j] = b[j] * b[j];
    }
    j = 0;
    while(j < 100){
      c_buf[j] = c[j] * 2;
      j++;
    }
    for (j = 0; j < 100; j += 2) {
      b_buf[j] = a_buf[j] + c_buf[j];
    }
    if (j > 50) 
      break; 
  }
}

void mars_kernel_1_7_node_0_stage_0(int i,int exec,int b[100][100],int *sum)
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int j;
    for (j = 0; j < 100; j++) {
       *sum += b[i][j];
    }
  }
}

void mars_kernel_1_7_node_1_stage_1(int i,int exec,int sum,int sum1[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    switch(sum){
      case 100:
      break; 
      default:
{
        sum1[i] = sum;
        break; 
      }
    }
  }
}

void mars_kernel_1_7(int mars_i,int mars_init,int mars_cond,int b[100][100],int *mars_sum_0,int *mars_sum_1,int mars_sum1_1[100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_1_7_node_0_stage_0(mars_i - 0,(int )(mars_i >= mars_init + 0 & mars_i <= mars_cond + 0),b,mars_sum_0);
  mars_kernel_1_7_node_1_stage_1(mars_i - 1,(int )(mars_i >= mars_init + 1 & mars_i <= mars_cond + 1), *mars_sum_1,mars_sum1_1);
}
#pragma ACCEL kernel

void func_top_3(int a[100][100],int b[100][100])
{
  int i;
  int j;
  int sum;
  int sum1[100];
  int mars_count_1_7 = 0;
  int mars_kernel_1_7_sum_0 = sum;
  int mars_kernel_1_7_sum_1 = sum;
  for (i = 0; i < 100 + 1; i++) 
// Original: #pragma ACCEL pipeline
{
    if (mars_count_1_7 == 0) 
      mars_kernel_1_7(i,0,99,b,&mars_kernel_1_7_sum_0,&mars_kernel_1_7_sum_1,sum1);
     else 
      mars_kernel_1_7(i,0,99,b,&mars_kernel_1_7_sum_1,&mars_kernel_1_7_sum_0,sum1);
    mars_count_1_7++;
    if (mars_count_1_7 == 2) 
      mars_count_1_7 = 0;
  }
}

int main()
{
  int aa[100][100];
  int bb[100][100];
  int cc[100][100];
  int *a;
  int *b;
  int *c;
  int a_s;
  int b_s;
  int c_s;
  int d_s;
  float aa_f[100][100];
  float bb_f[100][100];
  float cc_f[100][100];
  float *a_f;
  float *b_f;
  float *c_f;
  float a_s_f;
  float b_s_f;
  float c_s_f;
  float d_s_f;
  func_top_2_1(aa,bb);
  func_top_4(a_f,b_f,c_f);
  func_top_3(aa,bb);
}
