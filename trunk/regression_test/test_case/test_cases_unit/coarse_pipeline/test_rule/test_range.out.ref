#pragma ACCEL kernel

void func_top_1(float a[100][100],float b[100][100])
{
  int i;
  int j;
  float c_buf[100][100];
  float a_buf[100];
  int val2_0;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    val2_0 = 1;
    for (j = 0; j < 100; j++) {
      c_buf[i][j] = a[i][j] + val2_0;
    }
    for (j = 0; j < 100; j++) {
      b[i][j] = c_buf[i][j];
    }
  }
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL pipeline
      a[i][j] = c_buf[i][j];
    }
  }
}

void mars_kernel_0_5_node_0_stage_0(int i,int exec,float a[100][100],float a_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int j;
    if ((bool )(i % 2)) {
      for (j = 0; j < 50; j++) {
        a_buf[j] = a[i][j];
      }
    }
     else {
      for (j = 50; j < 100; j++) {
        a_buf[j] = a[i][j];
      }
    }
  }
}

void mars_kernel_0_5_node_1_stage_1(int i,int exec,float a[100][100],float b[100][100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int j;
    for (j = 0; j < 100; j++) {
      b[i][j] = a[i][j];
    }
  }
}

void mars_kernel_0_5_bus(int mars_i,int mars_init,int mars_cond,float a[100][100],float mars_a_buf_0[100],float b[100][100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_5_node_0_stage_0(mars_i - 0,(int )(mars_i >= mars_init + 0 & mars_i <= mars_cond + 0),a,mars_a_buf_0);
  mars_kernel_0_5_node_1_stage_1(mars_i - 1,(int )(mars_i >= mars_init + 1 & mars_i <= mars_cond + 1),a,b);
}

void mars_kernel_0_5_comp(int mars_i,int mars_init,int mars_cond,float a[100][100],float mars_a_buf_0[100],float b[100][100])
{
  
#pragma HLS INLINE OFF
}

void mars_kernel_0_5(int mars_i,int mars_init,int mars_cond,float a[100][100],float mars_a_buf_0[100],float b[100][100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_0_5_bus(mars_i,mars_init,mars_cond,a,mars_a_buf_0,b);
  mars_kernel_0_5_comp(mars_i,mars_init,mars_cond,a,mars_a_buf_0,b);
}
#pragma ACCEL kernel

void func_top_2(float a[100][100],float b[100][100])
{
  int i;
  int j;
  float a_buf[100];
  float b_buf[100];
  int mars_count_0_5 = 0;
  for (i = 0; i < 100 + 1; i++) 
// Original: #pragma ACCEL pipeline
{
    if (mars_count_0_5 == 0) 
      mars_kernel_0_5(i,0,99,a,a_buf,b);
     else 
      mars_kernel_0_5(i,0,99,a,a_buf,b);
    mars_count_0_5++;
    if (mars_count_0_5 == 2) 
      mars_count_0_5 = 0;
  }
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    if ((i % 2)) {
      for (j = 0; j < 50; j++) {
        b_buf[j] = a[i][j];
      }
    }
     else {
      for (j = 50; j < 100; j++) {
        b_buf[j] = a[i][j];
      }
    }
    for (j = 0; j < 100; j++) {
      b[i][j] = b_buf[j];
    }
  }
  for (j = 0; j < 100; j++) {
    
#pragma ACCEL pipeline
    a[0][j] = b_buf[j] + a_buf[j];
  }
}

void mars_kernel_1_8_assign_b_buf(float target[100],float orig[100])
{
  int i0;
  for (i0 = 0; i0 < 100; i0++) {
    target[i0] = orig[i0];
  }
}

void mars_kernel_1_8_node_0_stage_0(int i,int exec,float a[100][100],float b_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int j;
    for (j = 0; j < 40; j++) {
      b_buf[j] = a[i][j];
    }
  }
}

void mars_kernel_1_8_node_1_stage_1(int i,int exec,float a[100][100],float b_buf[100])
{
  
#pragma HLS INLINE OFF
  if (exec == 1) {
    int j;
    for (j = 0; j < 60; j++) {
      b_buf[j] = a[i][j];
    }
  }
}

void mars_kernel_1_8_bus(int mars_i,int mars_init,int mars_cond,float a[100][100],float mars_b_buf_0[100],float mars_b_buf_1[100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_1_8_node_0_stage_0(mars_i - 0,(int )(mars_i >= mars_init + 0 & mars_i <= mars_cond + 0),a,mars_b_buf_0);
  mars_kernel_1_8_node_1_stage_1(mars_i - 1,(int )(mars_i >= mars_init + 1 & mars_i <= mars_cond + 1),a,mars_b_buf_1);
}

void mars_kernel_1_8_comp(int mars_i,int mars_init,int mars_cond,float a[100][100],float mars_b_buf_0[100],float mars_b_buf_1[100])
{
  
#pragma HLS INLINE OFF
}

void mars_kernel_1_8(int mars_i,int mars_init,int mars_cond,float a[100][100],float mars_b_buf_0[100],float mars_b_buf_1[100])
{
  
#pragma HLS INLINE OFF
  mars_kernel_1_8_bus(mars_i,mars_init,mars_cond,a,mars_b_buf_0,mars_b_buf_1);
  mars_kernel_1_8_comp(mars_i,mars_init,mars_cond,a,mars_b_buf_0,mars_b_buf_1);
}
#pragma ACCEL kernel

void func_top_3(float a[100][100],float b[100][100])
{
  int i;
  int j;
  float a_buf[100];
  float b_buf[100];
  int mars_count_1_8 = 0;
  float mars_kernel_1_8_b_buf_0[100];
  float mars_kernel_1_8_b_buf_1[100];
  for (i = 0; i < 100 + 1; i++) 
// Original: #pragma ACCEL pipeline
{
    if (mars_count_1_8 == 0) 
      mars_kernel_1_8(i,0,99,a,mars_kernel_1_8_b_buf_0,mars_kernel_1_8_b_buf_1);
     else 
      mars_kernel_1_8(i,0,99,a,mars_kernel_1_8_b_buf_1,mars_kernel_1_8_b_buf_0);
    mars_count_1_8++;
    if (mars_count_1_8 == 2) 
      mars_count_1_8 = 0;
  }
  mars_kernel_1_8_assign_b_buf(b_buf,mars_kernel_1_8_b_buf_0);
  for (j = 0; j < 100; j++) {
    
#pragma ACCEL pipeline
    a[0][j] = b_buf[j];
  }
}
