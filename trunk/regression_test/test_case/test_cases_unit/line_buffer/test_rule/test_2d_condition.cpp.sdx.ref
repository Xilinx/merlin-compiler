/* (previously processed: ignoring self-referential macro declaration) macro name = c */ 
#pragma ACCEL kernel

void func_top_1(int *c)
{
  
#pragma ACCEL interface variable=c max_depth=32768 depth=32768 BURST_OFF
  int sum;
  for (int i = 0; i < 32; i++) {
    int LineBuffer_c0[32];
    int slide_wind_0[2][1];
    for (int j = 0L; j < 33L; j++) {
      for (int k = -1L; k < 31L; k++) {
        
#pragma ACCEL pipeline
{
          int j_2;
          int j_1;
          int tmp_wind_0[2];
          int j_0;
          for (j_0 = 0L; j_0 <= 1L; ++j_0) {
            
#pragma ACCEL PARALLEL COMPLETE
            slide_wind_0[j_0][0] = slide_wind_0[j_0][0];
          }
          for (j_1 = 0; j_1 <= 1L; ++j_1) {
            
#pragma ACCEL PARALLEL COMPLETE
            if (j_1 == 0L) {
              tmp_wind_0[j_1] = LineBuffer_c0[k + 1L - 0L];
            }
          }
          if (j + -1L + -1L + 1L >= 0L && k + 1L + 1L + 0L < 32L) {
            tmp_wind_0[1UL] = c[(0L + i * 1L) * 1024L + (j + -1L + -1L + 1L) * 32L + (k + 1L + 1L + 0L) * 1L];
          }
          for (j_2 = 0; j_2 <= 1L; ++j_2) {
            
#pragma ACCEL PARALLEL COMPLETE
            slide_wind_0[j_2][0L] = tmp_wind_0[j_2];
          }
{
            int j_3;
            int tmp_c;
            for (j_3 = 0; j_3 <= 0UL; ++j_3) {
              
#pragma ACCEL PARALLEL COMPLETE
              tmp_c = tmp_wind_0[j_3 + 1];
              if (j_3 == 0L) {
                LineBuffer_c0[k + 1L - 0L + 0L] = tmp_c;
              }
            }
          }
        }
        if (j + -1L >= 1L && j + -1L <= 30L && k + 1L >= 1L && k + 1L <= 30L) {
          if (i >= 1 && i <= 30 && j + -1L >= 1 && j + -1L <= 30 && k + 1L >= 1 && k + 1L <= 30) 
            sum += slide_wind_0[1L][0L] + slide_wind_0[0L][0L];
        }
      }
    }
  }
}
