#pragma ACCEL kernel

void func_test()
{
  int a[64][64];
  
#pragma HLS array_partition variable=a cyclic factor=16 dim=2
  
#pragma HLS array_partition variable=a cyclic factor=4 dim=1
  int b[64][64];
  
#pragma HLS array_partition variable=b cyclic factor=4 dim=2
  int i;
  int j;
/*Array Access*/
{
    long _j_i;
    j = 1;
    i = 1;
// Flattened for(j = 1;j < 63;j++) {...}
// Flattened for(i = 1;i < 63;i++) {...}
    for (_j_i = 1 * 62; _j_i <= 63 * 62 - 1; ++_j_i) 
// Original: #pragma ACCEL PIPELINE II = 1 PRIORITY = logic
{
      
#pragma HLS dependence variable=b array inter false 
      
#pragma HLS pipeline II=1
      b[j][i] = (a[j + 1][i] + a[j - 1][i] + a[j][i + 1] + a[j][i - 1]) / 4;
{
        ++i;
        if (i > 62) {
          ++j;
          if (j <= 62) 
            i = 1;
        }
      }
    }
  }
  for (j = 1; j < 63; j++) {
    for (i = 1; i < 8; i++) 
// Original: #pragma ACCEL PARALLEL PRIORITY = logic
{
      
#pragma HLS unroll
      b[j][i] = (a[j + 1][i] + a[j - 1][i] + a[j][i + 1] + a[j][i - 1]) / 4;
    }
  }
}
#pragma ACCEL kernel

void func_org()
{
  int a[64][64];
  
#pragma HLS array_partition variable=a cyclic factor=9 dim=2
  
#pragma HLS array_partition variable=a cyclic factor=3 dim=1
  int b[64][64];
  
#pragma HLS array_partition variable=b cyclic factor=4 dim=2
  int i;
  int j;
/*Array Access*/
{
    long _j_i;
    j = 1;
    i = 1;
// Flattened for(j = 1;j < 63;j++) {...}
// Flattened for(i = 1;i < 63;i++) {...}
    for (_j_i = 1 * 62; _j_i <= 63 * 62 - 1; ++_j_i) 
// Original: #pragma ACCEL PIPELINE II = 1
{
      
#pragma HLS dependence variable=b array inter false 
      
#pragma HLS pipeline II=1
      b[j][i] = (a[j + 1][i] + a[j - 1][i] + a[j][i + 1] + a[j][i - 1]) / 4;
{
        ++i;
        if (i > 62) {
          ++j;
          if (j <= 62) 
            i = 1;
        }
      }
    }
  }
  for (j = 1; j < 63; j++) {
    for (i = 1; i < 8; i++) 
// Original: #pragma ACCEL PARALLEL
{
      
#pragma HLS unroll
      b[j][i] = (a[j + 1][i] + a[j - 1][i] + a[j][i + 1] + a[j][i - 1]) / 4;
    }
  }
}
