
int add_func_2(int a[100],int b[100],int i,int j)
{
  return a[i] + b[j];
}
#pragma ACCEL kernel

void func_top_0()
{
  int a[100][100];
  
#pragma HLS array_partition variable=a complete dim=2
  
#pragma HLS array_partition variable=a cyclic factor=2 dim=1
  int i;
  int j;
  int sum = 0;
  for (i = 0; i < 99; i++) 
// Original: #pragma ACCEL PIPELINE II = 1
{
    
#pragma HLS pipeline II=1
    for (j = 0; j < 99; j++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma HLS unroll
      sum += add_func_2(a[i],a[i + 1],j,j + 1);
    }
  }
}

int add_func_1(int *a,int *sum)
{
  for (int j = 0; j < 4; j++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
    
#pragma HLS unroll
     *sum += a[j];
  }
}
#pragma ACCEL kernel

void func_top_1()
{
  int a[100];
  
#pragma HLS array_partition variable=a cyclic factor=2 dim=1
  int b[4];
  
#pragma HLS array_partition variable=b cyclic factor=2 dim=1
  int sum = 0;
  add_func_1(a,&sum);
  add_func_1(b,&sum);
}
