#pragma ACCEL kernel

void func_top_0()
{
  int a[100];
  int b[100];
  
#pragma HLS array_partition variable=b cyclic factor=2 dim=1
  int j;
  for (j = 0; j < 99; j++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma HLS dependence variable=a array inter false 
    
#pragma HLS pipeline
    int _b_r0;
    int _b_r1;
{
      int _b_addr0 = j / 2;
      int _b_bank0 = j % 2;
      if (_b_bank0 == 0) {
        _b_r0 = b[_b_addr0 * 2 + 0];
        _b_r1 = b[_b_addr0 * 2 + 1];
      }
       else {
        _b_r0 = b[_b_addr0 * 2 + 1];
        _b_r1 = b[_b_addr0 * 2 + 2];
      }
    }
    a[j] = _b_r0 + _b_r1;
  }
}
#pragma ACCEL kernel

void func_top_1()
{
  int a[100][100];
  int b[100][100];
  
#pragma HLS array_partition variable=b cyclic factor=2 dim=1
  int k;
  int j;
  for (k = 1; k < 100; k++) {
    for (j = 0; j < 99; j++) 
// Original: #pragma ACCEL pipeline
{
      
#pragma HLS dependence variable=a array inter false 
      
#pragma HLS pipeline
      int _b_r0;
      int _b_r1;
{
        int _b_addr0 = k / 2;
        int _b_bank0 = k % 2;
        if (_b_bank0 == 0) {
          _b_r0 = b[_b_addr0 * 2 + 0][j];
          _b_r1 = b[_b_addr0 * 2 + -1][j];
        }
         else {
          _b_r0 = b[_b_addr0 * 2 + 1][j];
          _b_r1 = b[_b_addr0 * 2 + 0][j];
        }
      }
      a[k][j] = _b_r0 + _b_r1;
    }
  }
}
#pragma ACCEL kernel

void func_top_2()
{
  int a[100][100][100];
  
#pragma HLS array_partition variable=a cyclic factor=2 dim=3
  int b[100][100][100];
  
#pragma HLS array_partition variable=b cyclic factor=3 dim=3
  
#pragma HLS array_partition variable=b cyclic factor=2 dim=2
  int k;
  int i;
  int j;
  for (i = 0; i < 99; i++) {
    for (k = 1; k < 100; k++) 
// Original: #pragma ACCEL pipeline
{
      
#pragma HLS dependence variable=a array inter false 
      
#pragma HLS pipeline
      for (j = 0; j < 2; j++) 
// Original: #pragma ACCEL parallel
{
        
#pragma HLS unroll
        int _b_r0;
        int _b_r1;
{
          int _b_addr1 = k / 2;
          int _b_bank1 = k % 2;
          int _b_addr2 = j / 3;
          int _b_bank2 = j % 3;
          if (_b_bank1 == 0 && _b_bank2 == 0) {
            _b_r0 = b[i][_b_addr1 * 2 + 0][_b_addr2 * 3 + 0];
            _b_r1 = b[i][_b_addr1 * 2 + -1][_b_addr2 * 3 + 1];
          }
           else if (_b_bank1 == 0 && _b_bank2 == 1) {
            _b_r0 = b[i][_b_addr1 * 2 + 0][_b_addr2 * 3 + 1];
            _b_r1 = b[i][_b_addr1 * 2 + -1][_b_addr2 * 3 + 2];
          }
           else if (_b_bank1 == 0 && _b_bank2 == 2) {
            _b_r0 = b[i][_b_addr1 * 2 + 0][_b_addr2 * 3 + 2];
            _b_r1 = b[i][_b_addr1 * 2 + -1][_b_addr2 * 3 + 3];
          }
           else if (_b_bank1 == 1 && _b_bank2 == 0) {
            _b_r0 = b[i][_b_addr1 * 2 + 1][_b_addr2 * 3 + 0];
            _b_r1 = b[i][_b_addr1 * 2 + 0][_b_addr2 * 3 + 1];
          }
           else if (_b_bank1 == 1 && _b_bank2 == 1) {
            _b_r0 = b[i][_b_addr1 * 2 + 1][_b_addr2 * 3 + 1];
            _b_r1 = b[i][_b_addr1 * 2 + 0][_b_addr2 * 3 + 2];
          }
           else {
            _b_r0 = b[i][_b_addr1 * 2 + 1][_b_addr2 * 3 + 2];
            _b_r1 = b[i][_b_addr1 * 2 + 0][_b_addr2 * 3 + 3];
          }
        }
        a[i][k][j] = _b_r0 + _b_r1;
      }
    }
  }
}
