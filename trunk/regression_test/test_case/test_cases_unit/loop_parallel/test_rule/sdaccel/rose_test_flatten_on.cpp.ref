#pragma ACCEL kernel

void func_top_1(int b[64][64],int N)
{
  int a[64][64];
  
#pragma HLS array_partition variable=a cyclic factor=3 dim=2
  
#pragma HLS array_partition variable=a cyclic factor=3 dim=1
  int i;
  int j;
{
    long _j_i;
    j = 1;
    i = 1;
// Flattened for(j = 1;j < 63;j++) {...}
// Flattened for(i = 1;i < 63;i++) {...}
    for (_j_i = 1 * 62; _j_i <= 63 * 62 - 1; ++_j_i) 
// Original: #pragma ACCEL PIPELINE
{
      
#pragma HLS dependence variable=b array inter false 
      
#pragma HLS pipeline
      b[j][i] = (a[j + 1][i] + a[j - 1][i] + a[j][i + 1] + a[j][i - 1]) / 4;
{
        ++i;
        if (i > 62) {
          ++j;
          if (j <= 62) 
            i = 1;
        }
      }
    }
  }
  for (j = 1; j < 63; j++) {
    for (; i < 63; i++) 
// Original: #pragma ACCEL PIPELINE
{
      
#pragma HLS pipeline
      int _a_r0;
      int _a_r1;
      int _a_r2;
      int _a_r3;
{
        int _a_addr0 = (1 + j) / 3;
        int _a_bank0 = (1 + j) % 3;
        int _a_addr1 = i / 3;
        int _a_bank1 = i % 3;
        if (_a_bank0 == 0 && _a_bank1 == 0) {
          _a_r0 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 0];
          _a_r1 = a[_a_addr0 * 3 + -2][_a_addr1 * 3 + 0];
          _a_r2 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + 1];
          _a_r3 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + -1];
        }
         else if (_a_bank0 == 0 && _a_bank1 == 1) {
          _a_r0 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 1];
          _a_r1 = a[_a_addr0 * 3 + -2][_a_addr1 * 3 + 1];
          _a_r2 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + 2];
          _a_r3 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + 0];
        }
         else if (_a_bank0 == 0 && _a_bank1 == 2) {
          _a_r0 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 2];
          _a_r1 = a[_a_addr0 * 3 + -2][_a_addr1 * 3 + 2];
          _a_r2 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + 3];
          _a_r3 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + 1];
        }
         else if (_a_bank0 == 1 && _a_bank1 == 0) {
          _a_r0 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + 0];
          _a_r1 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + 0];
          _a_r2 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 1];
          _a_r3 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + -1];
        }
         else if (_a_bank0 == 1 && _a_bank1 == 1) {
          _a_r0 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + 1];
          _a_r1 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + 1];
          _a_r2 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 2];
          _a_r3 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 0];
        }
         else if (_a_bank0 == 1 && _a_bank1 == 2) {
          _a_r0 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + 2];
          _a_r1 = a[_a_addr0 * 3 + -1][_a_addr1 * 3 + 2];
          _a_r2 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 3];
          _a_r3 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 1];
        }
         else if (_a_bank0 == 2 && _a_bank1 == 0) {
          _a_r0 = a[_a_addr0 * 3 + 2][_a_addr1 * 3 + 0];
          _a_r1 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 0];
          _a_r2 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + 1];
          _a_r3 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + -1];
        }
         else if (_a_bank0 == 2 && _a_bank1 == 1) {
          _a_r0 = a[_a_addr0 * 3 + 2][_a_addr1 * 3 + 1];
          _a_r1 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 1];
          _a_r2 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + 2];
          _a_r3 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + 0];
        }
         else {
          _a_r0 = a[_a_addr0 * 3 + 2][_a_addr1 * 3 + 2];
          _a_r1 = a[_a_addr0 * 3 + 0][_a_addr1 * 3 + 2];
          _a_r2 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + 3];
          _a_r3 = a[_a_addr0 * 3 + 1][_a_addr1 * 3 + 1];
        }
      }
      b[j][i] = (_a_r0 + _a_r1 + _a_r2 + _a_r3) / 4;
    }
  }
  for (j = 1; j < 63; ) {
    for (i = 1; i < 63; i++) 
// Original: #pragma ACCEL PIPELINE
{
      
#pragma HLS pipeline
      j++;
    }
  }
  for (j = 1; j < N; j++) {
    for (i = j; i < 63; i++) 
// Original: #pragma ACCEL PIPELINE
{
      
#pragma HLS dependence variable=b array inter false 
      
#pragma HLS pipeline
      
#pragma HLS LOOP_TRIPCOUNT max=62
      b[j][i] = (a[j + 1][i] + a[j - 1][i] + a[j][i + 1] + a[j][i - 1]) / 4;
    }
  }
}
#pragma ACCEL kernel

void func_top_2(int b[64][64],int N)
{
  int a[64][64];
  int i;
  int j;
  for (int k = 0; k < 64; k++) {
    
#pragma HLS LOOP_FLATTEN OFF
    loop1:
{
    }
    for (j = 1; j < 64; j++) {
      for (i = 1; i < 64; i++) 
// Original: #pragma ACCEL PIPELINE
// Original: #pragma #pragma ACCEL LOOP_FLATTEN OFF AUTO
{
        
#pragma HLS dependence variable=a array inter false 
        
#pragma HLS dependence variable=b array inter false 
        
#pragma HLS pipeline
        b[j][i] = a[j][i];
        a[j][i]++;
      }
    }
  }
  for (int k = 0; k < 64; k++) {
    loop2:
    for (j = 1; j < 63; j++) {
      loop3:
      for (i = 1; i < 64; i++) 
// Original: #pragma ACCEL PIPELINE
// Original: #pragma #pragma ACCEL LOOP_FLATTEN OFF AUTO
{
        
#pragma HLS dependence variable=b array inter false 
        
#pragma HLS pipeline
        b[j][i] += a[j + 1][i] + a[j - 1][i];
      }
    }
  }
  for (int k = 0; k < 64; k++) {
    
#pragma HLS LOOP_FLATTEN OFF
    loop4:
{
      for (j = 1; j < 64; j++) {
        for (i = 1; i < 64; i++) 
// Original: #pragma ACCEL PIPELINE
// Original: #pragma #pragma ACCEL LOOP_FLATTEN OFF AUTO
{
          
#pragma HLS dependence variable=a array inter false 
          
#pragma HLS dependence variable=b array inter false 
          
#pragma HLS pipeline
          b[j][i] = a[j][i];
          a[j][i]++;
        }
      }
    }
  }
}
#pragma ACCEL kernel

void denoise2D(int b[64][64])
{
  int a[64][64];
  
#pragma HLS array_partition variable=a cyclic factor=3 dim=2
  
#pragma HLS array_partition variable=a cyclic factor=3 dim=1
  int i;
  int j;
/*Array Access*/
{
    long _j_i;
    j = 1;
    i = 1;
// Flattened for(j = 1;j < 63;j++) {...}
// Flattened for(i = 1;i < 63;i++) {...}
    for (_j_i = 1 * 62; _j_i <= 63 * 62 - 1; ++_j_i) 
// Original: #pragma ACCEL PIPELINE II = 1
{
      
#pragma HLS dependence variable=b array inter false 
      
#pragma HLS pipeline II=1
      b[j][i] = (a[j + 1][i] + a[j - 1][i] + a[j][i + 1] + a[j][i - 1]) / 4;
{
        ++i;
        if (i > 62) {
          ++j;
          if (j <= 62) 
            i = 1;
        }
      }
    }
  }
  for (j = 1; j < 63; j++) {
    for (i = 1; i < 63; i++) 
// Original: #pragma ACCEL PIPELINE
{
      
#pragma HLS dependence variable=b array inter false 
      
#pragma HLS pipeline
      
#pragma HLS LOOP_FLATTEN OFF
      b[j][i] = (a[j + 1][i] + a[j - 1][i] + a[j][i + 1] + a[j][i - 1]) / 4;
    }
  }
}
