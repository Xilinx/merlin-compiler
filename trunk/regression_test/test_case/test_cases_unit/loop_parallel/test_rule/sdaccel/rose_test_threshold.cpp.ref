#pragma ACCEL kernel

void func_top_0()
{
  int a[100][100];
  
#pragma HLS array_partition variable=a complete dim=2
  int b[100][100];
  
#pragma HLS array_partition variable=b complete dim=2
  
#pragma HLS array_partition variable=b complete dim=1
  int c[3][2048];
  
#pragma HLS array_partition variable=c cyclic factor=1024 dim=2
  int c1[2000];
  
#pragma HLS array_partition variable=c1 cyclic factor=1024 dim=1
  int k;
  int i;
  int j;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma HLS dependence variable=a array inter false 
    
#pragma HLS pipeline
    for (k = 0; k < 99; k++) 
// Original: #pragma ACCEL parallel complete
{
      
#pragma HLS unroll
      for (j = 0; j < 99; j++) 
// Original: #pragma ACCEL parallel complete
{
        
#pragma HLS unroll
        a[i][j] = b[k][j] + b[k + 1][j + 1];
      }
    }
  }
  for (i = 0; i < 32; i++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma HLS pipeline
    for (j = 0; j < 1025; j++) 
// Original: #pragma ACCEL parallel complete
{
      
#pragma HLS unroll
      c1[j] = j;
    }
  }
  for (j = 0; j < 2000; j++) 
// Original: #pragma ACCEL parallel complete
{
    
#pragma HLS unroll
    if (j <= 1500) 
      c1[j] = j;
  }
  for (i = 0; i < 3; i++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma HLS dependence variable=c array inter false 
    
#pragma HLS pipeline
    for (int t = 0; t < 32; t++) 
// Original: #pragma ACCEL parallel
{
      
#pragma HLS unroll
      for (j = 0; j < 32; j++) 
// Original: #pragma ACCEL parallel
{
        
#pragma HLS unroll
        c[i][t * 32 + j] = j;
        c[i][t * 32 + j + 1] = j;
        c[i][t * 32 + j + 2] = j;
        c[i][t * 32 + j + 3] = j;
        c[i][t * 32 + j + 4] = j;
      }
    }
  }
}
