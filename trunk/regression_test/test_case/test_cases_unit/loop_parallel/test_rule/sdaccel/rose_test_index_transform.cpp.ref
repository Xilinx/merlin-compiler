typedef double Scalar;
#pragma ACCEL kernel

void top(int start,int j0,int step)
{
  Scalar accu[9][1000];
  
#pragma HLS array_partition variable=accu complete dim=1
  double data1_3_0_buf[90000];
  
#pragma HLS array_partition variable=data1_3_0_buf cyclic factor=2 dim=1
  double data_3_0_buf[90000];
  
#pragma HLS array_partition variable=data_3_0_buf cyclic factor=2 dim=1
  int indices_3_0_buf[500][36];
  int sub_start;
  int i;
  for (i = 0; i < 18; ++i) {
    for (sub_start = 0; sub_start < 500; sub_start++) 
// Original: #pragma ACCEL PIPELINE II = 1
{
      
#pragma HLS dependence variable=accu array inter false 
      
#pragma HLS pipeline II=1
      double _data_3_0_buf_r0;
      double _data_3_0_buf_r1;
      double _data_3_0_buf_r2;
      double _data1_3_0_buf_r0;
      double _data1_3_0_buf_r1;
      double _data1_3_0_buf_r2;
      int sub_start0 = sub_start * 2 + 0;
      int sub_start1 = sub_start * 2 + 1;
      int new_start0 = start * 10000 + sub_start0 + j0 * 1000;
      int new_start1 = start * 10000 + sub_start1 + j0 * 1000;
      int idx_step = indices_3_0_buf[sub_start][i] * step;
      int idx_step1 = indices_3_0_buf[sub_start][18 + i] * step;
{
        int _data_3_0_buf_addr0 = indices_3_0_buf[sub_start][i] * step / 2;
        int _data_3_0_buf_bank0 = indices_3_0_buf[sub_start][i] * step % 2;
        if (_data_3_0_buf_bank0 == 0) {
          _data_3_0_buf_r0 = data_3_0_buf[_data_3_0_buf_addr0 * 2 + 0];
          _data_3_0_buf_r1 = data_3_0_buf[_data_3_0_buf_addr0 * 2 + 1];
          _data_3_0_buf_r2 = data_3_0_buf[_data_3_0_buf_addr0 * 2 + 2];
        }
         else {
          _data_3_0_buf_r0 = data_3_0_buf[_data_3_0_buf_addr0 * 2 + 1];
          _data_3_0_buf_r1 = data_3_0_buf[_data_3_0_buf_addr0 * 2 + 2];
          _data_3_0_buf_r2 = data_3_0_buf[_data_3_0_buf_addr0 * 2 + 3];
        }
      }
      Scalar x = _data_3_0_buf_r0;
      Scalar y = _data_3_0_buf_r1;
      Scalar z = _data_3_0_buf_r2;
{
        int _data1_3_0_buf_addr0 = indices_3_0_buf[sub_start][18 + i] * step / 2;
        int _data1_3_0_buf_bank0 = indices_3_0_buf[sub_start][18 + i] * step % 2;
        if (_data1_3_0_buf_bank0 == 0) {
          _data1_3_0_buf_r0 = data1_3_0_buf[_data1_3_0_buf_addr0 * 2 + 0];
          _data1_3_0_buf_r1 = data1_3_0_buf[_data1_3_0_buf_addr0 * 2 + 1];
          _data1_3_0_buf_r2 = data1_3_0_buf[_data1_3_0_buf_addr0 * 2 + 2];
        }
         else {
          _data1_3_0_buf_r0 = data1_3_0_buf[_data1_3_0_buf_addr0 * 2 + 1];
          _data1_3_0_buf_r1 = data1_3_0_buf[_data1_3_0_buf_addr0 * 2 + 2];
          _data1_3_0_buf_r2 = data1_3_0_buf[_data1_3_0_buf_addr0 * 2 + 3];
        }
      }
      Scalar x1 = _data1_3_0_buf_r0;
      Scalar y1 = _data1_3_0_buf_r1;
      Scalar z1 = _data1_3_0_buf_r2;
      accu[0][sub_start0] = x * x;
      accu[1][sub_start0] = x * y;
      accu[2][sub_start0] = x * z;
      accu[3][sub_start0] = y * y;
      accu[4][sub_start0] = y * z;
      accu[5][sub_start0] = z * z;
      accu[6][sub_start0] = x;
      accu[7][sub_start0] = y;
      accu[8][sub_start0] = z;
    }
  }
  return ;
}
