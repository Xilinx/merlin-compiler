
void sub_func(int a[100])
{
  for (int j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma HLS dependence variable=a array inter false 
    
#pragma HLS pipeline
    a[j] = 0;
  }
}
#pragma ACCEL kernel

void func_top_1()
{
  int b[100][100];
  int t = 10;
  int i;
  int j;
  int aa[100];
  int ab[100];
  
#pragma HLS array_partition variable=ab cyclic factor=2 dim=1
  sub_func(ab);
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline
{
      
#pragma HLS dependence variable=aa array inter false 
      
#pragma HLS pipeline
      aa[j] = b[i][j] + ab[j] + ab[j + 1] + ab[j + 2];
    }
  }
  for (i = 0; i < 100; i++) {
    int a[100][100];
    for (j = 0; j < 100; j++) {
      while(t > 0)
// Original: #pragma ACCEL pipeline
{
        
#pragma HLS pipeline
        a[i][j] = b[i][j] + t--;
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_2()
{
  float C[16][224][224];
// Existing HLS partition: #pragma HLS array_partition variable=C complete dim=1
// Existing HLS partition: #pragma HLS array_partition variable=C cyclic factor=2 dim=2
// Existing HLS partition: #pragma HLS array_partition variable=C cyclic factor=2 dim=3
  
#pragma HLS array_partition variable=C cyclic factor=2 dim=3
  
#pragma HLS array_partition variable=C cyclic factor=2 dim=2
  
#pragma HLS array_partition variable=C complete dim=1
  for (int j = 0; j < 256; ++j) {
    float merlin_input_buf[228][228];
// Existing HLS partition: #pragma HLS array_partition variable=merlin_input_buf cyclic factor = 4 dim=2
    
#pragma HLS array_partition variable=merlin_input_buf cyclic factor=5 dim=2
    
#pragma HLS array_partition variable=merlin_input_buf cyclic factor=5 dim=1
    loop_h:
    for (int h = 0; h < 224; ++h) {
      loop_w:
      for (int w = 0; w < 224; ++w) 
// Original: #pragma ACCEL PIPELINE AUTO
{
        
#pragma HLS dependence variable=C array inter false 
        
#pragma HLS pipeline
        loop_p:
        for (int iter = 0; iter < 16; iter++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
          
#pragma HLS unroll
          float tmp = (float )0;
          for (int p = 0; p < 5; ++p) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
            
#pragma HLS unroll
            Loop_q:
            for (int q = 0; q < 5; ++q) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
              
#pragma HLS unroll
              tmp += merlin_input_buf[h + p][q + w];
            }
          }
          C[iter][h][w] += tmp;
        }
      }
    }
  }
}
