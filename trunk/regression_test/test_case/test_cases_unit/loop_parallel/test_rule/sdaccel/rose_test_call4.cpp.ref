
int add_func_1(int a,int b)
{
  return a + b;
}

int add_func_2(int a[100],int b[100])
{
  int sum = 0;
  for (int i = 0; i < 50; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
    
#pragma HLS unroll
    sum += a[i] - b[i];
  }
  return sum;
}
#pragma ACCEL kernel

void func_top_0()
{
  int a[100];
  int aa[100];
  
#pragma HLS array_partition variable=aa complete dim=1
  int b[100];
  int bb[100];
  
#pragma HLS array_partition variable=bb complete dim=1
  int i;
  int j;
  int sum = 0;
  for (i = 0; i < 99; i++) {
    for (j = 0; j < 90; j++) 
// Original: #pragma ACCEL PIPELINE II = 1
{
      
#pragma HLS pipeline II=1
      sum += add_func_1(a[j],b[j + 1]);
      sum += add_func_1(a[j + 2],b[j + 3]);
    }
  }
  for (i = 0; i < 99; i++) 
// Original: #pragma ACCEL PIPELINE II = 1
{
    
#pragma HLS pipeline II=1
    for (j = 0; j < 99; j++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma HLS unroll
      sum += add_func_2(aa,aa);
      sum += add_func_2(bb,bb);
    }
  }
}

int main()
{
  func_top_0();
}
