//(C) Copyright 2016-2021 Xilinx, Inc.
//All Rights Reserved.
//
//Licensed to the Apache Software Foundation (ASF) under one
//or more contributor license agreements.  See the NOTICE file
//distributed with this work for additional information
//regarding copyright ownership.  The ASF licenses this file
//to you under the Apache License, Version 2.0 (the
//"License"); you may not use this file except in compliance
//with the License.  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing,
//software distributed under the License is distributed on an
//"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//KIND, either express or implied.  See the License for the
//specific language governing permissions and limitations
//under the License. (edited)
#include <ap_int.h>
#include <assert.h>
#include <hls_stream.h>
#include <xf_params.h>
#include <xf_structs.h>
#include <xf_types.h>
#include "merlin_type_define.h"
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();

static void p_ZN2xf11accel_utils13Array2hlsStrmILi256ELi2160ELi3840ELi1ELi1ELi16ELi518400EEEP7ap_uintILi256EER6streamI7ap_uintILi256EEEiixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(struct xf_accel_utils *this_,class ap_uint< 256 > *srcPtr,hls::stream< ap_uint< 256 >  > &dstStrm,int rows,int cols)
{
  int pixel_width = 1 * 16;
  int loop_count = (rows * cols * 16 + 256 - 1) / 256;
  for (int i = 0; i < loop_count; i++) 
// Original: #pragma ACCEL PIPELINE AUTO
{
    
#pragma HLS pipeline
    
#pragma HLS LOOP_TRIPCOUNT min=1 max=518400
    dstStrm . write(srcPtr[i]);
  }
}

static void p_ZN2xf11accel_utils13Array2hlsStrmILi256ELi2160ELi3840ELi1ELi1ELi16ELi518400EEEP7ap_uintILi256EER6streamI7ap_uintILi256EEEiixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(struct xf_accel_utils *this_,class ap_uint< 256 > *srcPtr,hls::stream< ap_uint< 256 >  > &dstStrm,int rows,int cols)
{
  int pixel_width = 1 * 16;
  int loop_count = (rows * cols * 16 + 256 - 1) / 256;
  for (int i = 0; i < loop_count; i++) 
// Original: #pragma ACCEL PIPELINE AUTO
{
    
#pragma HLS pipeline
    
#pragma HLS LOOP_TRIPCOUNT min=1 max=518400
    dstStrm . write(srcPtr[i]);
  }
}

static void p_ZN2xf11accel_utils13hlsStrm2xfMatILi256ELi2ELi2160ELi3840ELi1ELi8294400EEER6streamI7ap_uintILi256EEER3MatILi2ELi2160ELi3840ELi1EE(struct xf_accel_utils *this_,hls::stream< ap_uint< 256 >  > &srcStrm,xf::Mat< 2 , 2160 , 3840 , 1 > &dstMat)
{
  int rows = dstMat . rows;
  int cols = dstMat . cols;
  int loop_count = rows * cols / 1;
  int valid_bits = 0;
  const int N_size = 16 * 1;
  class ap_uint< 256 > r;
  DataType< 2,1> ::name out;
  L1:
  for (int i = 0; i < loop_count; i++) 
// Original: #pragma ACCEL PIPELINE AUTO
{
    
#pragma HLS pipeline
    
#pragma HLS LOOP_TRIPCOUNT min=1 max=8294400
    if (valid_bits < 16) {
      if (valid_bits != 0) {
        out . range((valid_bits - 1),0) = r . range((256 - 1),(256 - valid_bits));
      }
      r = srcStrm . read();
      out . range((16 - 1),valid_bits) = r . range((16 - valid_bits - 1),0);
      valid_bits = 256 - (16 - valid_bits);
    }
     else {
      out = r . range((256 - valid_bits + 16 - 1),(256 - valid_bits));
      valid_bits -= 16;
    }
    dstMat . write(i,out);
  }
}

static void p_ZN2xf11accel_utils11Array2xfMatILi256ELi2ELi2160ELi3840ELi1EEEP7ap_uintILi256EER3MatILi2ELi2160ELi3840ELi1EE(struct xf_accel_utils *this_,class ap_uint< 256 > *srcPtr,xf::Mat< 2 , 2160 , 3840 , 1 > &dstMat)
{
  
#pragma HLS DATAFLOW
  256 >= 16 && ((bool )"The ptr_width must be always greater than or equal to the minimum width for the corresponding configuration")?((void )0) : __assert_fail("(ptr_width >= StreamType<DataType<MAT_T,NPC>::wordwidth>::bitdepth) && \"The ptr_width must be always greater than or equal to the minimum width for the corresponding configuration\"","xf_utility.h",(unsigned int )667,__PRETTY_FUNCTION__);
  const int ch_width = 16;
  hls::stream< ap_uint< 256 >  > strm;
  int rows = dstMat . rows;
  int cols = dstMat . cols;
  p_ZN2xf11accel_utils13Array2hlsStrmILi256ELi2160ELi3840ELi1ELi1ELi16ELi518400EEEP7ap_uintILi256EER6streamI7ap_uintILi256EEEiixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(this_,srcPtr,strm,rows,cols);
  p_ZN2xf11accel_utils13Array2hlsStrmILi256ELi2160ELi3840ELi1ELi1ELi16ELi518400EEEP7ap_uintILi256EER6streamI7ap_uintILi256EEEiixxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(this_,srcPtr,strm,rows,cols);
  p_ZN2xf11accel_utils13hlsStrm2xfMatILi256ELi2ELi2160ELi3840ELi1ELi8294400EEER6streamI7ap_uintILi256EEER3MatILi2ELi2160ELi3840ELi1EE(this_,strm,dstMat);
}

static void p_ZN2xf11Array2xfMatILi256ELi2ELi2160ELi3840ELi1EEEP7ap_uintILi256EER3MatILi2ELi2160ELi3840ELi1EE(class ap_uint< 256 > *srcPtr,xf::Mat< 2 , 2160 , 3840 , 1 > &dstMat)
{
  struct xf_accel_utils au;
  p_ZN2xf11accel_utils11Array2xfMatILi256ELi2ELi2160ELi3840ELi1EEEP7ap_uintILi256EER3MatILi2ELi2160ELi3840ELi1EE(&au,srcPtr,dstMat);
}
unsigned short _ZN2xf12division_lutE[] = {(65535), (65535), (65535), (65504), (65472), (65440), (65408), (65376), (65344), (65312), (65280), (65249), (65217), (65185), (65154), (65122), (65091), (65059), (65027), (64996), (64965), (64933), (64902), (64870), (64839), (64808), (64776), (64745), (64714), (64683), (64652), (64620), (64589), (64558), (64527), (64496), (64465), (64434), (64403), (64373), (64342), (64311), (64280), (64249), (64219), (64188), (64157), (64126), (64096), (64065), (64035), (64004), (63974), (63943), (63913), (63882), (63852), (63822), (63791), (63761), (63731), (63700), (63670), (63640), (63610), (63580), (63550), (63519), (63489), (63459), (63429), (63399), (63370), (63340), (63310), (63280), (63250), (63220), (63191), (63161), (63131), (63101), (63072), (63042), (63013), (62983), (62953), (62924), (62894), (62865), (62836), (62806), (62777), (62747), (62718), (62689), (62660), (62630), (62601), (62572), (62543), (62514), (62484), (62455), (62426), (62397), (62368), (62339), (62310), (62282), (62253), (62224), (62195), (62166), (62137), (62109), (62080), (62051), (62022), (61994), (61965), (61937), (61908), (61880), (61851), (61822), (61794), (61766), (61737), (61709), (61680), (61652), (61624), (61596), (61567), (61539), (61511), (61483), (61455), (61426), (61398), (61370), (61342), (61314), (61286), (61258), (61230), (61202), (61174), (61147), (61119), (61091), (61063), (61035), (61008), (60980), (60952), (60924), (60897), (60869), (60842), (60814), (60787), (60759), (60732), (60704), (60677), (60649), (60622), (60594), (60567), (60540), (60512), (60485), (60458), (60431), (60404), (60376), (60349), (60322), (60295), (60268), (60241), (60214), (60187), (60160), (60133), (60106), (60079), (60052), (60025), (59998), (59972), (59945), (59918), (59891), (59865), (59838), (59811), (59785), (59758), (59731), (59705), (59678), (59652), (59625), (59599), (59572), (59546), (59520), (59493), (59467), (59440), (59414), (59388), (59362), (59335), (59309), (59283), (59257), (59231), (59204), (59178), (59152), (59126), (59100), (59074), (59048), (59022), (58996), (58970), (58944), (58919), (58893), (58867), (58841), (58815), (58790), (58764), (58738), (58712), (58687), (58661), (58635), (58610), (58584), (58559), (58533), (58508), (58482), (58457), (58431), (58406), (58380), (58355), (58330), (58304), (58279), (58254), (58228), (58203), (58178), (58153), (58128), (58102), (58077), (58052), (58027), (58002), (57977), (57952), (57927), (57902), (57877), (57852), (57827), (57802), (57777), (57752), (57728), (57703), (57678), (57653), (57628), (57604), (57579), (57554), (57530), (57505), (57480), (57456), (57431), (57407), (57382), (57358), (57333), (57309), (57284), (57260), (57235), (57211), (57186), (57162), (57138), (57113), (57089), (57065), (57041), (57016), (56992), (56968), (56944), (56920), (56896), (56871), (56847), (56823), (56799), (56775), (56751), (56727), (56703), (56679), (56655), (56631), (56608), (56584), (56560), (56536), (56512), (56488), (56465), (56441), (56417), (56394), (56370), (56346), (56323), (56299), (56275), (56252), (56228), (56205), (56181), (56158), (56134), (56111), (56087), (56064), (56040), (56017), (55994), (55970), (55947), (55924), (55900), (55877), (55854), (55831), (55807), (55784), (55761), (55738), (55715), (55692), (55668), (55645), (55622), (55599), (55576), (55553), (55530), (55507), (55484), (55461), (55438), (55416), (55393), (55370), (55347), (55324), (55301), (55279), (55256), (55233), (55210), (55188), (55165), (55142), (55120), (55097), (55074), (55052), (55029), (55007), (54984), (54962), (54939), (54917), (54894), (54872), (54849), (54827), (54805), (54782), (54760), (54738), (54715), (54693), (54671), (54648), (54626), (54604), (54582), (54560), (54537), (54515), (54493), (54471), (54449), (54427), (54405), (54383), (54361), (54339), (54317), (54295), (54273), (54251), (54229), (54207), (54185), (54163), (54141), (54120), (54098), (54076), (54054), (54032), (54011), (53989), (53967), (53946), (53924), (53902), (53881), (53859), (53837), (53816), (53794), (53773), (53751), (53730), (53708), (53687), (53665), (53644), (53622), (53601), (53579), (53558), (53537), (53515), (53494), (53473), (53451), (53430), (53409), (53388), (53366), (53345), (53324), (53303), (53282), (53261), (53239), (53218), (53197), (53176), (53155), (53134), (53113), (53092), (53071), (53050), (53029), (53008), (52987), (52966), (52945), (52924), (52904), (52883), (52862), (52841), (52820), (52800), (52779), (52758), (52737), (52717), (52696), (52675), (52655), (52634), (52613), (52593), (52572), (52551), (52531), (52510), (52490), (52469), (52449), (52428), (52408), (52387), (52367), (52347), (52326), (52306), (52285), (52265), (52245), (52224), (52204), (52184), (52163), (52143), (52123), (52103), (52082), (52062), (52042), (52022), (52002), (51982), (51961), (51941), (51921), (51901), (51881), (51861), (51841), (51821), (51801), (51781), (51761), (51741), (51721), (51701), (51681), (51661), (51642), (51622), (51602), (51582), (51562), (51542), (51523), (51503), (51483), (51463), (51444), (51424), (51404), (51385), (51365), (51345), (51326), (51306), (51286), (51267), (51247), (51228), (51208), (51189), (51169), (51150), (51130), (51111), (51091), (51072), (51052), (51033), (51013), (50994), (50975), (50955), (50936), (50917), (50897), (50878), (50859), (50840), (50820), (50801), (50782), (50763), (50743), (50724), (50705), (50686), (50667), (50648), (50629), (50610), (50590), (50571), (50552), (50533), (50514), (50495), (50476), (50457), (50438), (50419), (50400), (50382), (50363), (50344), (50325), (50306), (50287), (50268), (50249), (50231), (50212), (50193), (50174), (50156), (50137), (50118), (50099), (50081), (50062), (50043), (50025), (50006), (49987), (49969), (49950), (49932), (49913), (49895), (49876), (49857), (49839), (49820), (49802), (49784), (49765), (49747), (49728), (49710), (49691), (49673), (49655), (49636), (49618), (49600), (49581), (49563), (49545), (49526), (49508), (49490), (49472), (49453), (49435), (49417), (49399), (49381), (49362), (49344), (49326), (49308), (49290), (49272), (49254), (49236), (49218), (49200), (49182), (49164), (49146), (49128), (49110), (49092), (49074), (49056), (49038), (49020), (49002), (48984), (48966), (48948), (48931), (48913), (48895), (48877), (48859), (48841), (48824), (48806), (48788), (48770), (48753), (48735), (48717), (48700), (48682), (48664), (48647), (48629), (48612), (48594), (48576), (48559), (48541), (48524), (48506), (48489), (48471), (48454), (48436), (48419), (48401), (48384), (48366), (48349), (48331), (48314), (48297), (48279), (48262), (48245), (48227), (48210), (48193), (48175), (48158), (48141), (48123), (48106), (48089), (48072), (48055), (48037), (48020), (48003), (47986), (47969), (47952), (47934), (47917), (47900), (47883), (47866), (47849), (47832), (47815), (47798), (47781), (47764), (47747), (47730), (47713), (47696), (47679), (47662), (47645), (47628), (47611), (47594), (47578), (47561), (47544), (47527), (47510), (47493), (47477), (47460), (47443), (47426), (47410), (47393), (47376), (47359), (47343), (47326), (47309), (47293), (47276), (47259), (47243), (47226), (47209), (47193), (47176), (47160), (47143), (47127), (47110), (47093), (47077), (47060), (47044), (47027), (47011), (46995), (46978), (46962), (46945), (46929), (46912), (46896), (46880), (46863), (46847), (46831), (46814), (46798), (46782), (46765), (46749), (46733), (46716), (46700), (46684), (46668), (46651), (46635), (46619), (46603), (46587), (46571), (46554), (46538), (46522), (46506), (46490), (46474), (46458), (46442), (46426), (46410), (46393), (46377), (46361), (46345), (46329), (46313), (46297), (46281), (46266), (46250), (46234), (46218), (46202), (46186), (46170), (46154), (46138), (46122), (46107), (46091), (46075), (46059), (46043), (46028), (46012), (45996), (45980), (45964), (45949), (45933), (45917), (45902), (45886), (45870), (45855), (45839), (45823), (45808), (45792), (45776), (45761), (45745), (45730), (45714), (45698), (45683), (45667), (45652), (45636), (45621), (45605), (45590), (45574), (45559), (45543), (45528), (45512), (45497), (45482), (45466), (45451), (45435), (45420), (45405), (45389), (45374), (45359), (45343), (45328), (45313), (45297), (45282), (45267), (45252), (45236), (45221), (45206), (45191), (45175), (45160), (45145), (45130), (45115), (45100), (45084), (45069), (45054), (45039), (45024), (45009), (44994), (44979), (44964), (44949), (44933), (44918), (44903), (44888), (44873), (44858), (44843), (44828), (44813), (44798), (44784), (44769), (44754), (44739), (44724), (44709), (44694), (44679), (44664), (44649), (44635), (44620), (44605), (44590), (44575), (44561), (44546), (44531), (44516), (44501), (44487), (44472), (44457), (44442), (44428), (44413), (44398), (44384), (44369), (44354), (44340), (44325), (44310), (44296), (44281), (44267), (44252), (44237), (44223), (44208), (44194), (44179), (44165), (44150), (44136), (44121), (44107), (44092), (44078), (44063), (44049), (44034), (44020), (44005), (43991), (43976), (43962), (43948), (43933), (43919), (43905), (43890), (43876), (43862), (43847), (43833), (43819), (43804), (43790), (43776), (43761), (43747), (43733), (43719), (43704), (43690), (43676), (43662), (43648), (43633), (43619), (43605), (43591), (43577), (43563), (43548), (43534), (43520), (43506), (43492), (43478), (43464), (43450), (43436), (43422), (43408), (43394), (43380), (43365), (43351), (43337), (43323), (43310), (43296), (43282), (43268), (43254), (43240), (43226), (43212), (43198), (43184), (43170), (43156), (43142), (43129), (43115), (43101), (43087), (43073), (43059), (43046), (43032), (43018), (43004), (42990), (42977), (42963), (42949), (42935), (42922), (42908), (42894), (42881), (42867), (42853), (42840), (42826), (42812), (42799), (42785), (42771), (42758), (42744), (42730), (42717), (42703), (42690), (42676), (42662), (42649), (42635), (42622), (42608), (42595), (42581), (42568), (42554), (42541), (42527), (42514), (42500), (42487), (42473), (42460), (42447), (42433), (42420), (42406), (42393), (42380), (42366), (42353), (42339), (42326), (42313), (42299), (42286), (42273), (42259), (42246), (42233), (42220), (42206), (42193), (42180), (42167), (42153), (42140), (42127), (42114), (42100), (42087), (42074), (42061), (42048), (42034), (42021), (42008), (41995), (41982), (41969), (41956), (41943), (41929), (41916), (41903), (41890), (41877), (41864), (41851), (41838), (41825), (41812), (41799), (41786), (41773), (41760), (41747), (41734), (41721), (41708), (41695), (41682), (41669), (41656), (41643), (41630), (41617), (41605), (41592), (41579), (41566), (41553), (41540), (41527), (41514), (41502), (41489), (41476), (41463), (41450), (41438), (41425), (41412), (41399), (41386), (41374), (41361), (41348), (41335), (41323), (41310), (41297), (41285), (41272), (41259), (41246), (41234), (41221), (41209), (41196), (41183), (41171), (41158), (41145), (41133), (41120), (41108), (41095), (41082), (41070), (41057), (41045), (41032), (41020), (41007), (40995), (40982), (40970), (40957), (40945), (40932), (40920), (40907), (40895), (40882), (40870), (40857), (40845), (40832), (40820), (40808), (40795), (40783), (40770), (40758), (40746), (40733), (40721), (40709), (40696), (40684), (40672), (40659), (40647), (40635), (40622), (40610), (40598), (40585), (40573), (40561), (40549), (40536), (40524), (40512), (40500), (40488), (40475), (40463), (40451), (40439), (40427), (40414), (40402), (40390), (40378), (40366), (40354), (40341), (40329), (40317), (40305), (40293), (40281), (40269), (40257), (40245), (40233), (40221), (40209), (40196), (40184), (40172), (40160), (40148), (40136), (40124), (40112), (40100), (40088), (40076), (40064), (40053), (40041), (40029), (40017), (40005), (39993), (39981), (39969), (39957), (39945), (39933), (39921), (39910), (39898), (39886), (39874), (39862), (39850), (39839), (39827), (39815), (39803), (39791), (39780), (39768), (39756), (39744), (39732), (39721), (39709), (39697), (39685), (39674), (39662), (39650), (39639), (39627), (39615), (39603), (39592), (39580), (39568), (39557), (39545), (39533), (39522), (39510), (39499), (39487), (39475), (39464), (39452), (39441), (39429), (39417), (39406), (39394), (39383), (39371), (39360), (39348), (39336), (39325), (39313), (39302), (39290), (39279), (39267), (39256), (39244), (39233), (39222), (39210), (39199), (39187), (39176), (39164), (39153), (39141), (39130), (39119), (39107), (39096), (39084), (39073), (39062), (39050), (39039), (39028), (39016), (39005), (38994), (38982), (38971), (38960), (38948), (38937), (38926), (38914), (38903), (38892), (38881), (38869), (38858), (38847), (38836), (38824), (38813), (38802), (38791), (38780), (38768), (38757), (38746), (38735), (38724), (38712), (38701), (38690), (38679), (38668), (38657), (38646), (38634), (38623), (38612), (38601), (38590), (38579), (38568), (38557), (38546), (38535), (38524), (38512), (38501), (38490), (38479), (38468), (38457), (38446), (38435), (38424), (38413), (38402), (38391), (38380), (38369), (38358), (38347), (38336), (38326), (38315), (38304), (38293), (38282), (38271), (38260), (38249), (38238), (38227), (38216), (38206), (38195), (38184), (38173), (38162), (38151), (38140), (38130), (38119), (38108), (38097), (38086), (38075), (38065), (38054), (38043), (38032), (38022), (38011), (38000), (37989), (37978), (37968), (37957), (37946), (37936), (37925), (37914), (37903), (37893), (37882), (37871), (37861), (37850), (37839), (37829), (37818), (37807), (37797), (37786), (37775), (37765), (37754), (37744), (37733), (37722), (37712), (37701), (37691), (37680), (37669), (37659), (37648), (37638), (37627), (37617), (37606), (37596), (37585), (37574), (37564), (37553), (37543), (37532), (37522), (37511), (37501), (37490), (37480), (37470), (37459), (37449), (37438), (37428), (37417), (37407), (37396), (37386), (37376), (37365), (37355), (37344), (37334), (37324), (37313), (37303), (37293), (37282), (37272), (37262), (37251), (37241), (37230), (37220), (37210), (37200), (37189), (37179), (37169), (37158), (37148), (37138), (37128), (37117), (37107), (37097), (37086), (37076), (37066), (37056), (37046), (37035), (37025), (37015), (37005), (36994), (36984), (36974), (36964), (36954), (36944), (36933), (36923), (36913), (36903), (36893), (36883), (36873), (36862), (36852), (36842), (36832), (36822), (36812), (36802), (36792), (36782), (36771), (36761), (36751), (36741), (36731), (36721), (36711), (36701), (36691), (36681), (36671), (36661), (36651), (36641), (36631), (36621), (36611), (36601), (36591), (36581), (36571), (36561), (36551), (36541), (36531), (36521), (36511), (36501), (36492), (36482), (36472), (36462), (36452), (36442), (36432), (36422), (36412), (36402), (36393), (36383), (36373), (36363), (36353), (36343), (36333), (36324), (36314), (36304), (36294), (36284), (36275), (36265), (36255), (36245), (36235), (36226), (36216), (36206), (36196), (36187), (36177), (36167), (36157), (36148), (36138), (36128), (36118), (36109), (36099), (36089), (36080), (36070), (36060), (36050), (36041), (36031), (36021), (36012), (36002), (35992), (35983), (35973), (35964), (35954), (35944), (35935), (35925), (35915), (35906), (35896), (35887), (35877), (35867), (35858), (35848), (35839), (35829), (35820), (35810), (35800), (35791), (35781), (35772), (35762), (35753), (35743), (35734), (35724), (35715), (35705), (35696), (35686), (35677), (35667), (35658), (35648), (35639), (35629), (35620), (35610), (35601), (35592), (35582), (35573), (35563), (35554), (35544), (35535), (35526), (35516), (35507), (35497), (35488), (35479), (35469), (35460), (35451), (35441), (35432), (35422), (35413), (35404), (35394), (35385), (35376), (35366), (35357), (35348), (35339), (35329), (35320), (35311), (35301), (35292), (35283), (35274), (35264), (35255), (35246), (35237), (35227), (35218), (35209), (35200), (35190), (35181), (35172), (35163), (35153), (35144), (35135), (35126), (35117), (35107), (35098), (35089), (35080), (35071), (35062), (35052), (35043), (35034), (35025), (35016), (35007), (34998), (34988), (34979), (34970), (34961), (34952), (34943), (34934), (34925), (34916), (34907), (34898), (34888), (34879), (34870), (34861), (34852), (34843), (34834), (34825), (34816), (34807), (34798), (34789), (34780), (34771), (34762), (34753), (34744), (34735), (34726), (34717), (34708), (34699), (34690), (34681), (34672), (34663), (34654), (34645), (34636), (34627), (34618), (34610), (34601), (34592), (34583), (34574), (34565), (34556), (34547), (34538), (34529), (34521), (34512), (34503), (34494), (34485), (34476), (34467), (34458), (34450), (34441), (34432), (34423), (34414), (34405), (34397), (34388), (34379), (34370), (34361), (34353), (34344), (34335), (34326), (34318), (34309), (34300), (34291), (34282), (34274), (34265), (34256), (34247), (34239), (34230), (34221), (34213), (34204), (34195), (34186), (34178), (34169), (34160), (34152), (34143), (34134), (34126), (34117), (34108), (34100), (34091), (34082), (34074), (34065), (34056), (34048), (34039), (34030), (34022), (34013), (34005), (33996), (33987), (33979), (33970), (33961), (33953), (33944), (33936), (33927), (33919), (33910), (33901), (33893), (33884), (33876), (33867), (33859), (33850), (33842), (33833), (33825), (33816), (33807), (33799), (33790), (33782), (33773), (33765), (33756), (33748), (33740), (33731), (33723), (33714), (33706), (33697), (33689), (33680), (33672), (33663), (33655), (33646), (33638), (33630), (33621), (33613), (33604), (33596), (33588), (33579), (33571), (33562), (33554), (33546), (33537), (33529), (33520), (33512), (33504), (33495), (33487), (33479), (33470), (33462), (33454), (33445), (33437), (33429), (33420), (33412), (33404), (33395), (33387), (33379), (33370), (33362), (33354), (33346), (33337), (33329), (33321), (33312), (33304), (33296), (33288), (33279), (33271), (33263), (33255), (33246), (33238), (33230), (33222), (33213), (33205), (33197), (33189), (33181), (33172), (33164), (33156), (33148), (33140), (33132), (33123), (33115), (33107), (33099), (33091), (33083), (33074), (33066), (33058), (33050), (33042), (33034), (33026), (33017), (33009), (33001), (32993), (32985), (32977), (32969), (32961), (32953), (32944), (32936), (32928), (32920), (32912), (32904), (32896), (32888), (32880), (32872), (32864), (32856), (32848), (32840), (32832), (32824), (32816), (32808), (32800), (32792), (32784)};

static unsigned int Inverse(unsigned short x,int M,char *N)
{
  int M_copy = 1;
  1 <= 16 && ((bool )"Integer part of x should always be less than or equal to 16 bits.")?((void )0) : __assert_fail("(M<=16) && \"Integer part of x should always be less than or equal to 16 bits.\"","xf_math.h",(unsigned int )234,__PRETTY_FUNCTION__);
  unsigned int val = (unsigned int )0;
  unsigned int index;
  int B_L = 16 + 1;
  int tmp = 4;
  int pos;
  int block;
  pos = block = 0;
  int shift = 0;
  unsigned short x1 = (unsigned short )(((int )x) >> 12 & 0x000F);
  unsigned short x2 = (unsigned short )(((int )x) >> 8 & 0x000F);
  unsigned short x3 = (unsigned short )(((int )x) >> 4 & 0x000F);
  unsigned short x4 = (unsigned short )(((int )x) & 0x000F);
  unsigned short tmpx = (unsigned short )0;
  if (((int )x) == 0) {
    return (unsigned int )_ZN2xf12division_lutE[0];
  }
   else {
    if (((int )x1) > 0) {
      tmpx = x1;
      block = 0;
      for (tmp = 0; tmp < 4; tmp++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
        
#pragma HLS unroll
        
#pragma HLS LOOP_TRIPCOUNT min=4 max=4 avg=4
        tmpx = ((unsigned short )(((int )x1) >> 3 - tmp));
        if ((bool )tmpx) {
          pos = tmp + 1;
          break; 
        }
      }
    }
     else {
      if (((int )x2) > 0) {
        block = 1;
        tmpx = x2;
        for (tmp = 0; tmp < 4; tmp++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
          
#pragma HLS unroll
          
#pragma HLS LOOP_TRIPCOUNT min=4 max=4 avg=4
          tmpx = ((unsigned short )(((int )x2) >> 3 - tmp));
          if ((bool )tmpx) {
            pos = tmp + 1;
            break; 
          }
        }
      }
       else {
        if (((int )x3) > 0) {
          block = 2;
          tmpx = x3;
          for (tmp = 0; tmp < 4; tmp++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
            
#pragma HLS unroll
            
#pragma HLS LOOP_TRIPCOUNT min=4 max=4 avg=4
            tmpx = ((unsigned short )(((int )x3) >> 3 - tmp));
            if ((bool )tmpx) {
              pos = tmp + 1;
              break; 
            }
          }
        }
         else {
          block = 3;
          tmpx = x4;
          for (tmp = 0; tmp < 4; tmp++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
            
#pragma HLS unroll
            
#pragma HLS LOOP_TRIPCOUNT min=4 max=4 avg=4
            tmpx = ((unsigned short )(((int )x4) >> 3 - tmp));
            if ((bool )tmpx) {
              pos = tmp + 1;
              break; 
            }
          }
        }
      }
    }
  }
  B_L = 4 * block + pos;
  shift = 16 - 11 - 1;
  if (B_L >= 1) {
    index = ((unsigned int )((((int )x) << B_L - 1 & 0x7FFF) >> shift));
  }
   else {
    index = ((unsigned int )((((int )x) & 0x7FFF) >> shift));
  }
  val = ((unsigned int )_ZN2xf12division_lutE[index]);
   *N = ((char )(1 + 16 - B_L));
  return val;
}

static unsigned int DivideYByX(unsigned short x,unsigned short y,int M1,int M2,char *out_M,char *out_N)
{
  int M2_copy = 1;
  int M1_copy = 1;
  unsigned int div_val;
  char MOut;
  char NOut;
  unsigned int x_inv = Inverse(x,1,&NOut);
  MOut = ((char )(16 - ((int )NOut) + 1));
  NOut = ((char )(((int )NOut) + 16 - 1));
  div_val = ((unsigned int )y) * x_inv;
   *out_M = MOut;
   *out_N = NOut;
  return div_val;
}
int _ZN2xf13frac_bits_lutE[63] = {(9), (8), (7), (6), (6), (6), (5), (5), (5), (4), (4), (4), (4), (4), (4), (4), (3), (3), (3), (3), (3), (3), (3), (3), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2), (2)};
int _ZN2xf13base_addr_lutE[63] = {(0), (512), (768), (896), (960), (1024), (1088), (1120), (1152), (1184), (1200), (1216), (1232), (1248), (1264), (1280), (1296), (1304), (1312), (1320), (1328), (1336), (1344), (1352), (1360), (1362), (1364), (1366), (1368), (1370), (1372), (1374), (1376), (1378), (1380), (1382), (1384), (1386), (1388), (1390), (1392), (1394), (1396), (1398), (1400), (1402), (1404), (1406), (1408), (1410), (1412), (1414), (1416), (1418), (1420), (1422), (1424), (1426), (1428), (1430), (1432), (1434), (1436)};
short _ZN2xf11atan_lut_fpE[1440] = {(0), (7), (15), (23), (31), (39), (47), (55), (63), (71), (79), (87), (95), (103), (111), (119), (127), (135), (143), (151), (159), (167), (175), (183), (191), (199), (207), (215), (223), (231), (239), (247), (255), (263), (271), (279), (287), (295), (303), (311), (319), (327), (335), (343), (351), (358), (366), (374), (382), (390), (398), (406), (414), (422), (430), (438), (446), (454), (461), (469), (477), (485), (493), (501), (509), (517), (524), (532), (540), (548), (556), (564), (572), (579), (587), (595), (603), (611), (619), (626), (634), (642), (650), (658), (665), (673), (681), (689), (697), (704), (712), (720), (728), (735), (743), (751), (758), (766), (774), (782), (789), (797), (805), (812), (820), (828), (835), (843), (851), (858), (866), (874), (881), (889), (897), (904), (912), (919), (927), (935), (942), (950), (957), (965), (973), (980), (988), (995), (1003), (1010), (1018), (1025), (1033), (1040), (1048), (1055), (1063), (1070), (1078), (1085), (1093), (1100), (1107), (1115), (1122), (1130), (1137), (1144), (1152), (1159), (1167), (1174), (1181), (1189), (1196), (1203), (1211), (1218), (1225), (1233), (1240), (1247), (1254), (1262), (1269), (1276), (1283), (1291), (1298), (1305), (1312), (1319), (1327), (1334), (1341), (1348), (1355), (1362), (1370), (1377), (1384), (1391), (1398), (1405), (1412), (1419), (1426), (1433), (1441), (1448), (1455), (1462), (1469), (1476), (1483), (1490), (1497), (1504), (1511), (1518), (1524), (1531), (1538), (1545), (1552), (1559), (1566), (1573), (1580), (1587), (1593), (1600), (1607), (1614), (1621), (1628), (1634), (1641), (1648), (1655), (1661), (1668), (1675), (1682), (1688), (1695), (1702), (1708), (1715), (1722), (1728), (1735), (1742), (1748), (1755), (1762), (1768), (1775), (1781), (1788), (1794), (1801), (1808), (1814), (1821), (1827), (1834), (1840), (1847), (1853), (1860), (1866), (1872), (1879), (1885), (1892), (1898), (1905), (1911), (1917), (1924), (1930), (1936), (1943), (1949), (1955), (1962), (1968), (1974), (1980), (1987), (1993), (1999), (2005), (2012), (2018), (2024), (2030), (2036), (2043), (2049), (2055), (2061), (2067), (2073), (2079), (2086), (2092), (2098), (2104), (2110), (2116), (2122), (2128), (2134), (2140), (2146), (2152), (2158), (2164), (2170), (2176), (2182), (2188), (2194), (2200), (2205), (2211), (2217), (2223), (2229), (2235), (2241), (2246), (2252), (2258), (2264), (2270), (2275), (2281), (2287), (2293), (2298), (2304), (2310), (2316), (2321), (2327), (2333), (2338), (2344), (2350), (2355), (2361), (2366), (2372), (2378), (2383), (2389), (2394), (2400), (2406), (2411), (2417), (2422), (2428), (2433), (2439), (2444), (2450), (2455), (2460), (2466), (2471), (2477), (2482), (2488), (2493), (2498), (2504), (2509), (2514), (2520), (2525), (2530), (2536), (2541), (2546), (2552), (2557), (2562), (2567), (2573), (2578), (2583), (2588), (2593), (2599), (2604), (2609), (2614), (2619), (2624), (2630), (2635), (2640), (2645), (2650), (2655), (2660), (2665), (2670), (2675), (2680), (2685), (2690), (2695), (2700), (2705), (2710), (2715), (2720), (2725), (2730), (2735), (2740), (2745), (2750), (2755), (2760), (2765), (2769), (2774), (2779), (2784), (2789), (2794), (2798), (2803), (2808), (2813), (2818), (2822), (2827), (2832), (2837), (2841), (2846), (2851), (2855), (2860), (2865), (2869), (2874), (2879), (2883), (2888), (2893), (2897), (2902), (2907), (2911), (2916), (2920), (2925), (2929), (2934), (2939), (2943), (2948), (2952), (2957), (2961), (2966), (2970), (2975), (2979), (2984), (2988), (2992), (2997), (3001), (3006), (3010), (3014), (3019), (3023), (3028), (3032), (3036), (3041), (3045), (3049), (3054), (3058), (3062), (3067), (3071), (3075), (3079), (3084), (3088), (3092), (3096), (3101), (3105), (3109), (3113), (3117), (3122), (3126), (3130), (3134), (3138), (3142), (3147), (3151), (3155), (3159), (3163), (3167), (3171), (3175), (3179), (3183), (3188), (3192), (3196), (3200), (3204), (3208), (3212), (3216), (3224), (3232), (3240), (3247), (3255), (3263), (3271), (3279), (3286), (3294), (3302), (3309), (3317), (3325), (3332), (3340), (3347), (3355), (3362), (3370), (3377), (3384), (3392), (3399), (3406), (3413), (3421), (3428), (3435), (3442), (3449), (3456), (3463), (3470), (3477), (3484), (3491), (3498), (3505), (3512), (3519), (3526), (3532), (3539), (3546), (3553), (3559), (3566), (3572), (3579), (3586), (3592), (3599), (3605), (3612), (3618), (3625), (3631), (3637), (3644), (3650), (3656), (3663), (3669), (3675), (3681), (3687), (3694), (3700), (3706), (3712), (3718), (3724), (3730), (3736), (3742), (3748), (3754), (3760), (3766), (3772), (3777), (3783), (3789), (3795), (3801), (3806), (3812), (3818), (3823), (3829), (3835), (3840), (3846), (3851), (3857), (3863), (3868), (3873), (3879), (3884), (3890), (3895), (3901), (3906), (3911), (3917), (3922), (3927), (3932), (3938), (3943), (3948), (3953), (3959), (3964), (3969), (3974), (3979), (3984), (3989), (3994), (3999), (4004), (4009), (4014), (4019), (4024), (4029), (4034), (4039), (4044), (4048), (4053), (4058), (4063), (4068), (4072), (4077), (4082), (4087), (4091), (4096), (4101), (4105), (4110), (4114), (4119), (4124), (4128), (4133), (4137), (4142), (4146), (4151), (4155), (4160), (4164), (4168), (4173), (4177), (4182), (4186), (4190), (4195), (4199), (4203), (4208), (4212), (4216), (4220), (4225), (4229), (4233), (4237), (4241), (4245), (4250), (4254), (4258), (4262), (4266), (4270), (4274), (4278), (4282), (4286), (4290), (4294), (4298), (4302), (4306), (4310), (4314), (4318), (4322), (4326), (4329), (4333), (4337), (4341), (4345), (4349), (4352), (4356), (4360), (4364), (4367), (4371), (4375), (4378), (4382), (4386), (4390), (4393), (4397), (4400), (4404), (4408), (4411), (4415), (4418), (4422), (4426), (4429), (4433), (4436), (4440), (4443), (4447), (4450), (4454), (4457), (4460), (4464), (4467), (4471), (4474), (4477), (4481), (4484), (4487), (4491), (4494), (4497), (4501), (4504), (4507), (4511), (4514), (4517), (4520), (4524), (4527), (4530), (4533), (4540), (4546), (4552), (4559), (4565), (4571), (4577), (4583), (4589), (4595), (4601), (4607), (4613), (4619), (4625), (4631), (4637), (4642), (4648), (4654), (4659), (4665), (4671), (4676), (4682), (4687), (4693), (4698), (4703), (4709), (4714), (4719), (4725), (4730), (4735), (4740), (4745), (4750), (4755), (4761), (4766), (4771), (4776), (4780), (4785), (4790), (4795), (4800), (4805), (4810), (4814), (4819), (4824), (4828), (4833), (4838), (4842), (4847), (4851), (4856), (4860), (4865), (4869), (4874), (4878), (4883), (4887), (4891), (4896), (4900), (4904), (4908), (4913), (4917), (4921), (4925), (4929), (4933), (4937), (4941), (4945), (4949), (4953), (4957), (4961), (4965), (4969), (4973), (4977), (4981), (4985), (4989), (4992), (4996), (5000), (5004), (5007), (5011), (5015), (5018), (5022), (5026), (5029), (5033), (5037), (5040), (5044), (5047), (5051), (5054), (5058), (5061), (5065), (5068), (5071), (5075), (5078), (5082), (5085), (5088), (5092), (5095), (5098), (5101), (5105), (5108), (5111), (5114), (5121), (5127), (5133), (5139), (5146), (5152), (5158), (5164), (5170), (5175), (5181), (5187), (5193), (5198), (5204), (5210), (5215), (5221), (5226), (5231), (5237), (5242), (5247), (5252), (5257), (5263), (5268), (5273), (5278), (5283), (5287), (5292), (5297), (5302), (5307), (5311), (5316), (5321), (5325), (5330), (5334), (5339), (5343), (5347), (5352), (5356), (5360), (5365), (5369), (5373), (5377), (5381), (5386), (5390), (5394), (5398), (5402), (5406), (5410), (5413), (5417), (5421), (5425), (5429), (5432), (5436), (5440), (5444), (5447), (5451), (5454), (5458), (5462), (5465), (5469), (5472), (5475), (5479), (5482), (5486), (5489), (5492), (5496), (5499), (5502), (5505), (5509), (5512), (5515), (5518), (5521), (5524), (5527), (5530), (5533), (5536), (5539), (5542), (5545), (5548), (5551), (5554), (5557), (5560), (5563), (5566), (5568), (5571), (5574), (5577), (5579), (5582), (5585), (5588), (5590), (5593), (5596), (5598), (5601), (5603), (5606), (5609), (5611), (5614), (5616), (5619), (5621), (5624), (5626), (5628), (5631), (5633), (5636), (5638), (5640), (5643), (5645), (5647), (5650), (5652), (5654), (5657), (5659), (5661), (5663), (5666), (5668), (5670), (5672), (5674), (5677), (5679), (5681), (5683), (5685), (5687), (5689), (5691), (5693), (5695), (5697), (5699), (5702), (5704), (5706), (5707), (5709), (5711), (5713), (5715), (5717), (5719), (5721), (5723), (5725), (5727), (5729), (5731), (5732), (5734), (5736), (5738), (5740), (5742), (5743), (5745), (5747), (5749), (5750), (5752), (5754), (5756), (5759), (5762), (5766), (5769), (5772), (5776), (5779), (5782), (5785), (5789), (5792), (5795), (5798), (5801), (5804), (5807), (5810), (5813), (5816), (5818), (5821), (5824), (5827), (5830), (5832), (5835), (5838), (5840), (5843), (5846), (5848), (5851), (5853), (5856), (5858), (5861), (5863), (5866), (5868), (5871), (5873), (5875), (5878), (5880), (5882), (5885), (5887), (5889), (5891), (5894), (5896), (5898), (5900), (5902), (5904), (5906), (5909), (5911), (5913), (5915), (5917), (5919), (5921), (5923), (5925), (5927), (5929), (5930), (5932), (5934), (5936), (5938), (5940), (5942), (5943), (5945), (5947), (5949), (5951), (5952), (5954), (5956), (5958), (5959), (5961), (5963), (5964), (5966), (5968), (5969), (5971), (5972), (5974), (5976), (5977), (5979), (5982), (5985), (5988), (5991), (5994), (5997), (6000), (6002), (6005), (6008), (6011), (6013), (6016), (6019), (6021), (6024), (6026), (6029), (6031), (6034), (6036), (6038), (6041), (6043), (6045), (6048), (6050), (6052), (6054), (6056), (6059), (6061), (6063), (6065), (6067), (6069), (6071), (6073), (6075), (6077), (6079), (6081), (6082), (6084), (6086), (6088), (6090), (6091), (6093), (6095), (6097), (6098), (6100), (6102), (6103), (6105), (6107), (6108), (6110), (6111), (6113), (6114), (6116), (6118), (6119), (6121), (6122), (6123), (6125), (6126), (6128), (6129), (6131), (6132), (6133), (6135), (6136), (6137), (6139), (6140), (6141), (6142), (6144), (6145), (6146), (6147), (6149), (6150), (6151), (6152), (6154), (6155), (6156), (6157), (6158), (6159), (6160), (6162), (6163), (6164), (6165), (6166), (6167), (6168), (6169), (6170), (6171), (6172), (6173), (6174), (6175), (6176), (6178), (6180), (6182), (6184), (6186), (6188), (6190), (6191), (6193), (6195), (6196), (6198), (6200), (6201), (6203), (6205), (6206), (6208), (6209), (6211), (6212), (6214), (6215), (6217), (6218), (6219), (6221), (6222), (6223), (6225), (6226), (6227), (6229), (6230), (6231), (6232), (6234), (6235), (6236), (6237), (6238), (6239), (6240), (6242), (6243), (6244), (6245), (6246), (6247), (6248), (6249), (6250), (6251), (6252), (6253), (6254), (6255), (6256), (6257), (6258), (6259), (6260), (6260), (6261), (6265), (6268), (6271), (6274), (6277), (6280), (6283), (6286), (6288), (6291), (6293), (6295), (6298), (6300), (6302), (6304), (6306), (6308), (6310), (6312), (6313), (6315), (6317), (6318), (6320), (6321), (6323), (6324), (6326), (6327), (6328), (6330), (6331), (6332), (6333), (6334), (6336), (6337), (6338), (6339), (6340), (6341), (6342), (6343), (6344), (6345), (6346), (6347), (6347), (6348), (6349), (6350), (6351), (6352), (6352), (6353), (6354), (6355), (6355), (6356), (6357), (6357), (6358), (6359), (6359), (6360), (6361), (6361), (6362), (6363), (6363), (6364), (6364), (6365), (6365), (6366), (6366), (6367), (6367)};

static short Atan2LookupFP(short xs,short ys,int M1,int N1,int M2,int N2)
{
  int N2_copy = 15;
  int M2_copy = 1;
  int N1_copy = 15;
  int M1_copy = 1;
  15 == 16 - 1 && 15 == 16 - 1 && 1 == 1 && ((bool )"xs and ys should be of 16-bit and same fixed point type.")?((void )0) : __assert_fail("((N1 == 16-M1) && (N2==16-M2) && (M1==M2)) && \"xs and ys should be of 16-bit and same fixed point type.\"","xf_math.h",(unsigned int )462,__PRETTY_FUNCTION__);
  short theta;
  signed char s1;
  signed char s2;
  signed char s;
  if (((int )ys) == 0 && ((int )xs) == 0) {
    return (short )0;
  }
   else {
    unsigned long gy_fp;
    unsigned long gx_fp;
    unsigned long frac_extractor;
    unsigned long k2_fp;
    unsigned short int_part;
    unsigned int frac_part;
    unsigned int frac_ind;
    unsigned int frac_bits;
    gx_fp = ((unsigned long )xs);
    s1 = ((signed char )1);
    gy_fp = ((unsigned long )ys);
    s2 = ((signed char )1);
    if (((int )xs) < 0) {
      gx_fp = ((unsigned long )(-((int )xs)));
      s1 = ((signed char )(- 1));
    }
    if (((int )ys) < 0) {
      gy_fp = ((unsigned long )(-((int )ys)));
      s2 = ((signed char )(- 1));
    }
    s = ((signed char )(((int )s1) * ((int )s2)));
    char MOut;
    char NOut;
    k2_fp = ((unsigned long )(DivideYByX((unsigned short )gx_fp,(unsigned short )gy_fp,1,1,&MOut,&NOut)));
    frac_extractor = ((unsigned long )((1 << ((int )NOut)) - 1));
    int_part = ((unsigned short )(k2_fp >> ((int )NOut)));
    frac_part = ((unsigned int )(k2_fp & frac_extractor));
    if (((int )int_part) < 63) {
      frac_bits = ((unsigned int )_ZN2xf13frac_bits_lutE[int_part]);
      frac_ind = frac_part >> ((unsigned int )NOut) - frac_bits;
      int ind = (int )(((unsigned int )_ZN2xf13base_addr_lutE[int_part]) + frac_ind);
      theta = _ZN2xf11atan_lut_fpE[ind];
    }
     else {
      theta = ((short )6433);
    }
    if (gx_fp == ((unsigned long )0)) {
      theta = ((short )6433);
    }
    if (((int )s) < 0) {
      theta = ((short )(-((int )theta)));
    }
    if (((int )xs) > 0) {
      return theta;
    }
     else {
      if (((int )ys) >= 0 && ((int )xs) < 0) {
        return (short )(12867 + ((int )theta));
      }
       else {
        if (((int )ys) < 0 && ((int )xs) < 0) {
          return (short )(((int )theta) - 12867);
        }
         else {
          if (((int )ys) > 0 && ((int )xs) == 0) {
            return (short )6433;
          }
           else {
            if (((int )ys) < 0 && ((int )xs) == 0) {
              return (short )(- 6433);
            }
          }
        }
      }
    }
  }
  return theta;
}

static void p_ZN2xf13xfPhaseKernelILi2ELi2ELi2160ELi3840ELi3ELi3ELi1ELi5ELi5ELi3840EEER3MatILi2ELi2160ELi3840ELi1EER3MatILi2ELi2160ELi3840ELi1EER3MatILi2ELi2160ELi3840ELi1EEiRtRt(xf::Mat< 2 , 2160 , 3840 , 1 > &_src1,xf::Mat< 2 , 2160 , 3840 , 1 > &_src2,xf::Mat< 2 , 2160 , 3840 , 1 > &_dst_mat,int _out_format,unsigned short &imgheight,unsigned short &imgwidth)
{
  int _out_format_copy = 1;
  int M1;
  int N1;
  int M2;
  int N2;
  M1 = 1;
  N1 = 16 - 1;
  M2 = 1;
  N2 = 16 - 1;
  StreamType< 5> ::name val_src1;
  StreamType< 5> ::name val_src2;
  StreamType< 5> ::name val_dst;
  short p;
  short q;
  short ret = (short )0;
  short result;
  int result_temp = 0;
  rowLoop:
  for (class ap_uint< 13 > i(0); i<imgheight; i ++ ) {
    
#pragma HLS LOOP_TRIPCOUNT min=2160 max=2160
    colLoop:
    for (class ap_uint< 13 > j(0); j<imgwidth; j ++ ) {
      
#pragma HLS LOOP_TRIPCOUNT min=3840 max=3840
      val_src1 = _src1 . read(((int )(i*imgwidth+j)));
      val_src2 = _src2 . read(((int )(i*imgwidth+j)));
      int proc_loop = 16;
      int step = 16;
      procLoop:
      for (class ap_uint< 9 > k(0); k<16; k += 16) 
// Original: #pragma ACCEL PIPELINE AUTO
{
        
#pragma HLS pipeline
        p = ((short )(val_src1 . range(((int )(k+(16 - 1))),((int )k))));
        q = ((short )(val_src2 . range(((int )(k+(16 - 1))),((int )k))));
        ret = Atan2LookupFP(p,q,1,15,1,15);
        if (((int )ret) < 0) {
          result_temp = ((int )ret) + 12867 + 12867;
        }
         else {
          if (((int )ret) == 0 && ((int )q) < 0) {
            result_temp = ((int )ret) + 12867 + 12867;
          }
           else {
            result_temp = ((int )ret);
          }
        }
{
          result = ((short )(58671 * result_temp + 0x8000 >> 16));
        }
        val_dst . range(((int )(k+(16 - 1))),((int )k)) = result;
      }
      _dst_mat . write(((int )(i*imgwidth+j)),val_dst);
    }
  }
}

static void p_ZN2xf5phaseILi1ELi2ELi2ELi2160ELi3840ELi1EEER3MatILi2ELi2160ELi3840ELi1EER3MatILi2ELi2160ELi3840ELi1EER3MatILi2ELi2160ELi3840ELi1EE(xf::Mat< 2 , 2160 , 3840 , 1 > &_src_matx,xf::Mat< 2 , 2160 , 3840 , 1 > &_src_maty,xf::Mat< 2 , 2160 , 3840 , 1 > &_dst_mat)
{
  _src_matx . rows <= 2160 && _src_matx . cols <= 3840 && ((bool )"ROWS and COLS should be greater than input image")?((void )0) : __assert_fail("((_src_matx.rows <= ROWS ) && (_src_matx.cols <= COLS)) && \"ROWS and COLS should be greater than input image\"","xf_phase.hpp",(unsigned int )180,__PRETTY_FUNCTION__);
  _src_maty . rows <= 2160 && _src_maty . cols <= 3840 && ((bool )"ROWS and COLS should be greater than input image")?((void )0) : __assert_fail("((_src_maty.rows <= ROWS ) && (_src_maty.cols <= COLS)) && \"ROWS and COLS should be greater than input image\"","xf_phase.hpp",(unsigned int )181,__PRETTY_FUNCTION__);
  _src_matx . rows == _src_maty . rows && _src_matx . cols == _src_maty . cols && ((bool )"Both input images should have same size")?((void )0) : __assert_fail("((_src_matx.rows == _src_maty.rows ) && (_src_matx.cols == _src_maty.cols)) && \"Both input images should have same size\"","xf_phase.hpp",(unsigned int )182,__PRETTY_FUNCTION__);
  _src_matx . rows == _dst_mat . rows && _src_matx . cols == _dst_mat . cols && ((bool )"Input and output image should be of same size")?((void )0) : __assert_fail("((_src_matx.rows == _dst_mat.rows ) && (_src_matx.cols == _dst_mat.cols)) && \"Input and output image should be of same size\"","xf_phase.hpp",(unsigned int )183,__PRETTY_FUNCTION__);
  (1 == ((int )XF_NPPC1) || 1 == ((int )XF_NPPC8)) && ((bool )"NPC must be XF_NPPC1, XF_NPPC8 ")?((void )0) : __assert_fail("((NPC == XF_NPPC1) || (NPC == XF_NPPC8) ) && \"NPC must be XF_NPPC1, XF_NPPC8 \"","xf_phase.hpp",(unsigned int )184,__PRETTY_FUNCTION__);
  unsigned short imgwidth = (unsigned short )(_src_matx . cols >> 0);
  unsigned short imgheight = (unsigned short )_src_matx . rows;
  p_ZN2xf13xfPhaseKernelILi2ELi2ELi2160ELi3840ELi3ELi3ELi1ELi5ELi5ELi3840EEER3MatILi2ELi2160ELi3840ELi1EER3MatILi2ELi2160ELi3840ELi1EER3MatILi2ELi2160ELi3840ELi1EEiRtRt(_src_matx,_src_maty,_dst_mat,1,imgheight,imgwidth);
}

static void p_ZN2xf11accel_utils13xfMat2hlsStrmILi256ELi2ELi2160ELi3840ELi1ELi8294400EEER3MatILi2ELi2160ELi3840ELi1EER6streamI7ap_uintILi256EEE(struct xf_accel_utils *this_,xf::Mat< 2 , 2160 , 3840 , 1 > &srcMat,hls::stream< ap_uint< 256 >  > &dstStrm)
{
  int rows = srcMat . rows;
  int cols = srcMat . cols;
  int loop_count = rows * cols / 1;
  int bits_to_add = 256;
  const int N_size = 16 * 1;
  class ap_uint< 256 > r;
  DataType< 2,1> ::name in;
  L1:
  for (int i = 0; i < loop_count; i++) 
// Original: #pragma ACCEL PIPELINE AUTO
{
    
#pragma HLS pipeline
    
#pragma HLS LOOP_TRIPCOUNT min=1 max=8294400
    in = srcMat . read(i);
    if (bits_to_add <= 16) {
      r . range((256 - 1),(256 - bits_to_add)) = in . range((bits_to_add - 1),0);
      dstStrm . write(r);
      if (bits_to_add != 16) {
        r . range((16 - bits_to_add - 1),0) = in . range((16 - 1),bits_to_add);
      }
      bits_to_add = 256 - (16 - bits_to_add);
    }
     else {
      r . range((256 - bits_to_add + 16 - 1),(256 - bits_to_add)) = in;
      bits_to_add -= 16;
    }
  }
  if (bits_to_add != 256) {
    dstStrm . write(r);
  }
}

static void p_ZN2xf11accel_utils13hlsStrm2ArrayILi256ELi2160ELi3840ELi1ELi1ELi16ELi518400EEER6streamI7ap_uintILi256EEEP7ap_uintILi256EEii(struct xf_accel_utils *this_,hls::stream< ap_uint< 256 >  > &srcStrm,class ap_uint< 256 > *dstPtr,int rows,int cols)
{
  int pixel_width = 1 * 16;
  int loop_count = (rows * cols * 16 + 256 - 1) / 256;
  for (int i = 0; i < loop_count; i++) 
// Original: #pragma ACCEL PIPELINE AUTO
{
    
#pragma HLS pipeline
    
#pragma HLS LOOP_TRIPCOUNT min=1 max=518400
    dstPtr[i] = srcStrm . read();
  }
}

static void p_ZN2xf11accel_utils11xfMat2ArrayILi256ELi2ELi2160ELi3840ELi1EEER3MatILi2ELi2160ELi3840ELi1EEP7ap_uintILi256EE(struct xf_accel_utils *this_,xf::Mat< 2 , 2160 , 3840 , 1 > &srcMat,class ap_uint< 256 > *dstPtr)
{
  
#pragma HLS DATAFLOW
  256 >= 16 && ((bool )"The ptr_width must be always greater than or equal to the minimum width for the corresponding configuration")?((void )0) : __assert_fail("(ptr_width >= StreamType<DataType<MAT_T,NPC>::wordwidth>::bitdepth) && \"The ptr_width must be always greater than or equal to the minimum width for the corresponding configuration\"","xf_utility.h",(unsigned int )743,__PRETTY_FUNCTION__);
  const int ch_width = 16;
  hls::stream< ap_uint< 256 >  > strm;
  int rows = srcMat . rows;
  int cols = srcMat . cols;
  p_ZN2xf11accel_utils13xfMat2hlsStrmILi256ELi2ELi2160ELi3840ELi1ELi8294400EEER3MatILi2ELi2160ELi3840ELi1EER6streamI7ap_uintILi256EEE(this_,srcMat,strm);
  p_ZN2xf11accel_utils13hlsStrm2ArrayILi256ELi2160ELi3840ELi1ELi1ELi16ELi518400EEER6streamI7ap_uintILi256EEEP7ap_uintILi256EEii(this_,strm,dstPtr,rows,cols);
}

static void p_ZN2xf11xfMat2ArrayILi256ELi2ELi2160ELi3840ELi1EEER3MatILi2ELi2160ELi3840ELi1EEP7ap_uintILi256EE(xf::Mat< 2 , 2160 , 3840 , 1 > &srcMat,class ap_uint< 256 > *dstPtr)
{
  struct xf_accel_utils au;
  p_ZN2xf11accel_utils11xfMat2ArrayILi256ELi2ELi2160ELi3840ELi1EEER3MatILi2ELi2160ELi3840ELi1EEP7ap_uintILi256EE(&au,srcMat,dstPtr);
}
#pragma ACCEL kernel

void phase_accelxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(class ap_uint< 256 > *img_inp1,class ap_uint< 256 > *img_inp2,class ap_uint< 256 > *img_out,int rows,int cols)
{
  
#pragma HLS INTERFACE m_axi port=img_inp1 offset=slave bundle=gmem1
  
#pragma HLS INTERFACE m_axi port=img_inp2 offset=slave bundle=gmem2
  
#pragma HLS INTERFACE m_axi port=img_out offset=slave bundle=gmem3
  
#pragma HLS INTERFACE s_axilite port=img_inp1 bundle=control
  
#pragma HLS INTERFACE s_axilite port=img_inp2 bundle=control
  
#pragma HLS INTERFACE s_axilite port=img_out bundle=control
  
#pragma HLS INTERFACE s_axilite port=rows bundle=control
  
#pragma HLS INTERFACE s_axilite port=cols bundle=control
  
#pragma HLS INTERFACE s_axilite port=return bundle=control
  const int pROWS = 2160;
  const int pCOLS = 3840;
  const int pNPC1 = (int )XF_NPPC1;
  xf::Mat< 2 , 2160 , 3840 , 1 > _src1;
  
#pragma HLS stream variable=_src1.data depth=pCOLS/pNPC1
  _src1 . rows = rows;
  _src1 . cols = cols;
  xf::Mat< 2 , 2160 , 3840 , 1 > _src2;
  
#pragma HLS stream variable=_src2.data depth=pCOLS/pNPC1
  _src2 . rows = rows;
  _src2 . cols = cols;
  xf::Mat< 2 , 2160 , 3840 , 1 > _dst;
  
#pragma HLS stream variable=_dst.data depth=pCOLS/pNPC1
  _dst . rows = rows;
  _dst . cols = cols;
  
#pragma HLS DATAFLOW
  p_ZN2xf11Array2xfMatILi256ELi2ELi2160ELi3840ELi1EEEP7ap_uintILi256EER3MatILi2ELi2160ELi3840ELi1EE(img_inp1,_src1);
  p_ZN2xf11Array2xfMatILi256ELi2ELi2160ELi3840ELi1EEEP7ap_uintILi256EER3MatILi2ELi2160ELi3840ELi1EE(img_inp2,_src2);
  p_ZN2xf5phaseILi1ELi2ELi2ELi2160ELi3840ELi1EEER3MatILi2ELi2160ELi3840ELi1EER3MatILi2ELi2160ELi3840ELi1EER3MatILi2ELi2160ELi3840ELi1EE(_src1,_src2,_dst);
  p_ZN2xf11xfMat2ArrayILi256ELi2ELi2160ELi3840ELi1EEER3MatILi2ELi2160ELi3840ELi1EEP7ap_uintILi256EE(_dst,img_out);
}
