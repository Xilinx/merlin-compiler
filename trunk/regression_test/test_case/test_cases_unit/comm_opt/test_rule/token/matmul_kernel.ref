#include <string.h> 
#define VEC_SIZE 256
#define TILE 64
#define aa(p, n) (a[(p)*VEC_SIZE + (n)])
#define bb(p, n) (b[(p)*VEC_SIZE + (n)])
#define cc(p, n) (c[(p)*VEC_SIZE + (n)])
#pragma ACCEL kernel

void matmul_kernel(float *a,float *b,float *c)
{
  int dummy_token_3;
// Token comes from node 3 and 4 for sync level 0
  int token_3;
  int dummy_token_2;
// Token comes from node 2 and 4 for sync level 0
  int token_2;
  int dummy_token_1;
// Token comes from node 1 and 4 for sync level 0
  int token_1;
  int dummy_token_0;
// Token comes from node 0 and 4 for sync level 0
  int token_0;
  float c_buf_0_rn_rf3[256][4][64];
  float a_buf_0_0_rf2[256][256];
  float b_buf_0_0_rf1[256][4][64];
  float c_buf_0_rf0[256][4][64];
  float c_buf_0_rn[256][4][64];
  int _memcpy_i3_2;
  int _memcpy_i3_1;
  int _memcpy_i3_0;
  int _memcpy_i2_1;
  int _memcpy_i2_0;
  int _memcpy_i1_2;
  int _memcpy_i1_1;
  int _memcpy_i1_0;
  int _memcpy_i0_2;
  int _memcpy_i0_1;
  int _memcpy_i0_0;
  float c_buf_0[256][4][64];
  float b_buf_0_0[256][4][64];
  float a_buf_0_0[256][256];
  int i_0;
  int j_0;
  int k_0;
  int j0_0;
  int jj_0;
// for(int i=0; i<1; i++) {
  for (_memcpy_i0_2 = 0; _memcpy_i0_2 < 256; ++_memcpy_i0_2) {
    for (_memcpy_i0_1 = 0; _memcpy_i0_1 < 4; ++_memcpy_i0_1) {
      for (_memcpy_i0_0 = 0; _memcpy_i0_0 < 64; ++_memcpy_i0_0) {
        c_buf_0[_memcpy_i0_2][_memcpy_i0_1][_memcpy_i0_0] = c[0 + (((0 * 256 + _memcpy_i0_2) * 4 + _memcpy_i0_1) * 64 + _memcpy_i0_0)];
// Token gen: node 0 and 4 for sync level 0(forward)
        if (_memcpy_i0_0 == 63 && _memcpy_i0_1 == 3 && _memcpy_i0_2 == 255) {
          
#pragma ACCEL mem_fence
          token_0 = 1;
        }
      }
    }
  }
  for (_memcpy_i1_2 = 0; _memcpy_i1_2 < 256; ++_memcpy_i1_2) {
    for (_memcpy_i1_1 = 0; _memcpy_i1_1 < 4; ++_memcpy_i1_1) {
      for (_memcpy_i1_0 = 0; _memcpy_i1_0 < 64; ++_memcpy_i1_0) {
        b_buf_0_0[_memcpy_i1_2][_memcpy_i1_1][_memcpy_i1_0] = b[0 + (((0 * 256 + _memcpy_i1_2) * 4 + _memcpy_i1_1) * 64 + _memcpy_i1_0)];
// Token gen: node 1 and 4 for sync level 0(forward)
        if (_memcpy_i1_0 == 63 && _memcpy_i1_1 == 3 && _memcpy_i1_2 == 255) {
          
#pragma ACCEL mem_fence
          token_1 = 1;
        }
      }
    }
  }
  for (_memcpy_i2_1 = 0; _memcpy_i2_1 < 256; ++_memcpy_i2_1) {
    for (_memcpy_i2_0 = 0; _memcpy_i2_0 < 256; ++_memcpy_i2_0) {
      a_buf_0_0[_memcpy_i2_1][_memcpy_i2_0] = a[0 + ((0 * 256 + _memcpy_i2_1) * 256 + _memcpy_i2_0)];
// Token gen: node 2 and 4 for sync level 0(forward)
      if (_memcpy_i2_0 == 255 && _memcpy_i2_1 == 255) {
        
#pragma ACCEL mem_fence
        token_2 = 1;
      }
    }
  }
  for (k_0 = 0; k_0 < 256; k_0++) {
    for (i_0 = 0; i_0 < 256; i_0++) {
      for (j0_0 = 0; j0_0 < 256 / 64; j0_0++) {
        for (jj_0 = 0; jj_0 < 64; ++jj_0) {
          if (k_0 == 0) {
            c_buf_0_rf0[i_0][j0_0][jj_0] = c_buf_0[i_0][j0_0][jj_0];
          }
          if (i_0 == 0) {
            b_buf_0_0_rf1[k_0][j0_0][jj_0] = b_buf_0_0[k_0][j0_0][jj_0];
          }
          if (j0_0 == 0 && jj_0 == 0) {
            a_buf_0_0_rf2[k_0][i_0] = a_buf_0_0[k_0][i_0];
          }
          j_0 = j0_0 * 64 + jj_0;
          c_buf_0_rf0[i_0][j0_0][jj_0] += a_buf_0_0_rf2[k_0][i_0] * b_buf_0_0_rf1[k_0][j0_0][jj_0];
          c_buf_0_rn_rf3[i_0][j0_0][jj_0] = c_buf_0_rf0[i_0][j0_0][jj_0];
          if (k_0 == 255) {
            c_buf_0_rn[i_0][j0_0][jj_0] = c_buf_0_rn_rf3[i_0][j0_0][jj_0];
          }
// Token gen: node 3 and 4 for sync level 0(forward)
          if (jj_0 == 63 && j0_0 == 3 && i_0 == 255 && k_0 == 255) {
            
#pragma ACCEL mem_fence
            token_3 = 1;
          }
        }
      }
    }
  }
  for (_memcpy_i3_2 = 0; _memcpy_i3_2 < 256; ++_memcpy_i3_2) {
    for (_memcpy_i3_1 = 0; _memcpy_i3_1 < 4; ++_memcpy_i3_1) {
      for (_memcpy_i3_0 = 0; _memcpy_i3_0 < 64; ++_memcpy_i3_0) {
// Token gen: node 0 and 4 for sync level 0(forward)
        if (_memcpy_i3_0 == 0 && _memcpy_i3_1 == 0 && _memcpy_i3_2 == 0) {
          dummy_token_0 = token_0;
          
#pragma ACCEL mem_fence
        }
// Token gen: node 1 and 4 for sync level 0(forward)
        if (_memcpy_i3_0 == 0 && _memcpy_i3_1 == 0 && _memcpy_i3_2 == 0) {
          dummy_token_1 = token_1;
          
#pragma ACCEL mem_fence
        }
// Token gen: node 2 and 4 for sync level 0(forward)
        if (_memcpy_i3_0 == 0 && _memcpy_i3_1 == 0 && _memcpy_i3_2 == 0) {
          dummy_token_2 = token_2;
          
#pragma ACCEL mem_fence
        }
// Token gen: node 3 and 4 for sync level 0(forward)
        if (_memcpy_i3_0 == 0 && _memcpy_i3_1 == 0 && _memcpy_i3_2 == 0) {
          dummy_token_3 = token_3;
          
#pragma ACCEL mem_fence
        }
        c[0 + (((0 * 256 + _memcpy_i3_2) * 4 + _memcpy_i3_1) * 64 + _memcpy_i3_0)] = c_buf_0_rn[_memcpy_i3_2][_memcpy_i3_1][_memcpy_i3_0];
      }
    }
  }
// }
}
