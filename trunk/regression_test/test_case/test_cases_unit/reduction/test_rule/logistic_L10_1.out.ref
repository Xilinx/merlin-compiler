#include <stdio.h>
#include <string.h>
#include <math.h>
#include <assert.h>
#define CHUNK_SIZE 16
#define L 10 //label_size;
#define D 1024 //feature_size;
#define weight_size (L-1)*D
typedef double BUS_TYPE;
// to divide feature_size (D)
#define F_UR 4
#pragma ACCEL kernel

void gradient(int n_samples,int label_size,int feature_size,double *weights,BUS_TYPE *data,double *output)
//double   global_weights[9*784], 
//BUS_TYPE global_data[32*785], 
//double   global_output[9*784+1])
{
//FIXME:
//  const int L = 10; //label_size;
//  const int D = 784; //feature_size;
//  const int weight_size = (L-1)*D;
  int num_samples = n_samples;
// ZP: 2015-11-15
//memset(output, 0, sizeof(double)*(weight_size+1));
//double* margins = new double[L-1];
  double margins[16][9];
  double label_buf[16];
  double feature_buf[16][1024];
  double marginY_buf[16];
//-std::numeric_limits<double>::infinity();
  double maxMargin_buf[16];
  int maxMarginIndex_buf[16];
  int upper_bound = (n_samples + 16 - 1) / 16;
//for(int k = 0; k < num_samples; k++ ) {
  n_samples % 16 == 0?((void )0) : __assert_fail("(n_samples % 16) == 0","gradient.cpp",48,__PRETTY_FUNCTION__);
  double output_loss_buffer = output[(10 - 1) * 1024];
  for (int k0 = 0; k0 < upper_bound; k0++) {
    
#pragma HLS loop_tripcount max=1872
    
#pragma ACCEL pipeline
    double sum_buf[16];
    memset(sum_buf,0,sizeof(double ) * 16);
    double margin_buf[16][10];
    memset(margin_buf[0],0,sizeof(double ) * 160);
//FIXME:Workaround
    double multiplier_buf[16][10];
    memset(multiplier_buf[0],0,sizeof(double ) * 160);
/*INIT: */
    for (int kk = 0; kk < 16; kk++) {
      
#pragma ACCEL pipeline
      int k = k0 * 16 + kk;
      if (k >= num_samples) 
        break; 
      marginY_buf[kk] = 0.0;
//-std::numeric_limits<double>::infinity();
      maxMargin_buf[kk] = (-__builtin_inff());
      maxMarginIndex_buf[kk] = 0;
      label_buf[kk] = data[k * (1024 + 1)];
      for (int j = 0; j < 1024; j += 1) {
//#pragma ACCEL parallel complete
        
#pragma ACCEL pipeline
        feature_buf[kk][j] = data[k * (1024 + 1) + 1 + j];
      }
    }
/*STAGE_1:*/
    double _margin_buf_rdc[16][4][9];
    for (int kk = 0; kk < 16; kk++) {
      
#pragma ACCEL pipeline
      for (int jj = 0; jj < 4; jj += 1) {
        
#pragma ACCEL parallel complete
        for (int i = 0; i < 10 - 1; i++) {
          
#pragma ACCEL parallel complete
          _margin_buf_rdc[kk][jj][i] = 0;
        }
      }
    }
    for (int j0 = 0; j0 < 1024; j0 += 4) {
      for (int kk = 0; kk < 16; kk++) {
        
#pragma ACCEL pipeline
        for (int jj = 0; jj < 4; jj += 1) {
          
#pragma ACCEL parallel complete
          for (int i = 0; i < 10 - 1; i++) {
            
#pragma HLS dependence variable=_margin_buf_rdc array inter false
            
#pragma ACCEL parallel complete
            int j = j0 + jj;
            _margin_buf_rdc[kk][jj][i] += weights[i * 1024 + j] * feature_buf[kk][j];
          }
        }
      }
    }
    for (int kk = 0; kk < 16; kk++) {
      
#pragma ACCEL PIPELINE
      for (int jj = 0; jj < 4; jj += 1) {
        
#pragma ACCEL PARALLEL COMPLETE
        for (int i = 0; i < 10 - 1; i++) {
          
#pragma ACCEL PARALLEL COMPLETE
{
            margin_buf[kk][i] += _margin_buf_rdc[kk][jj][i];
          }
        }
      }
    }
    for (int kk = 0; kk < 16; kk++) {
      
#pragma ACCEL pipeline
      double label = label_buf[kk];
      marginY_buf[kk] = margin_buf[kk][((int )label) - 1];
    }
    for (int i = 0; i < 10 - 1; i++) {
      for (int kk = 0; kk < 16; kk++) {
        
#pragma ACCEL pipeline
        if (margin_buf[kk][i] > maxMargin_buf[kk]) {
          maxMargin_buf[kk] = margin_buf[kk][i];
          maxMarginIndex_buf[kk] = i;
        }
        margins[kk][i] = margin_buf[kk][i];
      }
    }
/*STAGE_2: */
    for (int kk = 0; kk < 16; kk++) {
//double sum = 0.0;
      for (int i = 0; i < 10 - 1; i++) {
        
#pragma ACCEL pipeline
        if (maxMargin_buf[kk] > 0) {
          margins[kk][i] -= maxMargin_buf[kk];
          if (i == maxMarginIndex_buf[kk]) {
            sum_buf[kk] += exp(-maxMargin_buf[kk]);
          }
           else {
            sum_buf[kk] += exp(margins[kk][i]);
          }
        }
         else {
          sum_buf[kk] += exp(margins[kk][i]);
        }
      }
    }
    for (int kk = 0; kk < 16; kk++) {
      double label = label_buf[kk];
// update gradient
      
#pragma ACCEL pipeline flatten
      for (int i = 0; i < 10 - 1; i++) {
        
#pragma ACCEL parallel copmlete
//FIXME:  
/*exp*/
        multiplier_buf[kk][i] = margins[kk][i] / (sum_buf[kk] + 1.0);
        if (label != 0.0 && label == (i + 1)) {
          multiplier_buf[kk][i] -= 1.0;
        }
      }
    }
//STAGE_3: 
    for (int kk = 0; kk < 16; kk++) {
      for (int j0 = 0; j0 < 1024; j0 += 4) {
        
#pragma ACCEL pipeline flatten
        for (int jj = 0; jj < 4; jj++) {
          
#pragma ACCEL parallel copmlete
          for (int i = 0; i < 10 - 1; i++) {
            
#pragma ACCEL parallel copmlete
            int j = j0 + jj;
            output[i * 1024 + j] += multiplier_buf[kk][i] * feature_buf[kk][j];
          }
        }
      }
    }
//STAGE_4: 
    for (int kk = 0; kk < 16; kk++) {
      
#pragma ACCEL pipeline
      double label = label_buf[kk];
// compute loss
// FIXME:
/*log*/
// math.logip(sum)
      double loss = sum_buf[kk] + 1;
      if (label > 0.0) {
        loss -= marginY_buf[kk];
      }
      if (maxMargin_buf[kk] > 0) {
        loss += maxMargin_buf[kk];
      }
//output[weight_size] += loss;
      output_loss_buffer += loss;
    }
  }
  output[(10 - 1) * 1024] = output_loss_buffer;
}
