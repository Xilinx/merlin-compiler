#include "merlin_stream.h" 
#include "merlin_stream.h" 
extern int __merlin_include__GB_merlin_stream_h_0;
static void __merlin_dummy_extern_int_merlin_include_G_();
#pragma ACCEL STREAM_CHANNEL CHANNEL_DEPTH=32 NODE=vec_add PORT=msm_port_c_vec_add_0
::merlin_stream ch_c_2;
#pragma ACCEL STREAM_CHANNEL CHANNEL_DEPTH=32 NODE=vec_add PORT=msm_port_b_vec_add_0
::merlin_stream ch_b_1;
#pragma ACCEL STREAM_CHANNEL CHANNEL_DEPTH=32 NODE=vec_add PORT=msm_port_a_vec_add_0
::merlin_stream ch_a_0;
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_kernel_pragma();
// Original: #pragma ACCEL kernel

void msm_port_a_vec_add_0(int a[10000])
{
  for (int __i0_l1_l1 = 0; __i0_l1_l1 < 10; ++__i0_l1_l1) {
    for (int __i1_l2_l2 = 0; __i1_l2_l2 < 10; ++__i1_l2_l2) 
// Original: #pragma ACCEL parallel
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma ACCEL PARALLEL COMPLETE
      for (int __i2_l3_l3 = 0; __i2_l3_l3 < 100; ++__i2_l3_l3) {
        int a_sp_tmp_0;
        a_sp_tmp_0 = a[__i0_l1_l1 * 1000 + __i1_l2_l2 * 100 + __i2_l3_l3];
        merlin_stream_write(&ch_a_0,(&a_sp_tmp_0));
      }
    }
  }
}

void msm_port_b_vec_add_0(int b[10000])
{
  for (int __i0_l1_l4 = 0; __i0_l1_l4 < 10; ++__i0_l1_l4) {
    for (int __i1_l2_l5 = 0; __i1_l2_l5 < 10; ++__i1_l2_l5) 
// Original: #pragma ACCEL parallel
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma ACCEL PARALLEL COMPLETE
      for (int __i2_l3_l6 = 0; __i2_l3_l6 < 100; ++__i2_l3_l6) {
        int b_sp_tmp_0;
        b_sp_tmp_0 = b[__i0_l1_l4 * 1000 + __i1_l2_l5 * 100 + __i2_l3_l6];
        merlin_stream_write(&ch_b_1,(&b_sp_tmp_0));
      }
    }
  }
}

void msm_port_c_vec_add_0(int c[10000])
{
  for (int __i0_l1_l7 = 0; __i0_l1_l7 < 10; ++__i0_l1_l7) {
    for (int __i1_l2_l8 = 0; __i1_l2_l8 < 10; ++__i1_l2_l8) 
// Original: #pragma ACCEL parallel
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma ACCEL PARALLEL COMPLETE
      for (int __i2_l3_l9 = 0; __i2_l3_l9 < 100; ++__i2_l3_l9) {
        int c_sp_tmp_0;
        merlin_stream_read(&ch_c_2,(&c_sp_tmp_0));
        c[__i0_l1_l7 * 1000 + __i1_l2_l8 * 100 + __i2_l3_l9] = c_sp_tmp_0;
      }
    }
  }
}

void msm_node_0()
// Original: #pragma ACCEL parallel
// Original: #pragma ACCEL PARALLEL COMPLETE
{
  for (int __i2_l3_l12 = 0; __i2_l3_l12 < 100; ++__i2_l3_l12) {
    int c_sn_tmp_0;
    int b_sn_tmp_0;
    int a_sn_tmp_0;
    merlin_stream_read(&ch_a_0,(void *)(&a_sn_tmp_0));
    merlin_stream_read(&ch_b_1,(void *)(&b_sn_tmp_0));
    c_sn_tmp_0 = a_sn_tmp_0 + b_sn_tmp_0;
    merlin_stream_write(&ch_c_2,(void *)(&c_sn_tmp_0));
  }
}
#pragma ACCEL kernel

void vec_add(int a[10000],int b[10000],int c[10000])
{
  merlin_stream_init(&ch_c_2,10000,4);
  merlin_stream_init(&ch_b_1,10000,4);
  
#pragma ACCEL STREAM_PORT ACCESS_TYPE=read DIM_NUM=1 NODE=vec_add VARIABLE=b
  msm_port_b_vec_add_0(b);
  merlin_stream_init(&ch_a_0,10000,4);
  
#pragma ACCEL STREAM_PORT ACCESS_TYPE=read DIM_NUM=1 NODE=vec_add VARIABLE=a
  msm_port_a_vec_add_0(a);
  
#pragma ACCEL interface variable=c max_depth=10000 depth=10000 memory_burst=off
  
#pragma ACCEL interface variable=b max_depth=10000 depth=10000 memory_burst=off
  
#pragma ACCEL interface variable=a max_depth=10000 depth=10000 memory_burst=off
  for (int __i0_l1_l10 = 0; __i0_l1_l10 < 10; ++__i0_l1_l10) {
    for (int __i1_l2_l11 = 0; __i1_l2_l11 < 10; ++__i1_l2_l11) {
      
#pragma ACCEL PARALLEL COMPLETE
// Original: #pragma ACCEL parallel
// Original: #pragma ACCEL PARALLEL COMPLETE
// Original pragma: ACCEL STREAM_NODE 
      
#pragma ACCEL STREAM_NODE PARALLEL_FACTOR=10 
      msm_node_0();
    }
  }
  merlin_stream_reset(&ch_a_0);
  merlin_stream_reset(&ch_b_1);
  
#pragma ACCEL STREAM_PORT ACCESS_TYPE=write DIM_NUM=1 NODE=vec_add VARIABLE=c
  msm_port_c_vec_add_0(c);
  merlin_stream_reset(&ch_c_2);
}
