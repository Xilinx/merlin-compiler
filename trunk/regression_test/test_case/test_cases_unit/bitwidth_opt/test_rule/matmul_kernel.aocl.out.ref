#include<string.h>
#define VEC_SIZE 512 
#define aa(p, n) (a[(p)*VEC_SIZE + (n)])
#define bb(p, n) (b[(p)*VEC_SIZE + (n)])
#define cc(p, n) (c[(p)*VEC_SIZE + (n)])
#pragma ACCEL kernel

void matmul_kernel(float *a,float *b,float *c)
{
  float c_2_0_buf[262144];
  float b_2_0_buf[512];
  float a_2_0_buf[512];
  int i;
  int j;
  int k;
  long _memcpy_i_2;
  for (_memcpy_i_2 = 0; _memcpy_i_2 < sizeof(float ) * ((unsigned long )262144) / 4; ++_memcpy_i_2) {
    
#pragma ACCEL PARALLEL SKIP FACTOR=16
    long total_offset1 = 0 * 262144 + 0;
    long total_offset2 = 0 * 0 + 0;
    c_2_0_buf[total_offset1 + _memcpy_i_2] = c[total_offset2 + _memcpy_i_2];
  }
  for (k = 0; k < 512; k++) {
    
#pragma ACCEL pipeline
    long _memcpy_i_0;
    for (_memcpy_i_0 = 0; _memcpy_i_0 < sizeof(float ) * ((unsigned long )512) / 4; ++_memcpy_i_0) {
      
#pragma ACCEL PARALLEL SKIP FACTOR=16
      long total_offset1 = 0 * 512 + 0;
      long total_offset2 = 0 * 0 + 512 * k;
      a_2_0_buf[total_offset1 + _memcpy_i_0] = a[total_offset2 + _memcpy_i_0];
    }
    long _memcpy_i_1;
    for (_memcpy_i_1 = 0; _memcpy_i_1 < sizeof(float ) * ((unsigned long )512) / 4; ++_memcpy_i_1) {
      
#pragma ACCEL PARALLEL SKIP FACTOR=16
      long total_offset1 = 0 * 512 + 0;
      long total_offset2 = 0 * 0 + 512 * k;
      b_2_0_buf[total_offset1 + _memcpy_i_1] = b[total_offset2 + _memcpy_i_1];
    }
    for (i = 0; i < 512; i++) {
      
#pragma ACCEL pipeline
      for (j = 0; j < 512; j++) {
        
#pragma ACCEL parallel complete
        c_2_0_buf[512 * i + j] += a_2_0_buf[i] * b_2_0_buf[j];
      }
    }
  }
  long _memcpy_i_3;
  for (_memcpy_i_3 = 0; _memcpy_i_3 < sizeof(float ) * ((unsigned long )262144) / 4; ++_memcpy_i_3) {
    
#pragma ACCEL PARALLEL SKIP FACTOR=16
    long total_offset1 = 0 * 0 + 0;
    long total_offset2 = 0 * 262144 + 0;
    c[total_offset1 + _memcpy_i_3] = c_2_0_buf[total_offset2 + _memcpy_i_3];
  }
}
