#include "memcpy_128_1d.h"
#include "memcpy_256_1d.h"
#include "memcpy_512_1d.h"
#define SIZE_1 6400
#include "memcpy_512_2d.h"
#undef SIZE_1
#define SIZE_1 640
#include "memcpy_512_2d.h"
#undef SIZE_1
#define SIZE_1 20
#define SIZE_2 40
#include "memcpy_256_3d.h"
#undef SIZE_1
#undef SIZE_2
#define SIZE_1 4
#define SIZE_2 20
#define SIZE_3 20
#include "memcpy_128_4d.h"
#undef SIZE_1
#undef SIZE_2
#undef SIZE_3
#define SIZE_1 20
#define SIZE_2 20
#define SIZE_3 2
#include "memcpy_128_4d.h"
#undef SIZE_1
#undef SIZE_2
#undef SIZE_3
#include "memcpy_128.h"
#include "memcpy_256.h"
#include "memcpy_512.h"
#include<string.h>
#include<assert.h>
//1d dimension
extern int __merlin_include__GB_memcpy_512_h_10;
extern int __merlin_include__GB_memcpy_256_h_9;
extern int __merlin_include__GB_memcpy_128_h_8;
extern int __merlin_include__GB_memcpy_128_4d_h_7;
extern int __merlin_include__GB_memcpy_128_4d_h_6;
extern int __merlin_include__GB_memcpy_256_3d_h_5;
extern int __merlin_include__GB_memcpy_512_2d_h_4;
extern int __merlin_include__GB_memcpy_512_2d_h_3;
extern int __merlin_include__GB_memcpy_512_1d_h_2;
extern int __merlin_include__GB_memcpy_256_1d_h_1;
extern int __merlin_include__GB_memcpy_128_1d_h_0;
#pragma ACCEL kernel

void top(ap_uint<512> *a,ap_uint<512> *b,ap_uint<256> *c,ap_uint<128> *d,size_t n,size_t m,size_t l,size_t k,size_t g,size_t h)
{
  
#pragma HLS DATA_PACK VARIABLE=d
  
#pragma HLS DATA_PACK VARIABLE=c
  
#pragma HLS DATA_PACK VARIABLE=b
  
#pragma HLS DATA_PACK VARIABLE=a
  int a_buf[1000];
  n < 1000?(static_cast < void  >  (0)) : __assert_fail("n < 1000","test_assert.cpp",8,__PRETTY_FUNCTION__);
  
#pragma  HLS array_partition  variable=a_buf cyclic factor = 16 dim=1
  memcpy_wide_bus_read_int_512(&a_buf[100],(ap_uint<512> *)a,0 * 4,sizeof(int ) * n,999L);
  char b_buf[100][6400];
  m < 6400?(static_cast < void  >  (0)) : __assert_fail("m < 6400","test_assert.cpp",12,__PRETTY_FUNCTION__);
  
#pragma  HLS array_partition  variable=b_buf cyclic factor = 64 dim=2
  memcpy_wide_bus_read_char_2d_6400_512(b_buf,0,64,(ap_uint<512> *)b,0 * 1,sizeof(char ) * m,6399L);
  unsigned int c_buf[2][20][40];
  l < 800?(static_cast < void  >  (0)) : __assert_fail("l < 800","test_assert.cpp",16,__PRETTY_FUNCTION__);
  
#pragma  HLS array_partition  variable=c_buf cyclic factor = 8 dim=3
  memcpy_wide_bus_read_int_3d_20_40_256((int (*)[20][40])c_buf,0,2,4,(ap_uint<256> *)c,0 * 4,sizeof(unsigned int ) * l,799L);
  float d_buf[100][4][20][20];
  k < 500?(static_cast < void  >  (0)) : __assert_fail("k < 500","test_assert.cpp",20,__PRETTY_FUNCTION__);
  
#pragma  HLS array_partition  variable=d_buf cyclic factor = 4 dim=4
  memcpy_wide_bus_read_float_4d_4_20_20_128(d_buf,0,2,10,10,(ap_uint<128> *)d,0 * 4,sizeof(float ) * k,499L);
  char b_buf_1[9][640];
  g < 640?(static_cast < void  >  (0)) : __assert_fail("g < 640","test_assert.cpp",24,__PRETTY_FUNCTION__);
  
#pragma  HLS array_partition  variable=b_buf_1 cyclic factor = 64 dim=2
  memcpy_wide_bus_write_char_2d_640_512((ap_uint<512> *)b,b_buf_1,1,64,1 * 0,sizeof(char ) * g,639L);
  float d_buf_1[32][20][20][2];
  h < 800?(static_cast < void  >  (0)) : __assert_fail("h < 800","test_assert.cpp",29,__PRETTY_FUNCTION__);
  
#pragma  HLS array_partition  variable=d_buf_1 complete  dim=4
  
#pragma  HLS array_partition  variable=d_buf_1 cyclic factor = 2 dim=3
  memcpy_wide_bus_write_float_4d_20_20_2_128((ap_uint<128> *)d,d_buf_1,0,2,2,0,4 * 8,sizeof(float ) * h,799L);
}

int main()
{
  int *a;
  char *b;
  unsigned int *c;
  float *d;
  int n;
  int m;
  int l;
  int k;
  int g;
  int h;
  top((ap_uint<512> *)a,(ap_uint<512> *)b,(ap_uint<256> *)c,(ap_uint<128> *)d,n,m,l,k,g,h);
  return 0;
}
