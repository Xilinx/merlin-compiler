#include "cmost.h"
#include <math.h>
#include "merlin_type_define.h"
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_kernel_pragma();
// Original: #pragma ACCEL kernel

void sub(int *c,int cond,int val)
{
  if (cond > 0) {
     *c = val;
  }
}

void vec_add(int s,int a[1024],int b[1024],int c[1024])
{
  int i_sub;
  __merlin_access_range(c,0,1023UL);
  __merlin_access_range(b,0,1023UL);
  __merlin_access_range(a,0,1023UL);
  
#pragma ACCEL interface variable=a stream_prefetch=off max_depth=1024 depth=1024
  
#pragma ACCEL interface variable=b stream_prefetch=on max_depth=1024 depth=1024
  
#pragma ACCEL interface variable=c stream_prefetch=on max_depth=1024 depth=1024
// Original pramga:  ACCEL PARALLEL FACTOR=4 
  for (int _i_l1 = 0; _i_l1 < 256; _i_l1++) 
// Original: #pragma ACCEL parallel factor=4
// Original: #pragma ACCEL PARALLEL FACTOR=4
{
    
#pragma ACCEL PARALLEL FACTOR=1
    for (i_sub = 0; i_sub < 4; ++i_sub) 
// Original: #pragma ACCEL parallel factor=4
// Original: #pragma ACCEL PARALLEL FACTOR=4
{
      
#pragma ACCEL PARALLEL
      int a0 = a[_i_l1 * 4 + i_sub];
      int b0 = b[_i_l1 * 4 + i_sub + s];
      int c0 = 0;
      for (int _j_l2 = 0; _j_l2 < 1024 * 10; _j_l2++) {
        c0 += ((int )(pow((double )(a0 * b0 + _j_l2),1.5))) % 7 + s;
      }
      sub(&c[_i_l1 * 4 + i_sub],a[8],c0);
    }
  }
}
