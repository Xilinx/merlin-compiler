#include <string.h> 
#include <stdio.h> 
#include <stdlib.h> 
#include <math.h>
#include "merlin_type_define.h"
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_extern_int_merlin_include_G_();
static void __merlin_dummy_889();
void vec_add(int s,int a[1024],int b[1024],int c[1024]);
static void __merlin_dummy_extern_int_merlin_include_L_();
#include "__merlinhead_kernel_top.h"
static void __merlin_dummy_extern_int_merlin_include_L_();
void msm_port_a_vec_add_0(int a[1024]);
void msm_port_c_vec_add_0(int c[1024]);

void __merlinwrapper_vec_add(int s,int a[1024],int b[1024],int c[1024])
{
  __CMOST_COMMENT__ commands;
{
    
#pragma ACCEL wrapper variable=s port=s data_type=int io=RO copy=true
    
#pragma ACCEL wrapper variable=a port=a depth=1024 max_depth=1024 data_type=int io=RO copy=false
    
#pragma ACCEL wrapper variable=b port=b depth=1024 max_depth=1024 data_type=int io=RO copy=false
    
#pragma ACCEL wrapper variable=c port=c depth=1024 max_depth=1024 data_type=int io=WO copy=false
  }
  static __CMOST_COMMENT__ __m_a;
  static __CMOST_COMMENT__ __m_b;
  static __CMOST_COMMENT__ __m_c;
{
/*
    static int __m_a[1024];
    static int __m_b[1024];
    static int __m_c[1024];
*/
{
      
#pragma ACCEL debug printf("[Merlin Info] Start %s data for %s, data size = %s...\n", "copy in", "a", "1024 * sizeof(int )");
      
#pragma ACCEL debug fflush(stdout);
      if (a != 0) {
        __CMOST_COMMENT__ __vec_add__a_buffer;
        opencl_write_buffer(__vec_add__a_buffer,commands[0],0 * sizeof(int ),(int *)a,((unsigned long )1024) * sizeof(int ));
      }
       else {
        printf("Error! The external memory pointed by 'a' is invalid.\n");
        exit(1);
      }
      
#pragma ACCEL debug printf("[Merlin Info] Finish %s data for %s.\n", "copy in", "a");
      
#pragma ACCEL debug fflush(stdout);
    }
{
      
#pragma ACCEL debug printf("[Merlin Info] Start %s data for %s, data size = %s...\n", "copy in", "b", "1024 * sizeof(int )");
      
#pragma ACCEL debug fflush(stdout);
      if (b != 0) {
        __CMOST_COMMENT__ __vec_add__b_buffer;
        opencl_write_buffer(__vec_add__b_buffer,commands[0],0 * sizeof(int ),(int *)b,((unsigned long )1024) * sizeof(int ));
      }
       else {
        printf("Error! The external memory pointed by 'b' is invalid.\n");
        exit(1);
      }
      
#pragma ACCEL debug printf("[Merlin Info] Finish %s data for %s.\n", "copy in", "b");
      
#pragma ACCEL debug fflush(stdout);
    }
  }
  
#pragma ACCEL sub_kernel parent=vec_add
{
	#pragma ACCEL debug printf("[Merlin Info] Start set kernel %s argument....\n", "vec_add");
	#pragma ACCEL debug fflush(stdout);
	opencl_set_kernel_arg(__vec_add_kernel, 0, sizeof(int), &s);
	opencl_set_kernel_arg(__vec_add_kernel, 1, sizeof(opencl_mem), &__vec_add__a_buffer);
	opencl_set_kernel_arg(__vec_add_kernel, 2, sizeof(opencl_mem), &__vec_add__b_buffer);
	opencl_set_kernel_arg(__vec_add_kernel, 3, sizeof(opencl_mem), &__vec_add__c_buffer);
	#pragma ACCEL debug printf("[Merlin Info] Finish set kernel %s argument....\n", "vec_add");
	#pragma ACCEL debug fflush(stdout);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start set kernel %s argument....\n", "msm_port_a_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
	opencl_set_kernel_arg(__msm_port_a_vec_add_0_kernel, 0, sizeof(opencl_mem), &__vec_add__a_buffer);
	#pragma ACCEL debug printf("[Merlin Info] Finish set kernel %s argument....\n", "msm_port_a_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start set kernel %s argument....\n", "msm_port_c_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
	opencl_set_kernel_arg(__msm_port_c_vec_add_0_kernel, 0, sizeof(opencl_mem), &__vec_add__c_buffer);
	#pragma ACCEL debug printf("[Merlin Info] Finish set kernel %s argument....\n", "msm_port_c_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start execute kernel %s....\n", "vec_add");
	#pragma ACCEL debug fflush(stdout);
	size_t __gid[1];
	__gid[0] = 1;
	opencl_enqueue_kernel(__vec_add_kernel, commands[0], 1, __gid, &__event_vec_add);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start execute kernel %s....\n", "msm_port_a_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
	size_t __gid[1];
	__gid[0] = 1;
	opencl_enqueue_kernel(__msm_port_a_vec_add_0_kernel, commands[1], 1, __gid, &__event_msm_port_a_vec_add_0);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start execute kernel %s....\n", "msm_port_c_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
	size_t __gid[1];
	__gid[0] = 1;
	opencl_enqueue_kernel(__msm_port_c_vec_add_0_kernel, commands[2], 1, __gid, &__event_msm_port_c_vec_add_0);
}
{
	clWaitForEvents(1, &__event_vec_add);
	if(__event_vec_add) {
		opencl_release_event(__event_vec_add);
	}
	#pragma ACCEL debug printf("[Merlin Info] Finish execute kernel %s....\n", "vec_add");
	#pragma ACCEL debug fflush(stdout);
}
{
	clWaitForEvents(1, &__event_msm_port_a_vec_add_0);
	if(__event_msm_port_a_vec_add_0) {
		opencl_release_event(__event_msm_port_a_vec_add_0);
	}
	#pragma ACCEL debug printf("[Merlin Info] Finish execute kernel %s....\n", "msm_port_a_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
}
{
	clWaitForEvents(1, &__event_msm_port_c_vec_add_0);
	if(__event_msm_port_c_vec_add_0) {
		opencl_release_event(__event_msm_port_c_vec_add_0);
	}
	#pragma ACCEL debug printf("[Merlin Info] Finish execute kernel %s....\n", "msm_port_c_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
}
  
#pragma ACCEL sub_kernel parent=vec_add
{
    
#pragma ACCEL debug printf("[Merlin Info] Start %s data for %s, data size = %s...\n", "copy out", "c", "1024 * sizeof(int )");
    
#pragma ACCEL debug fflush(stdout);
    if (c != 0) {
      __CMOST_COMMENT__ __vec_add__c_buffer;
      opencl_read_buffer(__vec_add__c_buffer,commands[0],0 * sizeof(int ),(int *)c,((unsigned long )1024) * sizeof(int ));
    }
     else {
      printf("Error! The external memory pointed by 'c' is invalid.\n");
      exit(1);
    }
    
#pragma ACCEL debug printf("[Merlin Info] Finish %s data for %s.\n", "copy out", "c");
    
#pragma ACCEL debug fflush(stdout);
  }
}

void __merlin_vec_add(int s,int a[1024],int b[1024],int c[1024])
{
  
#pragma ACCEL string __merlin_check_opencl();
  
#pragma ACCEL string __merlin_init_vec_add();
  __merlinwrapper_vec_add(s,a,b,c);
  
#pragma ACCEL string __merlin_release_vec_add();
}

void __merlin_write_buffer_vec_add(int s,int a[1024],int b[1024],int c[1024])
{
  static int __m_a[1024];
  static int __m_b[1024];
  static int __m_c[1024];
{
    
#pragma ACCEL debug printf("[Merlin Info] Start %s data for %s, data size = %s...\n", "copy in", "a", "1024 * sizeof(int )");
    
#pragma ACCEL debug fflush(stdout);
    if (a != 0) {
      __CMOST_COMMENT__ __vec_add__a_buffer;
      __CMOST_COMMENT__ __event___vec_add__a_buffer;
// __MERLIN_EVENT_WRITE__ __event___vec_add__a_buffer
      int __MERLIN_EVENT_WRITE____event___vec_add__a_buffer;
      opencl_write_buffer_nb(__vec_add__a_buffer,commands[0],0 * sizeof(int ),(int *)a,((unsigned long )1024) * sizeof(int ),&__event___vec_add__a_buffer);
    }
     else {
      printf("Error! The external memory pointed by 'a' is invalid.\n");
      exit(1);
    }
    
#pragma ACCEL debug printf("[Merlin Info] Finish %s data for %s.\n", "copy in", "a");
    
#pragma ACCEL debug fflush(stdout);
  }
{
    
#pragma ACCEL debug printf("[Merlin Info] Start %s data for %s, data size = %s...\n", "copy in", "b", "1024 * sizeof(int )");
    
#pragma ACCEL debug fflush(stdout);
    if (b != 0) {
      __CMOST_COMMENT__ __vec_add__b_buffer;
      __CMOST_COMMENT__ __event___vec_add__b_buffer;
// __MERLIN_EVENT_WRITE__ __event___vec_add__b_buffer
      int __MERLIN_EVENT_WRITE____event___vec_add__b_buffer;
      opencl_write_buffer_nb(__vec_add__b_buffer,commands[0],0 * sizeof(int ),(int *)b,((unsigned long )1024) * sizeof(int ),&__event___vec_add__b_buffer);
    }
     else {
      printf("Error! The external memory pointed by 'b' is invalid.\n");
      exit(1);
    }
    
#pragma ACCEL debug printf("[Merlin Info] Finish %s data for %s.\n", "copy in", "b");
    
#pragma ACCEL debug fflush(stdout);
  }
}

void __merlin_read_buffer_vec_add(int s,int a[1024],int b[1024],int c[1024])
{
  static int __m_a[1024];
  static int __m_b[1024];
  static int __m_c[1024];
{
    
#pragma ACCEL debug printf("[Merlin Info] Start %s data for %s, data size = %s...\n", "copy out", "c", "1024 * sizeof(int )");
    
#pragma ACCEL debug fflush(stdout);
    if (c != 0) {
      __CMOST_COMMENT__ __vec_add__c_buffer;
      __CMOST_COMMENT__ __event___vec_add__c_buffer;
// __MERLIN_EVENT_READ__ __event___vec_add__c_buffer
      int __MERLIN_EVENT_READ____event___vec_add__c_buffer;
      opencl_read_buffer_nb(__vec_add__c_buffer,commands[0],0 * sizeof(int ),(int *)c,((unsigned long )1024) * sizeof(int ),&__event___vec_add__c_buffer);
    }
     else {
      printf("Error! The external memory pointed by 'c' is invalid.\n");
      exit(1);
    }
    
#pragma ACCEL debug printf("[Merlin Info] Finish %s data for %s.\n", "copy out", "c");
    
#pragma ACCEL debug fflush(stdout);
  }
}

void __merlin_execute_vec_add(int s,int a[1024],int b[1024],int c[1024])
{
  int i;
{
	#pragma ACCEL debug printf("[Merlin Info] Start set kernel %s argument....\n", "vec_add");
	#pragma ACCEL debug fflush(stdout);
	opencl_set_kernel_arg(__vec_add_kernel, 0, sizeof(int), &s);
	opencl_set_kernel_arg(__vec_add_kernel, 1, sizeof(opencl_mem), &__vec_add__a_buffer);
	opencl_set_kernel_arg(__vec_add_kernel, 2, sizeof(opencl_mem), &__vec_add__b_buffer);
	opencl_set_kernel_arg(__vec_add_kernel, 3, sizeof(opencl_mem), &__vec_add__c_buffer);
	#pragma ACCEL debug printf("[Merlin Info] Finish set kernel %s argument....\n", "vec_add");
	#pragma ACCEL debug fflush(stdout);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start set kernel %s argument....\n", "msm_port_a_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
	opencl_set_kernel_arg(__msm_port_a_vec_add_0_kernel, 0, sizeof(opencl_mem), &__vec_add__a_buffer);
	#pragma ACCEL debug printf("[Merlin Info] Finish set kernel %s argument....\n", "msm_port_a_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start set kernel %s argument....\n", "msm_port_c_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
	opencl_set_kernel_arg(__msm_port_c_vec_add_0_kernel, 0, sizeof(opencl_mem), &__vec_add__c_buffer);
	#pragma ACCEL debug printf("[Merlin Info] Finish set kernel %s argument....\n", "msm_port_c_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start execute kernel %s....\n", "vec_add");
	#pragma ACCEL debug fflush(stdout);
	size_t __gid[1];
	__gid[0] = 1;
	opencl_enqueue_kernel(__vec_add_kernel, commands[0], 1, __gid, &__event_vec_add);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start execute kernel %s....\n", "msm_port_a_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
	size_t __gid[1];
	__gid[0] = 1;
	opencl_enqueue_kernel(__msm_port_a_vec_add_0_kernel, commands[1], 1, __gid, &__event_msm_port_a_vec_add_0);
}
{
	#pragma ACCEL debug printf("[Merlin Info] Start execute kernel %s....\n", "msm_port_c_vec_add_0");
	#pragma ACCEL debug fflush(stdout);
	size_t __gid[1];
	__gid[0] = 1;
	opencl_enqueue_kernel(__msm_port_c_vec_add_0_kernel, commands[2], 1, __gid, &__event_msm_port_c_vec_add_0);
}
}
