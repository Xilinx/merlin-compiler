#include<assert.h>
#include <string.h> 
#include<assert.h>
#define VEC_SIZE 10000
extern int __merlin_include__GB_string_h_1;
extern int __merlin_include__GB_assert_h_0;
#pragma ACCEL kernel

void vec_add_kernel(int *a,int *b,int *c,int inc,int n)
{
  int b_buf[1000];
  int a_buf[1000];
  int c_buf[1000];
  int j;
  n >= 4 && n < 1000?((void )0) : __assert_fail("n >= 4 && n < 1000","vec_add_kernel_lab3.c",7,__PRETTY_FUNCTION__);
{
    unsigned long merlin_len = 1 + n;
    assert(merlin_len <= 1000L);
    memcpy((void *)(&c_buf[0]),(const void *)(&c[0]),sizeof(int ) * merlin_len);
  }
{
    unsigned long merlin_len_1 = 1 + n;
    assert(merlin_len_1 <= 1000L);
    memcpy((void *)(&a_buf[0]),(const void *)(&a[0]),sizeof(int ) * merlin_len_1);
  }
{
    unsigned long merlin_len_2 = 1 + n;
    assert(merlin_len_2 <= 1000L);
    memcpy((void *)(&b_buf[0]),(const void *)(&b[0]),sizeof(int ) * merlin_len_2);
  }
//assert(n < 1000);
  for (j = 1; j < n; j += 3) {
    
#pragma ACCEL pipeline_parallel factor = 10
    c_buf[j] = a_buf[j] + b_buf[j] + inc;
    c_buf[1 + j] = a_buf[1 + j] + b_buf[1 + j] + inc;
    c_buf[-1 + j] = a_buf[-1 + j] + b_buf[-1 + j] + inc;
  }
{
    unsigned long merlin_len_0 = 1 + n;
    assert(merlin_len_0 <= 1000L);
    memcpy((void *)(&c[0]),(const void *)(&c_buf[0]),sizeof(int ) * merlin_len_0);
  }
}

int main()
{
  int *a;
  int *b;
  int *c;
  int inc;
  int n;
  vec_add_kernel(a,b,c,inc,n);
  return 0;
}
