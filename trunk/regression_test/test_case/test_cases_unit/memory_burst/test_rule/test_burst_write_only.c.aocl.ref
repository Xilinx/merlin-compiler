#include <string.h> 
// 1. loop structure
// 2. function structure
// 3. access pattern
// 4. pragma modes
extern int __merlin_include__GB_string_h_0;
#pragma ACCEL kernel

void func_top_0(int *a,int *b)
{
  
#pragma ACCEL interface variable=a write_only
  int b_buf[99];
  int a_buf[99];
  int i;
  memcpy((void *)(&a_buf[0]),(const void *)(&a[0]),sizeof(int ) * 99);
  memcpy((void *)(&b_buf[0]),(const void *)(&b[0]),sizeof(int ) * 99);
  for (i = 0; i < 100; i += 2) {
    
#pragma ACCEL pipeline_parallel factor = 10
    a_buf[i] = b_buf[i];
  }
  memcpy((void *)(&a[0]),(const void *)(&a_buf[0]),sizeof(int ) * 99);
}
#pragma ACCEL kernel

void func_top_1(int *a,int *b)
{
  int b_buf[99];
  int a_buf[99];
  int i;
  memcpy((void *)(&a_buf[0]),(const void *)(&a[0]),sizeof(int ) * 99);
  memcpy((void *)(&b_buf[0]),(const void *)(&b[0]),sizeof(int ) * 99);
  for (i = 0; i < 100; i += 2) {
    
#pragma ACCEL pipeline
    a_buf[i] = b_buf[i];
  }
  memcpy((void *)(&a[0]),(const void *)(&a_buf[0]),sizeof(int ) * 99);
}

void sub(int *a)
/* Original: #pragma ACCEL cache */
{
  int a_buf[100];
  memcpy((void *)(&a_buf[0]),(const void *)(&a[0]),sizeof(int ) * 100);
  for (int i = 0; i < 100; ++i) {
    a_buf[i]++;
  }
  memcpy((void *)(&a[0]),(const void *)(&a_buf[0]),sizeof(int ) * 100);
}
#pragma ACCEL kernel

void func_top_2(int *a,int *b)
{
  
#pragma ACCEL interface variable=a write_only
  int a_buf[100];
  int i = 0;
  for (int i = 0; i < 100; ++i) {
    a_buf[i] = b[i];
  }
  memcpy((void *)(&a[0]),(const void *)(&a_buf[0]),sizeof(int ) * 100);
  sub(a);
}

int main()
{
  int *a;
  int *b;
  int *c;
  int *aa;
  int *bb;
  int *cc;
  int a_s;
  int b_s;
  int c_s;
  func_top_0(a,b);
  func_top_1(a,b);
  return 0;
}
