#include <string.h> 
extern int __merlin_include__GB_string_h_0;
#pragma ACCEL kernel

void top(int *a)
{
  for (int i = 0; i < 10000; ++i) {
    if ((i & 1)) {
      int a_buf[1000];
      for (int j = 0; j < 1000; ++j) {
        a_buf[j] = 0;
      }
      memcpy((void *)(&a[i * 1000]),(const void *)(&a_buf[0]),sizeof(int ) * 1000);
//expected write-only burst here    
    }
  }
}
#pragma ACCEL kernel

void top2(int *a)
{
  for (int i = 0; i < 10000; ++i) {
    if ((i & 1)) {
      int a_buf[1000];
      for (int j = 0; j < 1000; ++j) {
        a_buf[j] = 0;
      }
      memcpy((void *)(&a[i * 1000]),(const void *)(&a_buf[0]),sizeof(int ) * 1000);
    }
     else {
      int a_buf[1000];
      for (int j = 0; j < 1000; ++j) {
        a_buf[j] = 0;
      }
      memcpy((void *)(&a[i * 1000]),(const void *)(&a_buf[0]),sizeof(int ) * 1000);
    }
//expected write-only burst here
  }
}
#pragma ACCEL kernel

void top3(int *a)
{
  for (int i = 0; i < 10000; ++i) {
//expected read burst here   
    if ((i & 1)) {
      int a_buf[100];
      for (int j = 0; j < 100; ++j) {
        a_buf[j] = 0;
      }
      memcpy((void *)(&a[i * 1000]),(const void *)(&a_buf[0]),sizeof(int ) * 100);
    }
     else {
      int a_buf[1000];
      for (int j = 0; j < 1000; ++j) {
        a_buf[j] = 0;
      }
      memcpy((void *)(&a[i * 1000]),(const void *)(&a_buf[0]),sizeof(int ) * 1000);
    }
//expected write burst here    
  }
}
