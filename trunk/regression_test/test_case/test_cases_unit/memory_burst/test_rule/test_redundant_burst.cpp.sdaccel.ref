#include <string.h> 
#include "cmost.h"
#include<assert.h>
extern int __merlin_include__GB_string_h_0;

void sub(int *a,int size)
{
  size < 100?(static_cast < void  >  (0)) : __assert_fail("size < 100","test_redundant_burst.cpp",5,__PRETTY_FUNCTION__);
  for (int i = 0; i < size; ++i) {
    a[i] = i;
  }
}

void top_sub(int a[100])
{
  sub(a,100);
}

void top_sub_2(int b[90])
{
  sub(b,90);
}
//avoid redundant burst
#pragma ACCEL kernel

void top(int a[100],int b[90])
{
  int b_buf[90];
  int a_buf[99];
  __merlin_access_range(a,0,99);
  __merlin_access_range(b,0,89);
  memcpy((void *)(&a_buf[0]),(const void *)(&a[0]),sizeof(int ) * 99);
  memcpy((void *)(&b_buf[0]),(const void *)(&b[0]),sizeof(int ) * 90);
  for (int i = 0; i < 10; ++i) {
    top_sub(a_buf);
    a_buf[i]++;
    top_sub_2(b_buf);
  }
  memcpy((void *)(&b[0]),(const void *)(&b_buf[0]),sizeof(int ) * 90);
  memcpy((void *)(&a[0]),(const void *)(&a_buf[0]),sizeof(int ) * 99);
}
