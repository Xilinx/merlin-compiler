#include<assert.h>
#include <string.h> 
#include<assert.h>
extern int __merlin_include__GB_string_h_1;
extern int __merlin_include__GB_assert_h_0;

void sub(int *a)
{
   *a = 0;
}
#pragma ACCEL kernel

void top(int *a,int N)
{
  int a_buf[1023];
  N >= 0 && N < 1024?((void )0) : __assert_fail("N >= 0 && N < 1024","test_iter_cross_func.c",7,__PRETTY_FUNCTION__);
  for (int i = 0; i < N; ++i) {
    sub(&a_buf[i]);
  }
{
    unsigned long merlin_len = N;
    assert(merlin_len <= 1023L);
    memcpy((void *)(&a[0]),(const void *)(&a_buf[0]),sizeof(int ) * merlin_len);
  }
  return ;
}
