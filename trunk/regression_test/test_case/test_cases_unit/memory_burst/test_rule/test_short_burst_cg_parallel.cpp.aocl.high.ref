#include <string.h> 
#include "cmost.h"
#include <ap_int.h>
extern int __merlin_include__GB_string_h_0;

static void p_ZN2xf8security11aesEnc_256_C2Ev_1(unsigned char (*this_key_list)[15][16])
{
  
#pragma HLS ARRAY_PARTITION variable=this_key_list complete dim=2
  
#pragma HLS ARRAY_PARTITION variable=this_key_list complete dim=3
}
const class ap_uint< 8 > _ZN2xf8security9sbox_RconE[2048] = {(0x63), (0x7c), (0x77), (0x7b), (0xf2), (0x6b), (0x6f), (0xc5), (0x30), (0x1), (0x67), (0x2b), (0xfe), (0xd7), (0xab), (0x76), (0xca), (0x82), (0xc9), (0x7d), (0xfa), (0x59), (0x47), (0xf0), (0xad), (0xd4), (0xa2), (0xaf), (0x9c), (0xa4), (0x72), (0xc0), (0xb7), (0xfd), (0x93), (0x26), (0x36), (0x3f), (0xf7), (0xcc), (0x34), (0xa5), (0xe5), (0xf1), (0x71), (0xd8), (0x31), (0x15), (0x4), (0xc7), (0x23), (0xc3), (0x18), (0x96), (0x5), (0x9a), (0x7), (0x12), (0x80), (0xe2), (0xeb), (0x27), (0xb2), (0x75), (0x09), (0x83), (0x2c), (0x1a), (0x1b), (0x6e), (0x5a), (0xa0), (0x52), (0x3b), (0xd6), (0xb3), (0x29), (0xe3), (0x2f), (0x84), (0x53), (0xd1), (0x0), (0xed), (0x20), (0xfc), (0xb1), (0x5b), (0x6a), (0xcb), (0xbe), (0x39), (0x4a), (0x4c), (0x58), (0xcf), (0xd0), (0xef), (0xaa), (0xfb), (0x43), (0x4d), (0x33), (0x85), (0x45), (0xf9), (0x2), (0x7f), (0x50), (0x3c), (0x9f), (0xa8), (0x51), (0xa3), (0x40), (0x8f), (0x92), (0x9d), (0x38), (0xf5), (0xbc), (0xb6), (0xda), (0x21), (0x10), (0xff), (0xf3), (0xd2), (0xcd), (0x0c), (0x13), (0xec), (0x5f), (0x97), (0x44), (0x17), (0xc4), (0xa7), (0x7e), (0x3d), (0x64), (0x5d), (0x19), (0x73), (0x60), (0x81), (0x4f), (0xdc), (0x22), (0x2a), (0x90), (0x88), (0x46), (0xee), (0xb8), (0x14), (0xde), (0x5e), (0x0b), (0xdb), (0xe0), (0x32), (0x3a), (0x0a), (0x49), (0x6), (0x24), (0x5c), (0xc2), (0xd3), (0xac), (0x62), (0x91), (0x95), (0xe4), (0x79), (0xe7), (0xc8), (0x37), (0x6d), (0x8d), (0xd5), (0x4e), (0xa9), (0x6c), (0x56), (0xf4), (0xea), (0x65), (0x7a), (0xae), (0x08), (0xba), (0x78), (0x25), (0x2e), (0x1c), (0xa6), (0xb4), (0xc6), (0xe8), (0xdd), (0x74), (0x1f), (0x4b), (0xbd), (0x8b), (0x8a), (0x70), (0x3e), (0xb5), (0x66), (0x48), (0x3), (0xf6), (0x0e), (0x61), (0x35), (0x57), (0xb9), (0x86), (0xc1), (0x1d), (0x9e), (0xe1), (0xf8), (0x98), (0x11), (0x69), (0xd9), (0x8e), (0x94), (0x9b), (0x1e), (0x87), (0xe9), (0xce), (0x55), (0x28), (0xdf), (0x8c), (0xa1), (0x89), (0x0d), (0xbf), (0xe6), (0x42), (0x68), (0x41), (0x99), (0x2d), (0x0f), (0xb0), (0x54), (0xbb), (0x16), (0x62), (0x7d), (0x76), (0x7a), (0xf3), (0x6a), (0x6e), (0xc4), (0x31), (0x0), (0x66), (0x2a), (0xff), (0xd6), (0xaa), (0x77), (0xcb), (0x83), (0xc8), (0x7c), (0xfb), (0x58), (0x46), (0xf1), (0xac), (0xd5), (0xa3), (0xae), (0x9d), (0xa5), (0x73), (0xc1), (0xb6), (0xfc), (0x92), (0x27), (0x37), (0x3e), (0xf6), (0xcd), (0x35), (0xa4), (0xe4), (0xf0), (0x70), (0xd9), (0x30), (0x14), (0x5), (0xc6), (0x22), (0xc2), (0x19), (0x97), (0x4), (0x9b), (0x6), (0x13), (0x81), (0xe3), (0xea), (0x26), (0xb3), (0x74), (0x08), (0x82), (0x2d), (0x1b), (0x1a), (0x6f), (0x5b), (0xa1), (0x53), (0x3a), (0xd7), (0xb2), (0x28), (0xe2), (0x2e), (0x85), (0x52), (0xd0), (0x1), (0xec), (0x21), (0xfd), (0xb0), (0x5a), (0x6b), (0xca), (0xbf), (0x38), (0x4b), (0x4d), (0x59), (0xce), (0xd1), (0xee), (0xab), (0xfa), (0x42), (0x4c), (0x32), (0x84), (0x44), (0xf8), (0x3), (0x7e), (0x51), (0x3d), (0x9e), (0xa9), (0x50), (0xa2), (0x41), (0x8e), (0x93), (0x9c), (0x39), (0xf4), (0xbd), (0xb7), (0xdb), (0x20), (0x11), (0xfe), (0xf2), (0xd3), (0xcc), (0x0d), (0x12), (0xed), (0x5e), (0x96), (0x45), (0x16), (0xc5), (0xa6), (0x7f), (0x3c), (0x65), (0x5c), (0x18), (0x72), (0x61), (0x80), (0x4e), (0xdd), (0x23), (0x2b), (0x91), (0x89), (0x47), (0xef), (0xb9), (0x15), (0xdf), (0x5f), (0x0a), (0xda), (0xe1), (0x33), (0x3b), (0x0b), (0x48), (0x7), (0x25), (0x5d), (0xc3), (0xd2), (0xad), (0x63), (0x90), (0x94), (0xe5), (0x78), (0xe6), (0xc9), (0x36), (0x6c), (0x8c), (0xd4), (0x4f), (0xa8), (0x6d), (0x57), (0xf5), (0xeb), (0x64), (0x7b), (0xaf), (0x09), (0xbb), (0x79), (0x24), (0x2f), (0x1d), (0xa7), (0xb5), (0xc7), (0xe9), (0xdc), (0x75), (0x1e), (0x4a), (0xbc), (0x8a), (0x8b), (0x71), (0x3f), (0xb4), (0x67), (0x49), (0x2), (0xf7), (0x0f), (0x60), (0x34), (0x56), (0xb8), (0x87), (0xc0), (0x1c), (0x9f), (0xe0), (0xf9), (0x99), (0x10), (0x68), (0xd8), (0x8f), (0x95), (0x9a), (0x1f), (0x86), (0xe8), (0xcf), (0x54), (0x29), (0xde), (0x8d), (0xa0), (0x88), (0x0c), (0xbe), (0xe7), (0x43), (0x69), (0x40), (0x98), (0x2c), (0x0e), (0xb1), (0x55), (0xba), (0x17), (0x61), (0x7e), (0x75), (0x79), (0xf0), (0x69), (0x6d), (0xc7), (0x32), (0x3), (0x65), (0x29), (0xfc), (0xd5), (0xa9), (0x74), (0xc8), (0x80), (0xcb), (0x7f), (0xf8), (0x5b), (0x45), (0xf2), (0xaf), (0xd6), (0xa0), (0xad), (0x9e), (0xa6), (0x70), (0xc2), (0xb5), (0xff), (0x91), (0x24), (0x34), (0x3d), (0xf5), (0xce), (0x36), (0xa7), (0xe7), (0xf3), (0x73), (0xda), (0x33), (0x17), (0x6), (0xc5), (0x21), (0xc1), (0x1a), (0x94), (0x7), (0x98), (0x5), (0x10), (0x82), (0xe0), (0xe9), (0x25), (0xb0), (0x77), (0x0b), (0x81), (0x2e), (0x18), (0x19), (0x6c), (0x58), (0xa2), (0x50), (0x39), (0xd4), (0xb1), (0x2b), (0xe1), (0x2d), (0x86), (0x51), (0xd3), (0x2), (0xef), (0x22), (0xfe), (0xb3), (0x59), (0x68), (0xc9), (0xbc), (0x3b), (0x48), (0x4e), (0x5a), (0xcd), (0xd2), (0xed), (0xa8), (0xf9), (0x41), (0x4f), (0x31), (0x87), (0x47), (0xfb), (0x0), (0x7d), (0x52), (0x3e), (0x9d), (0xaa), (0x53), (0xa1), (0x42), (0x8d), (0x90), (0x9f), (0x3a), (0xf7), (0xbe), (0xb4), (0xd8), (0x23), (0x12), (0xfd), (0xf1), (0xd0), (0xcf), (0x0e), (0x11), (0xee), (0x5d), (0x95), (0x46), (0x15), (0xc6), (0xa5), (0x7c), (0x3f), (0x66), (0x5f), (0x1b), (0x71), (0x62), (0x83), (0x4d), (0xde), (0x20), (0x28), (0x92), (0x8a), (0x44), (0xec), (0xba), (0x16), (0xdc), (0x5c), (0x09), (0xd9), (0xe2), (0x30), (0x38), (0x08), (0x4b), (0x4), (0x26), (0x5e), (0xc0), (0xd1), (0xae), (0x60), (0x93), (0x97), (0xe6), (0x7b), (0xe5), (0xca), (0x35), (0x6f), (0x8f), (0xd7), (0x4c), (0xab), (0x6e), (0x54), (0xf6), (0xe8), (0x67), (0x78), (0xac), (0x0a), (0xb8), (0x7a), (0x27), (0x2c), (0x1e), (0xa4), (0xb6), (0xc4), (0xea), (0xdf), (0x76), (0x1d), (0x49), (0xbf), (0x89), (0x88), (0x72), (0x3c), (0xb7), (0x64), (0x4a), (0x1), (0xf4), (0x0c), (0x63), (0x37), (0x55), (0xbb), (0x84), (0xc3), (0x1f), (0x9c), (0xe3), (0xfa), (0x9a), (0x13), (0x6b), (0xdb), (0x8c), (0x96), (0x99), (0x1c), (0x85), (0xeb), (0xcc), (0x57), (0x2a), (0xdd), (0x8e), (0xa3), (0x8b), (0x0f), (0xbd), (0xe4), (0x40), (0x6a), (0x43), (0x9b), (0x2f), (0x0d), (0xb2), (0x56), (0xb9), (0x14), (0x67), (0x78), (0x73), (0x7f), (0xf6), (0x6f), (0x6b), (0xc1), (0x34), (0x5), (0x63), (0x2f), (0xfa), (0xd3), (0xaf), (0x72), (0xce), (0x86), (0xcd), (0x79), (0xfe), (0x5d), (0x43), (0xf4), (0xa9), (0xd0), (0xa6), (0xab), (0x98), (0xa0), (0x76), (0xc4), (0xb3), (0xf9), (0x97), (0x22), (0x32), (0x3b), (0xf3), (0xc8), (0x30), (0xa1), (0xe1), (0xf5), (0x75), (0xdc), (0x35), (0x11), (0x0), (0xc3), (0x27), (0xc7), (0x1c), (0x92), (0x1), (0x9e), (0x3), (0x16), (0x84), (0xe6), (0xef), (0x23), (0xb6), (0x71), (0x0d), (0x87), (0x28), (0x1e), (0x1f), (0x6a), (0x5e), (0xa4), (0x56), (0x3f), (0xd2), (0xb7), (0x2d), (0xe7), (0x2b), (0x80), (0x57), (0xd5), (0x4), (0xe9), (0x24), (0xf8), (0xb5), (0x5f), (0x6e), (0xcf), (0xba), (0x3d), (0x4e), (0x48), (0x5c), (0xcb), (0xd4), (0xeb), (0xae), (0xff), (0x47), (0x49), (0x37), (0x81), (0x41), (0xfd), (0x6), (0x7b), (0x54), (0x38), (0x9b), (0xac), (0x55), (0xa7), (0x44), (0x8b), (0x96), (0x99), (0x3c), (0xf1), (0xb8), (0xb2), (0xde), (0x25), (0x14), (0xfb), (0xf7), (0xd6), (0xc9), (0x08), (0x17), (0xe8), (0x5b), (0x93), (0x40), (0x13), (0xc0), (0xa3), (0x7a), (0x39), (0x60), (0x59), (0x1d), (0x77), (0x64), (0x85), (0x4b), (0xd8), (0x26), (0x2e), (0x94), (0x8c), (0x42), (0xea), (0xbc), (0x10), (0xda), (0x5a), (0x0f), (0xdf), (0xe4), (0x36), (0x3e), (0x0e), (0x4d), (0x2), (0x20), (0x58), (0xc6), (0xd7), (0xa8), (0x66), (0x95), (0x91), (0xe0), (0x7d), (0xe3), (0xcc), (0x33), (0x69), (0x89), (0xd1), (0x4a), (0xad), (0x68), (0x52), (0xf0), (0xee), (0x61), (0x7e), (0xaa), (0x0c), (0xbe), (0x7c), (0x21), (0x2a), (0x18), (0xa2), (0xb0), (0xc2), (0xec), (0xd9), (0x70), (0x1b), (0x4f), (0xb9), (0x8f), (0x8e), (0x74), (0x3a), (0xb1), (0x62), (0x4c), (0x7), (0xf2), (0x0a), (0x65), (0x31), (0x53), (0xbd), (0x82), (0xc5), (0x19), (0x9a), (0xe5), (0xfc), (0x9c), (0x15), (0x6d), (0xdd), (0x8a), (0x90), (0x9f), (0x1a), (0x83), (0xed), (0xca), (0x51), (0x2c), (0xdb), (0x88), (0xa5), (0x8d), (0x09), (0xbb), (0xe2), (0x46), (0x6c), (0x45), (0x9d), (0x29), (0x0b), (0xb4), (0x50), (0xbf), (0x12), (0x6b), (0x74), (0x7f), (0x73), (0xfa), (0x63), (0x67), (0xcd), (0x38), (0x09), (0x6f), (0x23), (0xf6), (0xdf), (0xa3), (0x7e), (0xc2), (0x8a), (0xc1), (0x75), (0xf2), (0x51), (0x4f), (0xf8), (0xa5), (0xdc), (0xaa), (0xa7), (0x94), (0xac), (0x7a), (0xc8), (0xbf), (0xf5), (0x9b), (0x2e), (0x3e), (0x37), (0xff), (0xc4), (0x3c), (0xad), (0xed), (0xf9), (0x79), (0xd0), (0x39), (0x1d), (0x0c), (0xcf), (0x2b), (0xcb), (0x10), (0x9e), (0x0d), (0x92), (0x0f), (0x1a), (0x88), (0xea), (0xe3), (0x2f), (0xba), (0x7d), (0x1), (0x8b), (0x24), (0x12), (0x13), (0x66), (0x52), (0xa8), (0x5a), (0x33), (0xde), (0xbb), (0x21), (0xeb), (0x27), (0x8c), (0x5b), (0xd9), (0x08), (0xe5), (0x28), (0xf4), (0xb9), (0x53), (0x62), (0xc3), (0xb6), (0x31), (0x42), (0x44), (0x50), (0xc7), (0xd8), (0xe7), (0xa2), (0xf3), (0x4b), (0x45), (0x3b), (0x8d), (0x4d), (0xf1), (0x0a), (0x77), (0x58), (0x34), (0x97), (0xa0), (0x59), (0xab), (0x48), (0x87), (0x9a), (0x95), (0x30), (0xfd), (0xb4), (0xbe), (0xd2), (0x29), (0x18), (0xf7), (0xfb), (0xda), (0xc5), (0x4), (0x1b), (0xe4), (0x57), (0x9f), (0x4c), (0x1f), (0xcc), (0xaf), (0x76), (0x35), (0x6c), (0x55), (0x11), (0x7b), (0x68), (0x89), (0x47), (0xd4), (0x2a), (0x22), (0x98), (0x80), (0x4e), (0xe6), (0xb0), (0x1c), (0xd6), (0x56), (0x3), (0xd3), (0xe8), (0x3a), (0x32), (0x2), (0x41), (0x0e), (0x2c), (0x54), (0xca), (0xdb), (0xa4), (0x6a), (0x99), (0x9d), (0xec), (0x71), (0xef), (0xc0), (0x3f), (0x65), (0x85), (0xdd), (0x46), (0xa1), (0x64), (0x5e), (0xfc), (0xe2), (0x6d), (0x72), (0xa6), (0x0), (0xb2), (0x70), (0x2d), (0x26), (0x14), (0xae), (0xbc), (0xce), (0xe0), (0xd5), (0x7c), (0x17), (0x43), (0xb5), (0x83), (0x82), (0x78), (0x36), (0xbd), (0x6e), (0x40), (0x0b), (0xfe), (0x6), (0x69), (0x3d), (0x5f), (0xb1), (0x8e), (0xc9), (0x15), (0x96), (0xe9), (0xf0), (0x90), (0x19), (0x61), (0xd1), (0x86), (0x9c), (0x93), (0x16), (0x8f), (0xe1), (0xc6), (0x5d), (0x20), (0xd7), (0x84), (0xa9), (0x81), (0x5), (0xb7), (0xee), (0x4a), (0x60), (0x49), (0x91), (0x25), (0x7), (0xb8), (0x5c), (0xb3), (0x1e), (0x73), (0x6c), (0x67), (0x6b), (0xe2), (0x7b), (0x7f), (0xd5), (0x20), (0x11), (0x77), (0x3b), (0xee), (0xc7), (0xbb), (0x66), (0xda), (0x92), (0xd9), (0x6d), (0xea), (0x49), (0x57), (0xe0), (0xbd), (0xc4), (0xb2), (0xbf), (0x8c), (0xb4), (0x62), (0xd0), (0xa7), (0xed), (0x83), (0x36), (0x26), (0x2f), (0xe7), (0xdc), (0x24), (0xb5), (0xf5), (0xe1), (0x61), (0xc8), (0x21), (0x5), (0x14), (0xd7), (0x33), (0xd3), (0x08), (0x86), (0x15), (0x8a), (0x17), (0x2), (0x90), (0xf2), (0xfb), (0x37), (0xa2), (0x65), (0x19), (0x93), (0x3c), (0x0a), (0x0b), (0x7e), (0x4a), (0xb0), (0x42), (0x2b), (0xc6), (0xa3), (0x39), (0xf3), (0x3f), (0x94), (0x43), (0xc1), (0x10), (0xfd), (0x30), (0xec), (0xa1), (0x4b), (0x7a), (0xdb), (0xae), (0x29), (0x5a), (0x5c), (0x48), (0xdf), (0xc0), (0xff), (0xba), (0xeb), (0x53), (0x5d), (0x23), (0x95), (0x55), (0xe9), (0x12), (0x6f), (0x40), (0x2c), (0x8f), (0xb8), (0x41), (0xb3), (0x50), (0x9f), (0x82), (0x8d), (0x28), (0xe5), (0xac), (0xa6), (0xca), (0x31), (0x0), (0xef), (0xe3), (0xc2), (0xdd), (0x1c), (0x3), (0xfc), (0x4f), (0x87), (0x54), (0x7), (0xd4), (0xb7), (0x6e), (0x2d), (0x74), (0x4d), (0x09), (0x63), (0x70), (0x91), (0x5f), (0xcc), (0x32), (0x3a), (0x80), (0x98), (0x56), (0xfe), (0xa8), (0x4), (0xce), (0x4e), (0x1b), (0xcb), (0xf0), (0x22), (0x2a), (0x1a), (0x59), (0x16), (0x34), (0x4c), (0xd2), (0xc3), (0xbc), (0x72), (0x81), (0x85), (0xf4), (0x69), (0xf7), (0xd8), (0x27), (0x7d), (0x9d), (0xc5), (0x5e), (0xb9), (0x7c), (0x46), (0xe4), (0xfa), (0x75), (0x6a), (0xbe), (0x18), (0xaa), (0x68), (0x35), (0x3e), (0x0c), (0xb6), (0xa4), (0xd6), (0xf8), (0xcd), (0x64), (0x0f), (0x5b), (0xad), (0x9b), (0x9a), (0x60), (0x2e), (0xa5), (0x76), (0x58), (0x13), (0xe6), (0x1e), (0x71), (0x25), (0x47), (0xa9), (0x96), (0xd1), (0x0d), (0x8e), (0xf1), (0xe8), (0x88), (0x1), (0x79), (0xc9), (0x9e), (0x84), (0x8b), (0x0e), (0x97), (0xf9), (0xde), (0x45), (0x38), (0xcf), (0x9c), (0xb1), (0x99), (0x1d), (0xaf), (0xf6), (0x52), (0x78), (0x51), (0x89), (0x3d), (0x1f), (0xa0), (0x44), (0xab), (0x6), (0x43), (0x5c), (0x57), (0x5b), (0xd2), (0x4b), (0x4f), (0xe5), (0x10), (0x21), (0x47), (0x0b), (0xde), (0xf7), (0x8b), (0x56), (0xea), (0xa2), (0xe9), (0x5d), (0xda), (0x79), (0x67), (0xd0), (0x8d), (0xf4), (0x82), (0x8f), (0xbc), (0x84), (0x52), (0xe0), (0x97), (0xdd), (0xb3), (0x6), (0x16), (0x1f), (0xd7), (0xec), (0x14), (0x85), (0xc5), (0xd1), (0x51), (0xf8), (0x11), (0x35), (0x24), (0xe7), (0x3), (0xe3), (0x38), (0xb6), (0x25), (0xba), (0x27), (0x32), (0xa0), (0xc2), (0xcb), (0x7), (0x92), (0x55), (0x29), (0xa3), (0x0c), (0x3a), (0x3b), (0x4e), (0x7a), (0x80), (0x72), (0x1b), (0xf6), (0x93), (0x09), (0xc3), (0x0f), (0xa4), (0x73), (0xf1), (0x20), (0xcd), (0x0), (0xdc), (0x91), (0x7b), (0x4a), (0xeb), (0x9e), (0x19), (0x6a), (0x6c), (0x78), (0xef), (0xf0), (0xcf), (0x8a), (0xdb), (0x63), (0x6d), (0x13), (0xa5), (0x65), (0xd9), (0x22), (0x5f), (0x70), (0x1c), (0xbf), (0x88), (0x71), (0x83), (0x60), (0xaf), (0xb2), (0xbd), (0x18), (0xd5), (0x9c), (0x96), (0xfa), (0x1), (0x30), (0xdf), (0xd3), (0xf2), (0xed), (0x2c), (0x33), (0xcc), (0x7f), (0xb7), (0x64), (0x37), (0xe4), (0x87), (0x5e), (0x1d), (0x44), (0x7d), (0x39), (0x53), (0x40), (0xa1), (0x6f), (0xfc), (0x2), (0x0a), (0xb0), (0xa8), (0x66), (0xce), (0x98), (0x34), (0xfe), (0x7e), (0x2b), (0xfb), (0xc0), (0x12), (0x1a), (0x2a), (0x69), (0x26), (0x4), (0x7c), (0xe2), (0xf3), (0x8c), (0x42), (0xb1), (0xb5), (0xc4), (0x59), (0xc7), (0xe8), (0x17), (0x4d), (0xad), (0xf5), (0x6e), (0x89), (0x4c), (0x76), (0xd4), (0xca), (0x45), (0x5a), (0x8e), (0x28), (0x9a), (0x58), (0x5), (0x0e), (0x3c), (0x86), (0x94), (0xe6), (0xc8), (0xfd), (0x54), (0x3f), (0x6b), (0x9d), (0xab), (0xaa), (0x50), (0x1e), (0x95), (0x46), (0x68), (0x23), (0xd6), (0x2e), (0x41), (0x15), (0x77), (0x99), (0xa6), (0xe1), (0x3d), (0xbe), (0xc1), (0xd8), (0xb8), (0x31), (0x49), (0xf9), (0xae), (0xb4), (0xbb), (0x3e), (0xa7), (0xc9), (0xee), (0x75), (0x08), (0xff), (0xac), (0x81), (0xa9), (0x2d), (0x9f), (0xc6), (0x62), (0x48), (0x61), (0xb9), (0x0d), (0x2f), (0x90), (0x74), (0x9b), (0x36), (0x23), (0x3c), (0x37), (0x3b), (0xb2), (0x2b), (0x2f), (0x85), (0x70), (0x41), (0x27), (0x6b), (0xbe), (0x97), (0xeb), (0x36), (0x8a), (0xc2), (0x89), (0x3d), (0xba), (0x19), (0x7), (0xb0), (0xed), (0x94), (0xe2), (0xef), (0xdc), (0xe4), (0x32), (0x80), (0xf7), (0xbd), (0xd3), (0x66), (0x76), (0x7f), (0xb7), (0x8c), (0x74), (0xe5), (0xa5), (0xb1), (0x31), (0x98), (0x71), (0x55), (0x44), (0x87), (0x63), (0x83), (0x58), (0xd6), (0x45), (0xda), (0x47), (0x52), (0xc0), (0xa2), (0xab), (0x67), (0xf2), (0x35), (0x49), (0xc3), (0x6c), (0x5a), (0x5b), (0x2e), (0x1a), (0xe0), (0x12), (0x7b), (0x96), (0xf3), (0x69), (0xa3), (0x6f), (0xc4), (0x13), (0x91), (0x40), (0xad), (0x60), (0xbc), (0xf1), (0x1b), (0x2a), (0x8b), (0xfe), (0x79), (0x0a), (0x0c), (0x18), (0x8f), (0x90), (0xaf), (0xea), (0xbb), (0x3), (0x0d), (0x73), (0xc5), (0x5), (0xb9), (0x42), (0x3f), (0x10), (0x7c), (0xdf), (0xe8), (0x11), (0xe3), (0x0), (0xcf), (0xd2), (0xdd), (0x78), (0xb5), (0xfc), (0xf6), (0x9a), (0x61), (0x50), (0xbf), (0xb3), (0x92), (0x8d), (0x4c), (0x53), (0xac), (0x1f), (0xd7), (0x4), (0x57), (0x84), (0xe7), (0x3e), (0x7d), (0x24), (0x1d), (0x59), (0x33), (0x20), (0xc1), (0x0f), (0x9c), (0x62), (0x6a), (0xd0), (0xc8), (0x6), (0xae), (0xf8), (0x54), (0x9e), (0x1e), (0x4b), (0x9b), (0xa0), (0x72), (0x7a), (0x4a), (0x09), (0x46), (0x64), (0x1c), (0x82), (0x93), (0xec), (0x22), (0xd1), (0xd5), (0xa4), (0x39), (0xa7), (0x88), (0x77), (0x2d), (0xcd), (0x95), (0x0e), (0xe9), (0x2c), (0x16), (0xb4), (0xaa), (0x25), (0x3a), (0xee), (0x48), (0xfa), (0x38), (0x65), (0x6e), (0x5c), (0xe6), (0xf4), (0x86), (0xa8), (0x9d), (0x34), (0x5f), (0x0b), (0xfd), (0xcb), (0xca), (0x30), (0x7e), (0xf5), (0x26), (0x08), (0x43), (0xb6), (0x4e), (0x21), (0x75), (0x17), (0xf9), (0xc6), (0x81), (0x5d), (0xde), (0xa1), (0xb8), (0xd8), (0x51), (0x29), (0x99), (0xce), (0xd4), (0xdb), (0x5e), (0xc7), (0xa9), (0x8e), (0x15), (0x68), (0x9f), (0xcc), (0xe1), (0xc9), (0x4d), (0xff), (0xa6), (0x2), (0x28), (0x1), (0xd9), (0x6d), (0x4f), (0xf0), (0x14), (0xfb), (0x56)};

static void p_ZN2xf8security11aesEnc_256_9updateKeyEPh_1(unsigned char (*this_key_list)[15][16],unsigned char cipherkey[32])
{
  __merlin_access_range(cipherkey,0,31UL);
  
#pragma HLS inline off
  unsigned char roundkey[16];
  unsigned char roundkey_1[16];
  unsigned char roundkey_2[16];
  unsigned char round_tmp[4];
  unsigned char round_shift_tmp;
  unsigned char addr1;
  unsigned char addr2;
  for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
    
#pragma ACCEL PARALLEL COMPLETE
    roundkey_2[i] = cipherkey[i];
    roundkey_1[i] = cipherkey[i + 16];
    ( *this_key_list)[0][i] = roundkey_2[i];
  }
  int _s_round_counter = 1;
  for (_s_round_counter = ((int )((unsigned char )1)); _s_round_counter <= 14; ++_s_round_counter) 
// Original: #pragma ACCEL PIPELINE FLATTEN II=1
// Original: #pragma ACCEL PIPELINE II=1
{
    
#pragma ACCEL PIPELINE II=1
    
#pragma HLS resource variable = _ZN2xf8security9sbox_RconE core = ROM_nP_LUTRAM
    if (((int )_s_round_counter) == 1) {
      for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
        
#pragma ACCEL PARALLEL COMPLETE
        roundkey[i] = roundkey_1[i];
      }
    }
     else {
      for (int i = 0; i < 4; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
        
#pragma ACCEL PARALLEL COMPLETE
        round_tmp[i] = roundkey_1[i + 12];
      }
      if ((bool )(((int )(!((bool )_s_round_counter))) % 2)) {
        round_shift_tmp = round_tmp[0];
        round_tmp[0] = round_tmp[1];
        round_tmp[1] = round_tmp[2];
        round_tmp[2] = round_tmp[3];
        round_tmp[3] = round_shift_tmp;
        addr1 = ((unsigned char )(((int )_s_round_counter) / 2 * 2));
      }
       else {
        addr1 = ((unsigned char )0);
      }
      addr2 = round_tmp[0];
      round_tmp[0] = ((unsigned char )_ZN2xf8security9sbox_RconE[((int )addr2) * 256 + ((int )addr1)]);
      round_tmp[1] = ((unsigned char )_ZN2xf8security9sbox_RconE[round_tmp[1]]);
      round_tmp[2] = ((unsigned char )_ZN2xf8security9sbox_RconE[round_tmp[2]]);
      round_tmp[3] = ((unsigned char )_ZN2xf8security9sbox_RconE[round_tmp[3]]);
      for (int i = 0; i < 4; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
        
#pragma ACCEL PARALLEL COMPLETE
        roundkey[i] = ((unsigned char )(((int )roundkey_2[i]) ^ ((int )round_tmp[i])));
        roundkey[i + 4] = ((unsigned char )(((int )roundkey_2[i + 4]) ^ ((int )roundkey[i])));
        roundkey[i + 8] = ((unsigned char )(((int )roundkey_2[i + 8]) ^ ((int )roundkey[i + 4])));
        roundkey[i + 12] = ((unsigned char )(((int )roundkey_2[i + 12]) ^ ((int )roundkey[i + 8])));
      }
      for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
        
#pragma ACCEL PARALLEL COMPLETE
        roundkey_2[i] = roundkey_1[i];
        roundkey_1[i] = roundkey[i];
      }
    }
    for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma ACCEL PARALLEL COMPLETE
      ( *this_key_list)[_s_round_counter][i] = roundkey[i];
    }
  }
}
const unsigned short _ZN2xf8security19sbox_mix_col_1_charE[256] = {((unsigned short )0xc663), ((unsigned short )0xf87c), ((unsigned short )0xee77), ((unsigned short )0xf67b), ((unsigned short )0xfff2), ((unsigned short )0xd66b), ((unsigned short )0xde6f), ((unsigned short )0x91c5), ((unsigned short )0x6030), ((unsigned short )0x201), ((unsigned short )0xce67), ((unsigned short )0x562b), ((unsigned short )0xe7fe), ((unsigned short )0xb5d7), ((unsigned short )0x4dab), ((unsigned short )0xec76), ((unsigned short )0x8fca), ((unsigned short )0x1f82), ((unsigned short )0x89c9), ((unsigned short )0xfa7d), ((unsigned short )0xeffa), ((unsigned short )0xb259), ((unsigned short )0x8e47), ((unsigned short )0xfbf0), ((unsigned short )0x41ad), ((unsigned short )0xb3d4), ((unsigned short )0x5fa2), ((unsigned short )0x45af), ((unsigned short )0x239c), ((unsigned short )0x53a4), ((unsigned short )0xe472), ((unsigned short )0x9bc0), ((unsigned short )0x75b7), ((unsigned short )0xe1fd), ((unsigned short )0x3d93), ((unsigned short )0x4c26), ((unsigned short )0x6c36), ((unsigned short )0x7e3f), ((unsigned short )0xf5f7), ((unsigned short )0x83cc), ((unsigned short )0x6834), ((unsigned short )0x51a5), ((unsigned short )0xd1e5), ((unsigned short )0xf9f1), ((unsigned short )0xe271), ((unsigned short )0xabd8), ((unsigned short )0x6231), ((unsigned short )0x2a15), ((unsigned short )0x0804), ((unsigned short )0x95c7), ((unsigned short )0x4623), ((unsigned short )0x9dc3), ((unsigned short )0x3018), ((unsigned short )0x3796), ((unsigned short )0x0a05), ((unsigned short )0x2f9a), ((unsigned short )0x0e07), ((unsigned short )0x2412), ((unsigned short )0x1b80), ((unsigned short )0xdfe2), ((unsigned short )0xcdeb), ((unsigned short )0x4e27), ((unsigned short )0x7fb2), ((unsigned short )0xea75), ((unsigned short )0x1209), ((unsigned short )0x1d83), ((unsigned short )0x582c), ((unsigned short )0x341a), ((unsigned short )0x361b), ((unsigned short )0xdc6e), ((unsigned short )0xb45a), ((unsigned short )0x5ba0), ((unsigned short )0xa452), ((unsigned short )0x763b), ((unsigned short )0xb7d6), ((unsigned short )0x7db3), ((unsigned short )0x5229), ((unsigned short )0xdde3), ((unsigned short )0x5e2f), ((unsigned short )0x1384), ((unsigned short )0xa653), ((unsigned short )0xb9d1), ((unsigned short )0x0), ((unsigned short )0xc1ed), ((unsigned short )0x4020), ((unsigned short )0xe3fc), ((unsigned short )0x79b1), ((unsigned short )0xb65b), ((unsigned short )0xd46a), ((unsigned short )0x8dcb), ((unsigned short )0x67be), ((unsigned short )0x7239), ((unsigned short )0x944a), ((unsigned short )0x984c), ((unsigned short )0xb058), ((unsigned short )0x85cf), ((unsigned short )0xbbd0), ((unsigned short )0xc5ef), ((unsigned short )0x4faa), ((unsigned short )0xedfb), ((unsigned short )0x8643), ((unsigned short )0x9a4d), ((unsigned short )0x6633), ((unsigned short )0x1185), ((unsigned short )0x8a45), ((unsigned short )0xe9f9), ((unsigned short )0x402), ((unsigned short )0xfe7f), ((unsigned short )0xa050), ((unsigned short )0x783c), ((unsigned short )0x259f), ((unsigned short )0x4ba8), ((unsigned short )0xa251), ((unsigned short )0x5da3), ((unsigned short )0x8040), ((unsigned short )0x58f), ((unsigned short )0x3f92), ((unsigned short )0x219d), ((unsigned short )0x7038), ((unsigned short )0xf1f5), ((unsigned short )0x63bc), ((unsigned short )0x77b6), ((unsigned short )0xafda), ((unsigned short )0x4221), ((unsigned short )0x2010), ((unsigned short )0xe5ff), ((unsigned short )0xfdf3), ((unsigned short )0xbfd2), ((unsigned short )0x81cd), ((unsigned short )0x180c), ((unsigned short )0x2613), ((unsigned short )0xc3ec), ((unsigned short )0xbe5f), ((unsigned short )0x3597), ((unsigned short )0x8844), ((unsigned short )0x2e17), ((unsigned short )0x93c4), ((unsigned short )0x55a7), ((unsigned short )0xfc7e), ((unsigned short )0x7a3d), ((unsigned short )0xc864), ((unsigned short )0xba5d), ((unsigned short )0x3219), ((unsigned short )0xe673), ((unsigned short )0xc060), ((unsigned short )0x1981), ((unsigned short )0x9e4f), ((unsigned short )0xa3dc), ((unsigned short )0x4422), ((unsigned short )0x542a), ((unsigned short )0x3b90), ((unsigned short )0x0b88), ((unsigned short )0x8c46), ((unsigned short )0xc7ee), ((unsigned short )0x6bb8), ((unsigned short )0x2814), ((unsigned short )0xa7de), ((unsigned short )0xbc5e), ((unsigned short )0x160b), ((unsigned short )0xaddb), ((unsigned short )0xdbe0), ((unsigned short )0x6432), ((unsigned short )0x743a), ((unsigned short )0x140a), ((unsigned short )0x9249), ((unsigned short )0x0c06), ((unsigned short )0x4824), ((unsigned short )0xb85c), ((unsigned short )0x9fc2), ((unsigned short )0xbdd3), ((unsigned short )0x43ac), ((unsigned short )0xc462), ((unsigned short )0x3991), ((unsigned short )0x3195), ((unsigned short )0xd3e4), ((unsigned short )0xf279), ((unsigned short )0xd5e7), ((unsigned short )0x8bc8), ((unsigned short )0x6e37), ((unsigned short )0xda6d), ((unsigned short )0x18d), ((unsigned short )0xb1d5), ((unsigned short )0x9c4e), ((unsigned short )0x49a9), ((unsigned short )0xd86c), ((unsigned short )0xac56), ((unsigned short )0xf3f4), ((unsigned short )0xcfea), ((unsigned short )0xca65), ((unsigned short )0xf47a), ((unsigned short )0x47ae), ((unsigned short )0x1008), ((unsigned short )0x6fba), ((unsigned short )0xf078), ((unsigned short )0x4a25), ((unsigned short )0x5c2e), ((unsigned short )0x381c), ((unsigned short )0x57a6), ((unsigned short )0x73b4), ((unsigned short )0x97c6), ((unsigned short )0xcbe8), ((unsigned short )0xa1dd), ((unsigned short )0xe874), ((unsigned short )0x3e1f), ((unsigned short )0x964b), ((unsigned short )0x61bd), ((unsigned short )0x0d8b), ((unsigned short )0x0f8a), ((unsigned short )0xe070), ((unsigned short )0x7c3e), ((unsigned short )0x71b5), ((unsigned short )0xcc66), ((unsigned short )0x9048), ((unsigned short )0x603), ((unsigned short )0xf7f6), ((unsigned short )0x1c0e), ((unsigned short )0xc261), ((unsigned short )0x6a35), ((unsigned short )0xae57), ((unsigned short )0x69b9), ((unsigned short )0x1786), ((unsigned short )0x99c1), ((unsigned short )0x3a1d), ((unsigned short )0x279e), ((unsigned short )0xd9e1), ((unsigned short )0xebf8), ((unsigned short )0x2b98), ((unsigned short )0x2211), ((unsigned short )0xd269), ((unsigned short )0xa9d9), ((unsigned short )0x78e), ((unsigned short )0x3394), ((unsigned short )0x2d9b), ((unsigned short )0x3c1e), ((unsigned short )0x1587), ((unsigned short )0xc9e9), ((unsigned short )0x87ce), ((unsigned short )0xaa55), ((unsigned short )0x5028), ((unsigned short )0xa5df), ((unsigned short )0x38c), ((unsigned short )0x59a1), ((unsigned short )0x0989), ((unsigned short )0x1a0d), ((unsigned short )0x65bf), ((unsigned short )0xd7e6), ((unsigned short )0x8442), ((unsigned short )0xd068), ((unsigned short )0x8241), ((unsigned short )0x2999), ((unsigned short )0x5a2d), ((unsigned short )0x1e0f), ((unsigned short )0x7bb0), ((unsigned short )0xa854), ((unsigned short )0x6dbb), ((unsigned short )0x2c16)};

static void p_ZN2xf8security11aesEnc_256_7processEPhPhPh_1(unsigned char (*this_key_list)[15][16],unsigned char plaintext[16],unsigned char ciphertext[16])
{
  __merlin_access_range(ciphertext,0,15UL);
  __merlin_access_range(plaintext,0,15UL);
  
#pragma HLS ARRAY_PARTITION variable=_ZN2xf8security19sbox_mix_col_1_charE complete dim=1
  unsigned char state[16];
  unsigned char state_1[16];
  unsigned char state_2[16];
  unsigned char state_3[16];
  unsigned char tmp_1;
  unsigned char tmp_2_1;
  unsigned char tmp_2_2;
  unsigned char tmp_3;
  unsigned short mix_col_1_tmp;
  for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
    
#pragma ACCEL PARALLEL COMPLETE
    state[i] = ((unsigned char )(((int )plaintext[i]) ^ ((int )( *this_key_list)[0][i])));
  }
  int _s_round_counter;
// Canonicalized from: for(_s_round_counter =((unsigned char )1);((int )_s_round_counter) <= 14;_s_round_counter++) {...}
  for (_s_round_counter = ((int )((unsigned char )1)); _s_round_counter <= 14; ++_s_round_counter) 
// Original: #pragma ACCEL pipeline
// Original: #pragma ACCEL PIPELINE
{
    
#pragma ACCEL PIPELINE
    tmp_1 = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = tmp_1;
    tmp_2_1 = state[2];
    state[2] = state[10];
    state[10] = tmp_2_1;
    tmp_2_2 = state[6];
    state[6] = state[14];
    state[14] = tmp_2_2;
    tmp_3 = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = state[3];
    state[3] = tmp_3;
    for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma ACCEL PARALLEL COMPLETE
      mix_col_1_tmp = _ZN2xf8security19sbox_mix_col_1_charE[state[i]];
      state_1[i] = ((unsigned char )(((int )mix_col_1_tmp) % 256));
      state_2[i] = ((unsigned char )(((int )mix_col_1_tmp) / 256));
      state_3[i] = ((unsigned char )(((int )state_1[i]) ^ ((int )state_2[i])));
    }
    if (((int )_s_round_counter) < 14) {
      for (int i = 0; i < 4; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
        
#pragma ACCEL PARALLEL COMPLETE
        state[4 * i] = ((unsigned char )(((int )state_2[4 * i]) ^ ((int )state_3[4 * i + 1]) ^ ((int )state_1[4 * i + 2]) ^ ((int )state_1[4 * i + 3])));
        state[4 * i + 1] = ((unsigned char )(((int )state_1[4 * i]) ^ ((int )state_2[4 * i + 1]) ^ ((int )state_3[4 * i + 2]) ^ ((int )state_1[4 * i + 3])));
        state[4 * i + 2] = ((unsigned char )(((int )state_1[4 * i]) ^ ((int )state_1[4 * i + 1]) ^ ((int )state_2[4 * i + 2]) ^ ((int )state_3[4 * i + 3])));
        state[4 * i + 3] = ((unsigned char )(((int )state_3[4 * i]) ^ ((int )state_1[4 * i + 1]) ^ ((int )state_1[4 * i + 2]) ^ ((int )state_2[4 * i + 3])));
      }
    }
     else {
      for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
        
#pragma ACCEL PARALLEL COMPLETE
        state[i] = state_1[i];
      }
    }
    for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma ACCEL PARALLEL COMPLETE
      state[i] ^= ((int )( *this_key_list)[_s_round_counter][i]);
    }
  }
  for (int i = 0; i < 16; i++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
    
#pragma ACCEL PARALLEL COMPLETE
    ciphertext[i] = state[i];
  }
}

static void p_ZN2xf8security8internal13aesCbcEncryptEPA16_hPhPhPA16_h_1(unsigned char *plaintext,unsigned char cipherkey[32],unsigned char initialization_vector[16],unsigned char *ciphertext)
{
  __merlin_access_range(ciphertext,0,1023);
  __merlin_access_range(initialization_vector,0,15UL);
  __merlin_access_range(cipherkey,0,31UL);
  __merlin_access_range(plaintext,0,1023);
  unsigned char cipher_key_list[15][16];
  p_ZN2xf8security11aesEnc_256_C2Ev_1(&cipher_key_list);
  unsigned char key_r[32];
  for (int j = 0; j < 32; j++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
    
#pragma ACCEL PARALLEL COMPLETE
    key_r[j] = cipherkey[j];
  }
  p_ZN2xf8security11aesEnc_256_9updateKeyEPh_1(&cipher_key_list,key_r);
  unsigned char IV[16];
  for (int j = 0; j < 16; j++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
    
#pragma ACCEL PARALLEL COMPLETE
    IV[j] = initialization_vector[j];
  }
  unsigned char plaintext_r[16] = {((unsigned char )0)};
  unsigned char feedback_r[16] = {((unsigned char )0)};
  unsigned char input_block[16] = {((unsigned char )0)};
  unsigned char output_block[16] = {((unsigned char )0)};
  unsigned char ciphertext_r[16] = {((unsigned char )0)};
  char initialization = true;
  for (int i = 0; i < 64; i++) {
    for (int j = 0; j < 16; j++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma ACCEL PARALLEL COMPLETE
      plaintext_r[j] = plaintext[i * 16L + j];
      if ((bool )initialization) {
        input_block[j] = ((unsigned char )(((int )IV[j]) ^ ((int )plaintext_r[j])));
        initialization = ((char )false);
      }
       else {
        input_block[j] = ((unsigned char )(((int )feedback_r[j]) ^ ((int )plaintext_r[j])));
      }
    }
    p_ZN2xf8security11aesEnc_256_7processEPhPhPh_1(&cipher_key_list,input_block,output_block);
    for (int j = 0; j < 16; j++) 
// Original: #pragma ACCEL PARALLEL COMPLETE
{
      
#pragma ACCEL PARALLEL COMPLETE
      feedback_r[j] = output_block[j];
      ciphertext_r[j] = output_block[j];
      ciphertext[i * 16L + j] = ciphertext_r[j];
    }
  }
}
#pragma ACCEL kernel

void cipherModeParallel(unsigned char IVStrm[384],unsigned char cipherkeyStrm[768],unsigned char textInStrm[24576],unsigned char textOutStrm[24576])
{
  
#pragma ACCEL interface variable=textOutStrm depth=24,64,16 max_depth=24,64,16
  
#pragma ACCEL interface variable=textInStrm depth=24,64,16 max_depth=24,64,16
  
#pragma ACCEL interface variable=cipherkeyStrm depth=24,32 max_depth=24,32
  
#pragma ACCEL interface variable=IVStrm depth=24,16 max_depth=24,16
  unsigned char textOutStrm_buf[24576];
  unsigned char textInStrm_buf[24576];
  memcpy((void *)(&textInStrm_buf[0]),(const void *)(&textInStrm[0]),sizeof(unsigned char ) * 24576L);
  __merlin_access_range(textOutStrm,0,24575);
  __merlin_access_range(textInStrm,0,24575);
  __merlin_access_range(cipherkeyStrm,0,767);
  __merlin_access_range(IVStrm,0,383);
  for (unsigned int m = (unsigned int )0; m < ((unsigned int )24); m++) 
// Original: #pragma ACCEL parallel
// Original: #pragma ACCEL PARALLEL COMPLETE
{
    
#pragma ACCEL PARALLEL COMPLETE
    p_ZN2xf8security8internal13aesCbcEncryptEPA16_hPhPhPA16_h_1(&textInStrm_buf[m * 1024L],&cipherkeyStrm[m * 32L],&IVStrm[m * 16L],&textOutStrm_buf[m * 1024L]);
  }
  memcpy((void *)(&textOutStrm[0]),(const void *)(&textOutStrm_buf[0]),sizeof(unsigned char ) * 24576L);
}
