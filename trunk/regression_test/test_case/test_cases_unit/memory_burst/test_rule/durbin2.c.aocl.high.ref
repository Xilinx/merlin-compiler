#include <string.h> 
extern int __merlin_include__GB_string_h_0;
#pragma ACCEL kernel

void kernel_durbin(int n,int yy[1056],int sum[1056],int sumi[1056],int alpha[32],int beta[32],int r[32],int out[32])
{
  int out_buf[32];
  int i;
  int k;
  int y[1056];
  y[0 * 32 + 0] = r[0];
  beta[0] = 1;
  alpha[0] = r[0];
  for (k = 1; k < 32; k++) {
    beta[k] = beta[k - 1] - alpha[k - 1] * alpha[k - 1] * beta[k - 1];
    sum[0 * 32 + k] = r[k];
    for (i = 0; i <= k - 1; i++) {
      
#pragma ACCEL pipeline II=1
      sumi[(i + 1) * 32 + k] = sum[i * 32 + k] + r[k - i - 1] * y[i * 32 + k - 1];
    }
    alpha[k] = -sumi[k * 32 + k] * beta[k];
    for (i = 0; i <= k - 1; i = i + 2) {
      
#pragma ACCEL pipeline
      yy[i * 32 + k] = y[i * 32 + k - 1] + alpha[k] * y[(k - i - 1) * 32 + k - 1];
      yy[i * 32 + k + 1] = y[i * 32 + k] + alpha[k + 1] * y[(k - i) * 32 + k];
    }
    yy[k * 32 + k] = alpha[k];
  }
  for (i = 0; i < 32; i++) {
    out_buf[i] = yy[i * 32 + 32 - 1];
  }
  memcpy((void *)(&out[0]),(const void *)(&out_buf[0]),sizeof(int ) * 32);
}

int main()
{
  int n;
  int yy[1056];
  int sum[1056];
  int sumi[1056];
  int alpha[32];
  int beta[32];
  int r[32];
  int out[32];
  kernel_durbin(n,yy,sum,sumi,alpha,beta,r,out);
  return 0;
}
