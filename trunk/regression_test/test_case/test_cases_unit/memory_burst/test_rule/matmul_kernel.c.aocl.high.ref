#include <string.h> 
#define VEC_SIZE 64
#define VEC_flat_SIZE 4096
#define aa(p, n) (a[(p)*VEC_SIZE + (n)])
#define bb(p, n) (b[(p)*VEC_SIZE + (n)])
#define cc(p, n) (c[(p)*VEC_SIZE + (n)])
#define a_buf(p, n) (abuf[(p)*VEC_SIZE + (n)])
extern int __merlin_include__GB_string_h_0;
#pragma ACCEL kernel

void matmul_kernel(float *a,float *b,float *c)
{
  
#pragma ACCEL skip_sync variable=c_buf
  
#pragma ACCEL skip_sync variable=c
  
#pragma ACCEL skip_sync variable=c_buf
  
#pragma ACCEL skip_sync variable=c
  float b_buf[4096];
  float a_buf[4096];
  float c_buf[4096];
  memcpy((void *)(&c_buf[0]),(const void *)(&c[0]),sizeof(float ) * 4096);
  memcpy((void *)(&a_buf[0]),(const void *)(&a[0]),sizeof(float ) * 4096);
  memcpy((void *)(&b_buf[0]),(const void *)(&b[0]),sizeof(float ) * 4096);
  int i;
  int j;
  int k;
//    for (i = 0 ;i < VEC_SIZE; i++) {
//        for (j = 0 ;j < VEC_SIZE; j++) {
//             cc(i,j)=0;
//        }
//    }
  for (k = 0; k < 64; k++) {
    for (i = 0; i < 64; i++) {
      
#pragma ACCEL pipeline
      for (j = 0; j < 64; j++) {
        
#pragma ACCEL parallel complete
        c_buf[i * 64 + j] += a_buf[i * 64 + k] * b_buf[k * 64 + j];
      }
    }
  }
  memcpy((void *)(&c[0]),(const void *)(&c_buf[0]),sizeof(float ) * 4096);
}

int main()
{
  float *a;
  float *b;
  float *c;
  matmul_kernel(a,b,c);
  return 0;
}
