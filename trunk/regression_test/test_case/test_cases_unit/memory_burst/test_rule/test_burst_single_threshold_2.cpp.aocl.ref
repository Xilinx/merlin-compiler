#include <string.h> 
// 1. loop structure
// 2. function structure
// 3. access pattern
// 4. pragma modes
extern int __merlin_include__GB_string_h_0;

void func_top_0(int *a,int *b)
{
  int b_buf_0[100000];
  memcpy((void *)(&b_buf_0[0]),(const void *)(&b[0]),sizeof(int ) * 100000);
  
#pragma ACCEL interface variable=a max_burst_size=1000
  for (int i = 0; i < 100000; ++i) {
    int a_buf_0[1];
    
#pragma ACCEL pipeline
    a_buf_0[0] = b_buf_0[i];
    memcpy((void *)(&a[i]),(const void *)(&a_buf_0[0]),sizeof(int ) * 1);
  }
}

void func_top_1(int *a,int *b)
{
  
#pragma ACCEL interface variable=a
  for (int i = 0; i < 1000000; ++i) {
    int b_buf_0[1];
    int a_buf_0[1];
    memcpy((void *)(&b_buf_0[0]),(const void *)(&b[i]),sizeof(int ) * 1);
    
#pragma ACCEL pipeline
    a_buf_0[0] = b_buf_0[0];
    memcpy((void *)(&a[i]),(const void *)(&a_buf_0[0]),sizeof(int ) * 1);
  }
}

int main()
{
  int *a;
  int *b;
  int *c;
  int *aa;
  int *bb;
  int *cc;
  int a_s;
  int b_s;
  int c_s;
  
#pragma ACCEL task name="ts0"
  func_top_0(a,b);
  
#pragma ACCEL task name="ts0"
  func_top_1(a,b);
  return 0;
}
