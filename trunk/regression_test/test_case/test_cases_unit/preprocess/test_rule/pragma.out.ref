// 1. loop structure
// 2. function structure
// 3. access pattern
// 4. pragma modes
#pragma ACCEL kernel

void func_top_0()
{
  int *a;
  int *b;
  int i;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_1()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
//bracelet
    for (j = 0; j < 100; j++) {
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_2()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10 flatten
{
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_3()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL parallel factor = 10
{
      
#pragma ACCEL PARALLEL FACTOR=10 
      a[i][j] = b[i][j];
    }
  }
}
//Loop structure 
#pragma ACCEL kernel

void func_top_4()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma ACCEL PIPELINE 
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL parallel factor = 10
{
      
#pragma ACCEL PARALLEL FACTOR=10 
      a[i][j] = b[i][j];
    }
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
      a[i + 1][j] = b[i][j + 1];
    }
  }
}
#pragma ACCEL kernel

void func_top_5()
{
  int a[100][100];
  int b[100][100];
  int i = 0;
  int j = 0;
  for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
    a[i + 1][j] = b[i][j + 1];
  }
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline flatten
{
    
#pragma ACCEL PIPELINE 
    for (j = 0; j < 100; j++) {
      
#pragma ACCEL PARALLEL COMPLETE
      a[i][j] = b[i][j];
    }
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline flatten
// Original: #pragma ACCEL pipeline flatten
{
      
#pragma ACCEL PARALLEL COMPLETE
      a[i + 2][j] = b[i + 2][j];
    }
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
      
#pragma ACCEL PARALLEL COMPLETE
      a[i + 1][j] = b[i][j + 1];
    }
  }
  for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
    a[i + 1][j] = b[i][j + 1];
  }
}
//ifelse
#pragma ACCEL kernel

void func_top_6()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
      if (a[0][0]) {
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_7()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    if (a[0][0]) {
      for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_8()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    if (a[0][0]) {
      for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
        a[i][j] = b[i][j];
      }
    }
  }
}
// sub function

void sub_0(int a[100],int b[100])
{
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PARALLEL COMPLETE
    if (a[0]) {
      for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
        
#pragma ACCEL PARALLEL COMPLETE
        a[j] = b[j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_9()
{
  int a[100][100];
  int b[100][100];
  for (int i = 0; i < 100; ++i) 
// Original: #pragma ACCEL pipeline FLATTEN
{
    
#pragma ACCEL PIPELINE 
    sub_0(a[i],b[i]);
  }
}

int sub_0(int a[100],int b[100][100],int c)
{
  int c_copy = 1;
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
      a[i] = b[i][j] + 1;
    }
  }
  return 1024;
}
#pragma ACCEL kernel

void func_top_10()
{
  int a[100][100];
  int b[100][100];
  int c = 1;
  int sum = sub_0(a[0],b,1);
}

void sub_1(int a[100],int b[100])
{
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PARALLEL COMPLETE
    if (a[0]) {
      for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
        
#pragma ACCEL PARALLEL COMPLETE
        a[j] = b[j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_11()
{
  int a[100][100];
  int b[100][100];
  for (int i = 0; i < 100; ++i) 
// Original: #pragma ACCEL pipeline flatten
{
    
#pragma ACCEL PIPELINE 
    sub_1(a[i],b[i]);
    sub_1(a[i],b[i]);
  }
}

int sub_2(int b[100][100],int i,int j)
{
  int sum = 0;
  for (int k = 0; k < 100; ++k) {
    
#pragma ACCEL PARALLEL COMPLETE
    sum += b[i][k] + b[k][j + 1];
  }
  return sum;
}

int sub_00(int a[100],int b[100][100],int c)
{
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PARALLEL COMPLETE
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
      
#pragma ACCEL PARALLEL COMPLETE
      a[i] = sub_2(b,i,j);
    }
  }
  return 1024;
}
#pragma ACCEL kernel

void func_top_12()
{
  int a[100][100];
  int b[100][100];
  int sum = 0;
  for (int i = 0; i < 100; ++i) 
// Original: #pragma ACCEL pipeline flatten reduction=sum
{
    
#pragma ACCEL REDUCTION SCHEME=auto VARIABLE=sum 
    
#pragma ACCEL PIPELINE 
    sum += sub_00(a[i],b,i);
  }
}

int sub_3(int b[100][100],int i,int j)
{
  int sum = 0;
  for (int k = 0; k < 100; ++k) {
    
#pragma ACCEL PARALLEL COMPLETE
    sum += b[i][k] + b[k][j + 1];
  }
  return sum;
}

int sub_30(int a[100],int b[100][100],int c)
{
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    
#pragma ACCEL PARALLEL COMPLETE
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
      
#pragma ACCEL PARALLEL COMPLETE
      a[i] = sub_3(b,i,j);
    }
  }
  return 1024;
}
#pragma ACCEL kernel

void func_top_13()
{
  int a[100][100];
  int b[100][100];
  int sum = 0;
  for (int i = 0; i < 100; ++i) 
// Original: #pragma ACCEL pipeline flatten
{
    
#pragma ACCEL PIPELINE 
    sum += sub_30(a[i],b,i);
  }
}
// pragma modes
#pragma ACCEL kernel

void func_top_26()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline
{
      
#pragma ACCEL PIPELINE 
      a[i][j] += a[i + 1][j] * a[i - 1][j];
    }
  }
}
// pragma modes
#pragma ACCEL kernel

void func_top_27()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL parallel factor = 10
{
      
#pragma ACCEL PARALLEL FACTOR=10 
      a[i][j] += a[i + 1][j] * a[i - 1][j];
    }
  }
}
// pragma modes
#pragma ACCEL kernel

void func_top_28()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL parallel complete
{
      
#pragma ACCEL PARALLEL COMPLETE 
      a[i][j] += a[i + 1][j] * a[i - 1][j];
    }
  }
}
// pragma modes
#pragma ACCEL kernel

void func_top_29()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL parallel complete
{
      
#pragma ACCEL PARALLEL COMPLETE 
      a[i][j] += a[i + 1][j] * a[i - 1][j];
    }
  }
}
// pragma modes
#pragma ACCEL kernel

void func_top_30()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel complete priority = logic
{
      a[i][j] = b[i - 1][j] + b[i + 1][j] + b[i][j];
    }
  }
}
// test priority
#pragma ACCEL kernel

void func_top_31()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor=4 priority=logic
{
      a[i][j] = b[i - 1][j] + b[i + 1][j] + b[i][j];
    }
  }
}
//test pragma parameter
#pragma ACCEL kernel

void func_top_32()
{
  int a[100];
  int b[100];
  int i;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline_parallel factor=0
{
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_33()
{
  int a[100];
  int b[100];
  int i;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline_parallel factor = -1
{
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_34()
{
  int a[100];
  int b[100];
  int i;
  int NN = 100;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline_parallel factor = NN
{
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_38()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
// Original: #pragma ACCEL false_dependence variable=a
{
    
#pragma ACCEL PIPELINE 
    
#pragma ACCEL FALSE_DEPENDENCE VARIABLE=a 
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL parallel complete
{
      
#pragma ACCEL PARALLEL COMPLETE 
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_39()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma ACCEL PIPELINE 
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL parallel factor=10
{
      
#pragma ACCEL PARALLEL FACTOR=10 
      a[i][j] = b[i][j];
    }
  }
}
#pragma ACCEL kernel

void func_top_41()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  int k;
  for (k = 0; k < 100; k++) 
// Original: #pragma ACCEL pipeline
{
    
#pragma ACCEL PIPELINE 
    for (i = 0; i < 100; i++) {
      for (j = 0; j < 100; j++) {
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_42()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  int k;
  for (k = 0; k < 100; k++) 
// Original: #pragma ACCEL parallel factor = 10
{
    
#pragma ACCEL PARALLEL FACTOR=10 
    for (i = 0; i < 100; i++) {
      for (j = 0; j < 100; j++) {
        a[i][j] = b[i][j];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_43()
{
  int a[100];
  int b[100];
  int i;
  for (i = 0; i < 100; i++) {
    b[i] = i;
  }
  for (i = 0; i < 100; i++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
    a[i] = b[i];
  }
}
#pragma ACCEL kernel

void func_top_44()
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
      a[i][j] = b[3 * i][j] + b[2 * i][j] + b[1 * i - 1][j];
    }
  }
  for (i = 0; i < 100; i++) {
    int k;
    for (j = 0; j < 100; j++) 
// Original: #pragma ACCEL pipeline_parallel factor = 10
{
      a[i][j] = b[3 * i][i + j] + b[2 * i][i + j] + b[1 * i - 1][i + j + 1];
    }
  }
}

void sub_46(int a[100][100])
{
  int b[100][100];
  int i;
  int j;
  int k;
  for (i = 0; i < 100; i++) {
    for (j = 0; j < 100; j++) {
      int var1 = i + 1;
      int var0 = i;
      for (k = 0; k < 100; k++) 
// Original: #pragma ACCEL pipeline_parallel factor=2
{
        a[var1][k] += b[var1][j + k];
        a[var0][k] += b[var0][j + k];
      }
    }
  }
}
#pragma ACCEL kernel

void func_top_46()
{
  int aa[100][100];
  sub_46(aa);
}
#pragma ACCEL kernel

void func_top_47()
// Original: #pragma ACCEL parallel factor = 10
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  int k;
  k = 0;
  while(k < 100){
    i = 0;
    while(i < 100){
      j = 0;
      while(j < 100){
        a[i][j] = b[i][j];
        ++j;
      }
      ++i;
    }
    ++k;
  }
}
#pragma ACCEL kernel

void func_top_48()
// Original: #pragma ACCEL parallel factor = 10
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  int k;
  k = 0;
  while(k < 100){
    i = 0;
    while(i < 100){
      j = 0;
      while(j < 100){
        a[i][j] = b[i][j];
        ++j;
      }
      ++i;
    }
    ++k;
  }
}
/*counter example*/
#pragma ACCEL kernel

void func_top_49()
// Original: #pragma ACCEL tiling factor = 10
{
  int a[100][100];
  int b[100][100];
  int i;
  int j;
  int k;
  k = 0;
  while(k < 100){
    i = 0;
    while(i < 100){
      j = 0;
      while(j < 100){
        a[i][j] = b[i][j];
        ++j;
      }
      ++i;
    }
    ++k;
  }
}
#define F 2
#define skip_check
#pragma ACCEL kernel

void func_top_50()
{
  for (int i = 0; i < 10; ++i) {
// should not replace 'skip_check'
    
#pragma HLS unroll factor=2 skip_check
  }
}
